-- bits (2 elemnts) for alternation
mod! BIT {
 [BitLt < Bit]
 ops b0 b1 : -> BitLt .
 eq (B1:BitLt = B2:BitLt) = (B1 == B2) .
}

mod* TRIV= {
[Elt]
pred _=_ : Elt Elt {comm}.
eq (E:Elt = E) = true .
}

mod* TRIV= {
[Elt]
pred _=_ : Elt Elt {comm}.
eq (E:Elt = E) = true .
}

-- Sequence
mod* SEQ (X :: TRIV=) {
pr(NAT)
[Elt < Seq]
-- empty Sequence
op emp : -> Seq .
op (_ _) : Seq Seq -> Seq {constr assoc id: emp}
eq (S:Seq = S) = true .
eq (emp = (E:Elt S:Seq)) = false .
eq (E1:Elt = (E21:Elt E22:Elt S2:Seq)) = false .
eq ((E11:Elt E12:Elt S1:Seq) = (E21:Elt E22:Elt S2:Seq))
     = ((E11 = E21) and (E12 = E22) and (S1 = S2)) .
}

-- receiver to sender channel
mod! RSCH {
  pr(SEQ(BIT{sort Elt -> Bit
             op (E1:Elt = E2:Elt) -> (E1:Bit = E2:Bit)})
     *{sort Seq -> RSch, op emp -> empB})}

-- properties on RSCH
mod RSCHprop {
pr(RSCH)

vars B B1 B2 : Bit .
var RSC : RSch .

-- zero change of elements
pred zeroC : RSch .
eq zeroC(empB) = true .
eq zeroC(B) = true .
eq zeroC(B1 RSC B2) = ((B1 = B2) and zeroC(B1 RSC)) .

-- at most one change of elements
pred oneC : RSch .
eq oneC(empB) = true .
eq oneC(B) = true .

-- (1)
eq oneC(B1 RSC B2) =
     if (B1 = B2) then zeroC(B1 RSC) else oneC(B1 RSC) fi .

}

open RSCHprop .
op rsc : -> RSch .

-- (2)
eq oneC(b0 b1 rsc) = zeroC(b1 rsc) .

--> (3)
red oneC(b0 b1 rsc b0) .

close

eof

添付のコードをシステムに入力するとreduction command (3)は
  (zeroC((b1 rsc))):Bool
を返しますが，これは(traceで確かめたところ）システムが等式(2)を適用して
出力しています．しかし(3)で入力した項
  oneC(b0 b1 rsc b0)
には等式(2)はマッチせず適用できないはずです．適用可能な等式(1)は適用され
ません．
