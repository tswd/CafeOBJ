-- =================================================================
mod MMM {

[Bit Event < Val < ValSq]
op _,_ : ValSq ValSq -> ValSq {assoc} .
[Val < VlSq]
op _;_ : VlSq VlSq -> VlSq {assoc} .
[VlSq ValSq < SqSq]
op _,_ : SqSq SqSq -> SqSq {assoc} .

--
ops b0 b1 : -> Bit .
op *b* : -> VlSq .
eq *b* = (b0 ; b1) .
ops ss rr : -> Event .

-- for generating all combinations of
-- elements in VlSq, i.e. in (e1 ; e2 ; ...)
op [_] : SqSq -> SqSq .
op _||_ : SqSq SqSq -> SqSq {assoc} .
var V : Val .
var VS : VlSq .
vars SS1 SS2 : SqSq .
eq [((V ; VS),SS2)] = [(V,SS2)] || [(VS,SS2)] .
eq [(SS1,(V ; VS),SS2)] = [(SS1,V,SS2)] || [(SS1,VS,SS2)] .
eq [(SS1,(V ; VS))] = [(SS1,V)] || [(SS1,VS)] .

[Indicator]
op _|_ : Indicator Indicator -> Indicator {assoc} .
op mmi_ : SqSq -> Indicator .
eq mmi(SS1 || SS2) = (mmi SS1) | (mmi SS2) .

-- if all elements of SqSq are of the sort Val
-- mmi passes its argument to mi
op mi_ : ValSq -> Indicator .
var VSQ : ValSq .
eq mmi[VSQ] = mi(VSQ) .

}

--> (1) it does not work
red in MMM :  mmi [*b*,rr,rr,ss] .

--> (2) it works
red in MMM :  mmi [ss,rr,rr,ss] .

--> (3) it works
red in MMM :  mmi [*b*,rr,ss] .

-- ==================================================
