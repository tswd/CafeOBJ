Dear Razvan,

The system has already a special kind sort construct called `or-sort'
representing a disjoint union of multiple sorts. At the very early stage
of our language, I was considering notations representing a kind of 
culculus on sorts, such as S + S'(disjoint union), S - S'(difference),
and S ^ S'(intersection).  The last one is really used in the current
system for representing a sort which are generated automatically for
regularizing the signature of a module (ivoked by `regularize' command).
The original intension was to provide a way to specifying the sort of a
term by notion like t : SortExpr .  This is similar in some sence to MEL. 
Now we are trying to enhance our language by taking a modest way to MEL
and are experimenting some new features. As you suggested, for representating
the sort of term belonging multiple sorts not related each other by partial 
order, we may be able to use `S + S' and its corresponding internal sort 
object. I considered this for the enhancement of MEL features, but did not
included it in 1.4.2(alpha2), because it requred not so small amount of
changes and I did want this to be very consistent with other parts of
the system. For example, once we provide a printing form like
      t : S + S'
for the resulting term, users may wander why he or she cannot use this
kind of notations in their specification. One can easily imagine that it
will be convenient if we can write an axiom like
      ceq LHS(X) = RHS if X : (S1 + S2) .
this is just an abbriviation of
      ceq LHS(X) = RHS if (X : S2) or (X : S2) .
but notation is more compact and readable. Or how about the operator
declaration like
      op foo : (S1 ^ S2) -> S
this provides a very explicit way of declaring partial functions. 

