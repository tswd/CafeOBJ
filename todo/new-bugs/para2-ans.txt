Dear Razvan,

There are 2 problems in the implementation:
 (1) operator printing 
 (2) finding error sort
I enclosed the patch in this mail. 

And for the instantiation problem, 
please recall that the interpreter uses `shared' approach.
That is, the module BASIC-CAT is shared among C.FUNCTOR
and D.FUNCTOR in module FUNCTOR.
      mod* FUNCTOR (C :: CATEGORY, D :: CATEGORY) { ... }
Thus both of sorts Obj.C and Obj.D denote the same object
(and for Arr.C and Arr.D). 
To avoid this problem, please declare CATEGORY as

   mod* CATEGORY { us(BASIC-CAT) }

> module FUNCTOR(C <= CAT1, D <= cat2)
> { ** opening
>   imports {
>    protecting (CAT1)
>    protecting (CAT2)
>  }
>  signature {
>    op _ fun : 3Tuple -> 3Tuple { prec: 41 }
>    op _ fun : 3Tuple -> 3Tuple { prec: 41 }

           :
The duplicated 
       op _ fun : 3Tuple -> 3Tuple { prec: 41 }
is a problem of the printing routine of the system. 

Please apply the following patch, and chage the declaration of
the CATEGORY as mentioned in the above.

--- BEGIN -<find-print-patch-1.lisp>--------------------------
;;; patch for 1.4.2a2, 
;;; view-patch-1.lisp must already be applied.
;;; Tue Jun  9 21:41:24 JST 1998

(in-package :chaos)
;;;
;;; from find.lisp of primitives
;;;
(defun find-compatible-err-sort (sort module &optional sortmap)
  (when (or (sort= sort *cosmos*)
	    (sort= sort *universal-sort*)
	    (sort= sort *bottom-sort*)
	    (sort= sort *huniversal-sort*)
	    )
    (return-from find-compatible-err-sort sort))
  ;;
  (cond ((err-sort-p sort)
	 (or (cdr (memq sort sortmap))
	     (let* ((compo (car (err-sort-components sort)))
		    (xs (if sortmap
			    (modmorph-assoc-image sortmap compo)
			    compo)))
	       ;;
	       (or (the-err-sort xs (module-sort-order module))
		   sort))))
	(t (let ((xs (if sortmap
			 (modmorph-assoc-image sortmap sort)
			 sort)))
	     (the-err-sort xs (module-sort-order module))))))

;;; from boperator.lisp of primitive

(defmacro operator= (_o1 _o2) `(eq ,_o1 ,_o2))

(defmacro get-operator-info (_*operator _*infos)
  `(car (member ,_*operator ,_*infos :test #'(lambda (x y)
					   (operator= x (opinfo-operator y))))))

;;; from print-object.lisp of primitives

(defun print-op-brief (op &optional (module *current-module*))
  (let ((ind *print-indent*)
 	(opinfo (get-operator-info op (module-all-operators module))))
    (dolist (meth (reverse (opinfo-methods opinfo)))
      (when (or (not (method-is-error-method meth))
		(method-is-user-defined-error-method meth))
	(print-next)
	(let ((*print-indent* (+ 4 ind)))
	  (if (method-is-behavioural meth)
	      (princ "bop ")
	      (princ "op "))
	  (print-simple-princ-open (operator-symbol op))
	  (print-check)
	  (princ " : ")
	  (when (method-arity meth)
	    (print-sort-list (method-arity meth) *current-module*)
	    (princ " "))
	  (print-check)
	  (princ "-> ")
	  (print-sort-name (method-coarity meth) module)
	  (print-check)
	  (print-method-attrs meth))
	))))

;;; EOF
--- END --<find-print-patch-1.lisp>-------------------------------
