Dear Razvan, 

Enclosed is a fix for the bug 

> Instead of getting the result err, the system cannot reduce (by
> failure to apply the 2nd bceq):
>
> %BUF(X)> red get take put(e1, init) .
> -- reduce in %(X.BUF) : get (take put(e1,init))
     :
> get (take put(e1,init)) : ?Elt

Let me describe a bit about this bug. The system allows user
to declare a behavioural axioms which contains non behavioural
operators, but system mark them as :bad and does not use them
as rewrite rules. This check incorrectly rejects axioms with
coherent operators in them. This patch corrects this behaviour.

NOTE! I will send another fix for a problem of interface with brute
      soon later, thus for reducing the annoying patching work, 
      please wait this fix.

--- BEGIN-<beh-patch1.lisp>----------------------------------------
(in-package :chaos)

(defun term-can-be-in-beh-axiom? (term)
  (declare (type term term)
	   (values (or null t)))
  (cond ((term-is-applform? term)
	 (and (if (find-if #'(lambda (x)
			       (sort-is-hidden x))
			   (mapcar #'(lambda (y) (term-sort y))
				   (term-subterms term)))
                  ;; for a moment
		  (or (method-is-behavioural (term-head term))
		      (method-is-coherent (term-head term)))
		  t)
	      (every #'term-can-be-in-beh-axiom? (term-subterms term))))
	(t t)))
--- END-<beh-patch1.lisp>-------------------------------------------

And following is a patch for letting system to perform a (trivial)
proof even when there is a hidden sort having only attributes defined
(no methods at all), and adds an axiom `ceq X =*= Y = true if ...'.

--- BEGIN-<beh-patch2.lisp>-----------------------------------------
(defun construct-beh-stuff (module)
  (declare (type module module)
	   (values list))
  (setf (module-beh-stuff module) nil)	; reset to initial.
  (let ((methods (module-beh-methods module))
	(attributes (module-beh-attributes module)))
    (declare (type list methods attributes))
    (unless (and attributes
		 (or (some #'(lambda (x) (eq module (method-module x)))
			   methods)
		     (some #'(lambda (x) (eq module (method-module x)))
			   attributes)))
      (return-from construct-beh-stuff nil))
    ;; 
    (let ((beh-list nil)
	  (beh nil))
      (declare (type list beh-list))
      (dolist (s (module-all-sorts module))
	(when (and (sort-is-hidden s)
		   (not (or (sort= s *huniversal-sort*)
			    (sort= s *hbottom-sort*))))
	  (setq beh (make-beh-stuff :hs s))
	  ;; 
	  (dolist (m methods)
	    (let ((c (find-if #'(lambda (x) (sort-is-hidden x)) (method-arity m))))
	      (when (sort= c s)
		(push m (beh-stuff-methods beh)))))
	  ;;
	  (dolist (attr attributes)
	    (let ((as (dolist (x (method-arity attr))
			(when (sort-is-hidden x) (return x)))))
	      (when (sort= as s)
		(push attr (beh-stuff-attributes beh)))))
	  ;;
	  (when (beh-stuff-attributes beh)
	    (push beh beh-list))
	  ))
      ;;
      (add-beh-equivalence module beh-list)
      ;;
      (setf (module-beh-stuff module) beh-list))))
--- END-<beh-patch2.lisp>-------------------------------------------

If you need `beh-patch2.lisp' also, please just concatenate it to
`beh-patch1.lisp'. Then apply the patch procedure as always:

(1) invoke cafeobj interpreter
(2) ev (compile-file "./patch-file.lisp")
(3) ev (load "./patch-file.o")
(4) save-system /tmp/cafeobj.exe
(5) replace old /usr/local/cafeobj-1.4/bin/cafeobj.exe

Best wishes

-- sawada@sra.co.jp
