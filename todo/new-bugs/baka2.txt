Date: Wed, 3 Jun 1998 11:12:42 +0900
From: Kokichi Futatsugi <kokichi@shin.jaist.ac.jp>
Message-Id: <199806030212.LAA00444@shin.jaist.ac.jp>
To: diacon@jaist.ac.jp, s_iida@jaist.ac.jp, sawada@sra.co.jp
In-reply-to: <199806020631.PAA00801@pepper.jaist.ac.jp> (kokichi)
Subject: Re: param
Cc: kokichi@jaist.ac.jp
Reply-to: kokichi@jaist.ac.jp
Content-Type: text
Content-Length: 2131

Sawada san,

I checked the newest verion of the interpreter.
It is working as you said.  Thank you for your efforts.

However, as you seem to notice already, I also saw that there seem to
be some strange things still remained

For example, "make" command does not work well, and some
destructions happend as follows.

==========================================================
CafeOBJ> make  FOO(NAT, QID) .
-- defining module FOO
[Warning]: redefining module FOO ._* done.
CafeOBJ> CafeOBJ> sh FOO .
module FOO		<-- destraction after make
{
  imports {
    protecting (NAT)  
  }
}  
CafeOBJ> make  BAR(NAT, QID) .
-- defining module BAR
[Warning]: redefining module BAR ._* done.
CafeOBJ> CafeOBJ> sh BAR .
module BAR		<-- destraction after make
{
  imports {
    protecting (NAT)
  }
}
===========================================================

The similar things (?) see to happen after "partial instanciation" of
parameters as follows.

==========================================================
CafeOBJ> sh BAR 
module BAR (C1.2TUPLE :: TRIV, C2.2TUPLE :: TRIV, X :: TRIV, Y :: TRIV)
{
  imports {
    protecting (2TUPLE)
  }
}

CafeOBJ> mod M2 {pr (BAR (NAT))}
-- defining module M2,,,,,,,*,,,,,,,*._* done.
CafeOBJ> sh M2
module M2 (X.BAR :: TRIV, Y.BAR :: TRIV)  <--- only two params remain
{
  imports {
    protecting (BAR(C1 <= NAT))
  }
}

=============================================================================

Wrt,
 | |Sorry, I might be miss the point, but I cannot understand
 | |why 
 | |	mod FOO(X :: TRIV) { pr(TRIV+(X)) }
 | |and 
 | |        mod FOO { pr(TRIV+) }
 | |should be the same.

Because of simplicity,
it seems to be better to treat the expression like:
	mod BAR (X :: TRIV, Y :: TRIV) { pr(LIST(X)+SET(Y)) }
just for notational convention to support  
	BAR(NAT,QID)
like expression, and does not make any structural differences from
	mod BAR { pr(LIST+SET) }
except necessary renaming of parameters (morphisms).

I disscuss this with Razvan, and this is our tentative conclusion.  It
seems to be better to think a little bit more on this issue

I will try to call you today around 14:00.


