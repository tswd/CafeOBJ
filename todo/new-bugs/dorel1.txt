Return-Path: dlucanu@info.uaic.ro 
Received: from srasva.sra.co.jp (root@srasva [133.137.12.2]) by sras75.sra.co.jp (8.6.13/3.4W-sra) with ESMTP id XAA15880 for <sawada@sras75.sra.co.jp>; Fri, 12 Feb 1999 23:26:29 +0900
Received: from sranha.sra.co.jp (sranha [133.137.8.8])
	by srasva.sra.co.jp (8.8.7/3.6Wbeta7-srambox) with ESMTP id XAA06966
	for <sawada@srasva.sra.co.jp>; Fri, 12 Feb 1999 23:27:06 +0900 (JST)
Received: from sraigw.sra.co.jp (sraigw-hub [133.137.8.14])
	by sranha.sra.co.jp (8.8.7/3.6Wbeta7-sranha) with ESMTP id XAA09220
	for <sawada@sra.co.jp>; Fri, 12 Feb 1999 23:27:18 +0900 (JST)
Received: from orion.uaic.ro (orion.uaic.ro [193.226.23.1])
	by sraigw.sra.co.jp (8.8.7/3.6Wbeta7-sraigw) with ESMTP id XAA01882
	for <sawada@sra.co.jp>; Fri, 12 Feb 1999 23:27:11 +0900 (JST)
Received: from thor.infoiasi.ro (root@thor.info.uaic.ro [193.231.30.193])
	by orion.uaic.ro (8.8.7/8.8.7) with ESMTP id OAA28785
	for <sawada@sra.co.jp>; Fri, 12 Feb 1999 14:38:15 +0200
Received: from info.uaic.ro (IDENT:dlucanu@lucanu.info.uaic.ro [193.231.30.218])
	by thor.infoiasi.ro (8.9.2/8.9.2) with ESMTP id QAA13154
	for <sawada@sra.co.jp>; Fri, 12 Feb 1999 16:27:16 +0200 (EET)
Sender: dlucanu@infoiasi.ro
Message-ID: <36C457DD.6F02424A@info.uaic.ro>
Date: Fri, 12 Feb 1999 16:33:33 +0000
From: Dorel Lucanu <dlucanu@infoiasi.ro>
Organization: University "A.I.Cuza",  Faculty of Computer Science
X-Mailer: Mozilla 4.04 [en] (X11; I; Linux 2.0.33 i586)
MIME-Version: 1.0
To: Toshimi Sawada <sawada@sra.co.jp>
Subject: How can CafeOBJ run faster?
Content-Type: multipart/mixed; boundary="------------90387B39AF691C26C5F4F561"
Content-Length: 18844

This is a multi-part message in MIME format.
--------------90387B39AF691C26C5F4F561
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Dear Toshimi,

I have written a new version for ABP (Ohhh, yes, ABP again ...). The
problem is that its verification last a long time. This happens because
there are terms which are reduced several times and the number of these
rewritings grows exponentially. My question is whether there exist
special rewriting engines which can be used for cases like this. If the
answer is yes, please tell me how can I use them. I attached a file
including the specification and a test proof score. The second set of
four reductions requires on my computer (Pentium 200) about one hour for
each reduction. I haven't the courage to run the last four reductions.
This specification seems to be a good test case study for CafeOBJ
system. I hope you enjoyed it.

Thank you very much for your cooperation.
Best wishes,
Dorel.



-- 
=========================================
Dorel Lucanu
Universitatea "A.I.Cuza"
Facultatea de Informatica
str. Berthelot 16
6600 Iasi, Romania

e-mail: dlucanu@infoiasi.ro
home page: http://www.infoiasi.ro/~dlucanu/
tel: home       40 32 156487
     office     40 32 146141
     department 40 32 216560
=========================================
--------------90387B39AF691C26C5F4F561
Content-Type: text/plain; charset=us-ascii; name="abpns.mod"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline; filename="abpns.mod"

       mod* DATA { [ Data ] }

        mod* TRIV+ { pr(TRIV) [Elt < Elt+] op err : -> Elt+ }

        mod* ILIST[X :: TRIV] {
          [ IList ]
          op head_ : IList -> Elt
          op tail_ : IList -> IList
        }

        mod! FLIST[X :: TRIV] {
          [NeFList < FList]
          op [nil] : -> FList
          op head_ : NeFList -> Elt
          op tail_ : NeFList -> FList
          op [_]_ : Elt FList -> NeFList 
          var L : FList
          var E : Elt
          eq head([E] L) = E .
          eq tail([E] L) = L .
        }

        mod! DATA-BOOL {
          protecting (2TUPLE (C1 <= view to DATA {sort Elt -> Data},
                              C2 <= view to BOOL {sort Elt -> Bool})
                            * {sort 2Tuple -> Data-Bool})
          [Data-Bool < Data-Bool+]
          op << err ; false >> : -> Data-Bool+
        }

        mod! BOOL+ { [Bool+]  [Bool < Bool+] op err : -> Bool+ }



-- a new version (8.02.99)


        mod! EVENTS-SR {
          [EventSR]
          ops SEND REC : -> EventSR
          op next_ : EventSR -> EventSR
          eq next SEND = REC .
          eq next REC = SEND .
          eq next next E:EventSR = E .
        }


-- the sender and receiver

        mod* SENDER/RECEIVER (X :: TRIV, Y :: TRIV) {
          protecting(EVENTS-SR)

          *[ SenderReceiver ]*
          -- operators for scenario
          op m : SenderReceiver -> SenderReceiver {coherent}
          op event_ : SenderReceiver -> EventSR
          -- additional operators
          op init : -> SenderReceiver
          op receive : SenderReceiver Elt.Y -> SenderReceiver {coherent}
          bop rcvd-data_ : SenderReceiver -> Elt.Y
          bop flag_ : SenderReceiver -> Bool

          var SR : SenderReceiver
          var E : Elt.Y
          -- equations for scenario
          eq event m(SR) = next event SR .
          eq event receive(SR, E) = event SR .
          -- equations for flag
          ceq flag m(SR) = flag(SR) if event SR == SEND .
          eq flag receive(SR, E) = flag SR .
          -- equations for rcvd-data
          eq rcvd-data receive(SR, E) = E .
          eq rcvd-data m(SR) = rcvd-data SR .
        }

        mod* SENDER {
          protecting (SENDER/RECEIVER(X <= view to DATA-BOOL {sort Elt -> Data-Bool}
                                      Y <= view to BOOL {sort Elt -> Bool}
                                     )*{hsort SenderReceiver -> Sender
                                        op init -> init-S })
          protecting(ILIST(X <= view to DATA {sort Elt -> Data}))

          bop sndng-list _ : Sender -> IList 
          var S : Sender
          var B : Bool

          eq event init-S = SEND .

          eq flag init-S  = true .
          ceq flag m(S) = flag(S) 
              if event S == REC and rcvd-data m(S) == (not flag S) .
          ceq flag m(S) = not flag(S) 
              if event S == REC and rcvd-data m(S) == flag S .

          ceq sndng-list m(S) = sndng-list S 
              if event S == SEND or (event S == REC and rcvd-data m(S) == (not flag S)) .
          ceq sndng-list m(S) = tail(sndng-list S) 
              if event S == REC and rcvd-data m(S) == flag S .
          eq sndng-list receive(S, B) = sndng-list S .
        }

        mod* RECEIVER {
          protecting (SENDER/RECEIVER(X <= view to BOOL {sort Elt -> Bool},
                                      Y <= view to DATA-BOOL {sort Elt -> Data-Bool}
                                     )*{hsort SenderReceiver -> Receiver
                                        op init -> init-R })

          protecting(FLIST(X <= view to DATA {sort Elt -> Data}))

          bop rcvd-list _ : Receiver -> FList
          var R : Receiver
          var DB : Data-Bool

          eq event init-R = REC .

          eq flag init-R = false .
          eq rcvd-list init-R = [nil] .

          ceq flag m(R) = flag R
              if event R == REC and 2* rcvd-data m(R) == flag R .
          ceq flag m(R) = not flag R 
              if event R == REC and 2* rcvd-data m(R) == (not flag R) .

          ceq rcvd-list m(R) = rcvd-list R 
              if event R == SEND or (event R == REC and 2* rcvd-data m(R) == flag R) .
          ceq rcvd-list m(R) = [1* rcvd-data m(R)] rcvd-list R  
              if event R == REC and 2* rcvd-data m(R) == (not flag R) .
          eq rcvd-list receive(R, DB) = rcvd-list R .
        }

-- the channels

        mod* UBUFFER (X :: TRIV+) {
          *[ UBuffer ]*
          op init : -> UBuffer
          bop put : UBuffer Elt -> UBuffer
          op del : UBuffer -> UBuffer {coherent}
          bop get_ : UBuffer -> Elt
          bop get_ : UBuffer -> Elt+
          bop empty?_ : UBuffer -> Bool
          bop cserr?_ : UBuffer -> Bool

          var UB : UBuffer
          var E : Elt
 
          ceq get put(UB,E) = E  if not cserr? put(UB,E) .
          ceq get UB = err if empty? UB or cserr? UB .
          eq empty? init = true .
          eq empty? del(UB) = true .
          eq empty? put(UB, E) = false .
        }

        mod* UCH1 {
          protecting (UBUFFER (X <= view to DATA-BOOL {sort Elt -> Data-Bool, 
                                                          sort Elt+ -> Data-Bool+,
                                                          op err -> << err ; false >>})
                             *{hsort UBuffer -> UCh1,
                               op init -> init-UCH1 })
        }

        mod* UCH2 {
          protecting (UBUFFER (X <= view to BOOL+ {sort Elt -> Bool, sort Elt+ -> Bool+})
                             *{hsort UBuffer -> UCh2,
                               op init -> init-UCH2 })
        }

        mod! EVENTS-ABP {
          [ Event ]
          ops SENDER RECEIVER : -> Event
        }

-- the ABP

        mod* ABP {
          protecting (SENDER + UCH1 + RECEIVER + UCH2 + EVENTS-ABP)
          *[ Abp ]*
  
          op init : -> Abp
          bop m : Abp -> Abp
          bop event_ : Abp -> Event
          -- projections on the components
          op uch1_ : Abp -> UCh1 { coherent }
          op uch2_ : Abp -> UCh2 { coherent }
          op sender_ : Abp -> Sender { coherent }
          op receiver_ : Abp -> Receiver { coherent }

          var A : Abp

        -- initial state 
          eq uch1 init = init-UCH1 .
          eq uch2 init = init-UCH2 .
          eq sender init = init-S .
          eq receiver init = init-R .

          -- projection equations
          ceq sender m(A) = m(sender A) 
              if event A == SENDER and 
                 (event sender A == SEND or cserr? uch2 A or empty? uch2 A) .
          ceq sender m(A) = m(receive(sender A, get uch2 A)) 
              if event A == SENDER and event sender A == REC and 
                 not empty? uch2 A and not cserr? uch2 A .
          ceq sender m(A) = sender A 
              if event A == RECEIVER . -- or 
--                 (event A == SENDER and event sender A == REC and empty? uch2 A) .

          ceq receiver m(A) = m(receiver A) 
              if event A == RECEIVER and 
                 (event receiver A == SEND or cserr? uch1 A or empty? uch1 A) .
          ceq receiver m(A) = m(receive(receiver A, get uch1 A)) 
              if event A == RECEIVER and event receiver A == REC and 
                 not empty? uch1 A and not cserr? uch1 A .
          ceq receiver m(A) = receiver A 
              if event A == SENDER . -- or 
--                 (event A == RECEIVER and event receiver A == REC and empty? uch1 A) .

          ceq uch1 m(A) = put(uch1 A, << head(sndng-list sender A) ; flag sender A >>) 
              if event A == SENDER and event sender A == SEND and empty? uch1 A .
          ceq uch1 m(A) = del(uch1 A) 
              if event A == RECEIVER and event receiver A == REC and not empty? uch1 A .
          ceq uch1 m(A) = uch1 A  
              if (event A == SENDER and event sender A == SEND and not empty? uch1 A) or
                 (event A == SENDER and event sender A == REC) or
                 (event A == RECEIVER and event receiver A == REC and empty? uch1 A) or
                 (event A == RECEIVER and event receiver A == SEND) .

          ceq uch2 m(A) = put(uch2 A, flag receiver A) 
              if event A == RECEIVER and event receiver A == SEND and empty? uch2 A .
          ceq uch2 m(A) = del(uch2 A) 
              if event A == SENDER and event sender A == REC and not empty? uch2 A .
          ceq uch2 m(A) = uch2 A 
              if (event A == RECEIVER and event receiver A == SEND and not empty? uch2 A) or
                 (event A == RECEIVER and event receiver A == REC) or
                 (event A == SENDER and event sender A == REC and empty? uch2 A) or
                 (event A == SENDER and event sender A == SEND) .
        }



-- ABP with reliable channels


        mod* CH1 {
          protecting(UCH1)
          
          eq cserr?(put(UC:UCh1, DB:Data-Bool)) = false .
        }

        mod* CH2 {
          protecting(UCH2)
          
          eq cserr?(put(UC:UCh2, B:Bool)) = false .
        }

        mod* RABP {
          protecting (SENDER + CH1 + RECEIVER + CH2 + EVENTS-ABP)
          *[ Abp ]*
  
          op init : -> Abp
          bop m : Abp -> Abp
          bop event_ : Abp -> Event
          -- projections on the components
          op uch1_ : Abp -> UCh1 { coherent }
          op uch2_ : Abp -> UCh2 { coherent }
          op sender_ : Abp -> Sender { coherent }
          op receiver_ : Abp -> Receiver { coherent }

          var A : Abp

        -- initial state 
          eq uch1 init = init-UCH1 .
          eq uch2 init = init-UCH2 .
          eq sender init = init-S .
          eq receiver init = init-R .



          -- projection equations
          ceq sender m(A) = m(sender A) 
              if event A == SENDER and (event sender A == SEND or cserr? uch2 A) .
          ceq sender m(A) = m(receive(sender A, get uch2 A)) 
              if event A == SENDER and event sender A == REC and 
                 not empty? uch2 A and not cserr? uch2 A .
          ceq sender m(A) = sender A 
              if event A == RECEIVER or 
                 (event A == SENDER and event sender A == REC and empty? uch2 A) .

          ceq receiver m(A) = m(receiver A) 
              if event A == RECEIVER and (event receiver A == SEND or cserr? uch1 A) .
          ceq receiver m(A) = m(receive(receiver A, get uch1 A)) 
              if event A == RECEIVER and event receiver A == REC and 
                 not empty? uch1 A and not cserr? uch1 A .
          ceq receiver m(A) = receiver A 
              if event A == SENDER or 
                 (event A == RECEIVER and event receiver A == REC and empty? uch1 A) .

          ceq uch1 m(A) = put(uch1 A, << head(sndng-list sender A) ; flag sender A >>) 
              if event A == SENDER and event sender A == SEND and empty? uch1 A .
          ceq uch1 m(A) = del(uch1 A) 
              if event A == RECEIVER and event receiver A == REC and not empty? uch1 A .
          ceq uch1 m(A) = uch1 A  
              if (event A == SENDER and event sender A == SEND and not empty? uch1 A) or
                 (event A == SENDER and event sender A == REC) or
                 (event A == RECEIVER and event receiver A == REC and empty? uch1 A) or
                 (event A == RECEIVER and event receiver A == SEND) .

          ceq uch2 m(A) = put(uch2 A, flag receiver A) 
              if event A == RECEIVER and event receiver A == SEND and empty? uch2 A .
          ceq uch2 m(A) = del(uch2 A) 
              if event A == SENDER and event sender A == REC and not empty? uch2 A .
          ceq uch2 m(A) = uch2 A 
              if (event A == RECEIVER and event receiver A == SEND and not empty? uch2 A) or
                 (event A == RECEIVER and event receiver A == REC) or
                 (event A == SENDER and event sender A == REC and empty? uch2 A) or
                 (event A == SENDER and event sender A == SEND) .
        }


-- RABP specifies a corect solution for USRP

        mod RABP-PROOF {
          pr(RABP)
          op a   : -> Abp
          ops d1 d2 : -> Data
          op b   : -> Bool
          op FL : -> FList
          op IL : -> IList
          op next_ : Event -> Event

          eq next SENDER = RECEIVER .
          eq next RECEIVER = SENDER .
          eq next next E:Event = E .

          eq event a = SENDER .
          eq event sender a = SEND .
          eq event receiver a = SEND .
          eq empty? uch1 a = true .
          eq empty? uch2 a = true .
          eq head IL  = d1 .
          eq head tail IL = d2 .

          eq not not B:Bool = B .
        }

        open RABP-PROOF
        eq sndng-list sender a = IL .
        eq rcvd-list receiver a = FL .
        eq flag(sender a) = b .
        eq flag(receiver a) = (not b) .

        red sndng-list(sender m(m(m(m(a))))) .
        red rcvd-list(receiver m(m(m(m(a))))) .
        red flag(sender m(m(m(m(a))))) .
        red flag(receiver m(m(m(m(a))))) . 
        close

        open RABP-PROOF
        eq sndng-list sender a = IL .
        eq rcvd-list receiver a = [d1] FL .
        eq flag(sender a) = b .
        eq flag(receiver a) = b .

        red sndng-list(sender m(m(m(m(a))))) .
        red rcvd-list(receiver m(m(m(m(a))))) .
        red flag(sender m(m(m(m(a))))) .
        red flag(receiver m(m(m(m(a))))) .
        close

        open RABP-PROOF
        eq sndng-list sender a = tail(IL) .
        eq rcvd-list receiver a = [d1] FL .
        eq flag(sender a) = (not b) .
        eq flag(receiver a) = b .

        red sndng-list(sender m(m(m(m(a))))) .
        red rcvd-list(receiver m(m(m(m(a))))) .
        red flag(sender m(m(m(m(a))))) .
        red flag(receiver m(m(m(m(a))))) . 
        close

        open RABP-PROOF
        eq sndng-list sender a = tail(IL) .
        eq rcvd-list receiver a = [d2] [d1] FL .
        eq flag(sender a) = (not b) .
        eq flag(receiver a) = (not b) .

        red sndng-list(sender m(m(m(m(a))))) .
        red rcvd-list(receiver m(m(m(m(a))))) .
        red flag(sender m(m(m(m(a))))) .
        red flag(receiver m(m(m(m(a))))) . 
        close

-- ABP refines RABP

-- Step 1: UCH1|_ABP refines CH1

        mod ABP-PROOF {
          pr(ABP)
          op a   : -> Abp
          op d : -> Data
          op b   : -> Bool

          eq event a = SENDER .
          eq event m(a) = RECEIVER .
          eq event m(m(a)) = SENDER .
          eq event m(m(m(a))) = RECEIVER .
          eq event m(m(m(m(a)))) = SENDER .
          eq event m(m(m(m(m(a))))) = RECEIVER .
          eq empty? uch1 a = true .
          eq empty? uch2 a = true . 
          eq head(sndng-list(sender a)) = d .
          eq flag(sender a) = b .
          eq event sender a = SEND .
          eq event receiver a = SEND .
        }


        mod ABP-PROOF1 {
          pr(ABP-PROOF)

          eq flag(receiver a) = (not b) .
        }

        open ABP-PROOF1
        eq cserr?(put(uch1 a, << d ; b >>)) = true .   --> case 1
        eq rcvd-data sender a = not b .
        eq cserr?(put(uch2 a, not b)) = true .         --> subcase 1.1

        red uch1 m(m(m(m(m(m(a)))))) . --> == put(del(put(uch1 a, << d ; b >>)), << d ; b >>) .
        close

        open ABP-PROOF1
        eq cserr?(put(uch1 a, << d ; b >>)) = true .   --> case 1
        eq cserr?(put(uch2 a, not b)) = false .        --> subcase 1.2

        red uch1 m(m(m(m(m(m(a)))))) . --> == put(del(put(uch1 a, << d ; b >>)), << d ; b >>) .
        close

        open ABP-PROOF1
        eq cserr?(put(uch1 a, << d ; b >>)) = false .  --> case 2
        eq rcvd-data sender a = not b .
        eq cserr?(put(uch2 a, not b)) = true .         --> subcase 2.1

        red uch1 m(m(m(m(m(m(a)))))) . --> == put(del(put(uch1 a, << d ; b >>)), << d ; b >>) .
        close

        open ABP-PROOF1
        eq cserr?(put(uch1 a, << d ; b >>)) = false .  --> case 2
        eq cserr?(put(uch2 a, not b)) = false .        --> subcase 2.2

        red uch1 m(m(m(m(m(m(a)))))) . --> == put(del(put(uch1 a, << d ; b >>)), << d ; b >>) .
        close

-- Step 2: UCH2|_ABP refines CH2

        mod ABP-PROOF2 {
          pr(ABP-PROOF)

          eq flag(receiver a) =  b .
        }


        open ABP-PROOF2
        eq cserr?(put(uch2 a, b)) = true .             --> case 1
        eq 2* rcvd-data receiver a = b .
        eq cserr?(put(uch1 a, << d ; b >>)) = true .   --> subcase 1.1

        red uch2 m(m(m(m(m(m(a)))))) . --> == put(put(uch2 a, b), b) .
        close

        open ABP-PROOF2
        eq cserr?(put(uch2 a, b)) = true .              --> case 1
        eq cserr?(put(uch1 a, << d ; b >>)) = false .   --> subcase 1.2

        red uch2 m(m(m(m(m(m(a)))))) . --> == put(put(uch2 a, b), b) .
        close

        open ABP-PROOF2
        eq cserr?(put(uch2 a, b)) = false .              --> case 2
        eq 2* rcvd-data receiver a = b .
        eq cserr?(put(uch1 a, << d ; b >>)) = true .     --> subcase 2.1

        red uch2 m(m(m(m(m(m(a)))))) . --> == put(put(uch2 a, b), b) .
        close

        open ABP-PROOF2
        eq cserr?(put(uch2 a, b)) = false .              --> case 2
        eq cserr?(put(uch1 a, << d ; b >>)) = false .    --> subcase 2.2

        red uch2 m(m(m(m(m(m(a)))))) . --> == put(put(uch2 a, b), b) .
        close




--------------90387B39AF691C26C5F4F561--

