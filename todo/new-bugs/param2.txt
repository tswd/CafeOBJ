From: Razvan Diaconescu <diacon@jaist.ac.jp>
Date: Wed, 20 May 98 15:35:34 JST
Message-Id: <9805200635.AA01468@is27e0s07.jaist.ac.jp>
To: sawada@sras75.sra.co.jp
Subject:  Re: problems with parameters
Cc: kokichi@jaist.ac.jp, s_iida@jaist.ac.jp
Content-Type: text
Content-Length: 3066

Dear Toshimi,

Thank you very much for your answer. Your answer is very clear, and
your approach is sound and consistent. So, I really agree with your
approach, and somehow expected this explanation. 

 |And I feel nothing strange here. 
 |
 |> The conceptual diagram looks like
 |>        X
 |> TRIV -----> A >-----> B
 |
 |My interpreter (and I) iterpretes the module declaration form 
 |   mod* B (X :: TRIV) {pr (A(X))}      -- (a)
 |quite differently. 
 |First of all, I will show you how to get what you want from
 |the CURRENT interpreter. I will describe what is going on 
 |in the iterpreter in the later mail. I want some amount of time
 |to answer your problem, but for just now, I think the current
 |interpter does not have any severe problem about this issue. 
 |
 |First, if you want the diagram 
 |>        X
 |> TRIV -----> A >-----> B
 |you must declare B as
 |   mod* B { pr(A) }                    -- (b)
 |I feel this declaration form (b) is more natural than (a) with
 |regarding to the diagram. And for a reason (I will describe later),
 |as I said, system does not interpret the form (a) as the diagram.

I really agree that from the point of view of such diagrams, which
constitute the foundation of the current design and understanding of
the module system, suhc declaration is most adequate.

 |Second, if you want the diagram
 |
 |> and if I have another
 |> 
 |>       X
 |> TRIV -----> A >-----> C
 |>
 |>then B + C should be like
 |>
 |>
 |>                   B 
 |>                  ^ \
 |>                 /   \
 |>                /     \
 |>       X       /       V
 |> TRIV -----> A         B + C
 |>              \       ^
 |>               \     /
 |>                \   /
 |>                 V /
 |>                  C
 |
 |You can get them as 
 |
 |    mod* C { pr(A) }
 |    mod FOO { pr (B + C) }
 |
 |here, of course B is declared as (b) of the above.

Yes, I agree with this too.

Let me now explain our motivation with respect to this
problem. Although the current approach is very clean and consistent
with respect to the design of the language and with its semantics
(which in my view is of primary importance), we feel that from the
point of view of readability, it would be really nice (or maybe really
necesary) to have explicit declarations of the parameters at least in
the header of the modules, for example like:

   mod* B (X :: TRIV) {pr (A)}

The point here is that would remind the user that B is a parameterized
module, otherwise in a complex module hierarchy he might completely
lose awarness of this. Notice that for A maybe is not so important to
see that it is a parameterized module, although some people
legitimately might want this too.

So, my question is: how can we achieve this in the current framework?
Maybe we can have some convention, for exmaple if the A(X :: ...) and
then we we use the same X for B (X :: ...) {pr(A(X))} or {pr(A)} then
the system does not treat it as a view. But I am not sure such
convention really works safely.

What do you think about all this?

Best regards,
Razvan

