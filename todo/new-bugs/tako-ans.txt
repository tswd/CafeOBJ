I don't konw what version of the interpreter you are using.
But, at least the version which formaly released as a result
of our last Cafe project (1.4.0 I mean) can hadle these.

You said that the followings are problem and asked me
the current interpreter already solved this problem or not, 
but, let me say these do not concern anything with a 
implementation, it's the problem of the definition of the language,
that is, how the language is defined for parameter passing in this
case. 

>  Moreover, there is no way to use the above notation to:
>
>	mod M {
>	pr (LIST + SET)
>	...
>	}
>
> if both of the parameters (morhisums) of LIST and SET are named X.

Of course, the interpter does something for this, unless the
user can easily lost their ways. 
You can specify a quilified parameter name as like

     M(X.LIST <= V1, X.SET <= V2)

I think this way of treationg is very natural and clear.

Here is a session log I just did with my interpreter:
------------------------------------------------------------
CafeOBJ> mod LIST (X :: TRIV) { [ Elt < List ] }

-- defining module LIST_*_*.._* done.
CafeOBJ> mod SET (X :: TRIV) { [ Elt < Set ] }

-- defining module SET_*_*.._* done.
CafeOBJ> mod M { pr (LIST + SET) }

-- defining module M_*._* done.
CafeOBJ> select M
M(X.SET, X.LIST)> select M(X.LIST <= NAT, X.SET <= QID)
,,,,,,,*,,,,,,,*,,,,,,,*,,,,,,,

M(X.LIST <= NAT, X.SET <= QID)> desc .
======================================================================
              module M(X.LIST <= NAT, X.SET <= QID)
                           kind: loose
                       type: user defined
               created: 1998 Jun 2 Tue 9:01:47 GMT
----------------------------------------------------------------------

                        << submodules >>
  protecting (((%++ SETLIST ))(X <= QID, X <= NAT))

                << sorts and subsort relations >>
  * visible sorts :
    Set, Id < Set
    List, Nat < List
                            :
-----------------------------------------------------------------------

You may see strange modexpr
     (((%++ SETLIST ))(X <= QID, X <= NAT))
This is a problem of module expression printer. 
(I will do some work on this, the next release provides more reable
 notations).

And please recall, formally CafeOBJ uses keyword parameter, 
positional parameter is just an abbriviation and is privided
for compatct module expressions. 

> You should do something like:
> 
>	mod M {
>	pr (LIST + SET(Y))
>	...
>	}

I could not understand the above statement. Where comes Y?

> and in this case this would be more natural and readable to write:
>
>	mod M (X :: TRIV, Y :: TRIV) {
>	pr (LIST(X) + SET(Y))
>	...
>	}
>
> This is what I mean by the notational problem.

So, again what is the problem? Do you want to say that the
interpreter SHOULD NOT support the declaration like

        mod M {
          pr (LIST + SET)
        }

I think this declaration has very clear meaning and is useful.

-- sawada@sra.co.jp

