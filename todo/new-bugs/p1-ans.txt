> | |  protecting(TRIV+(X))
> |
> |as an instantiation of TRIV+! So, there is a very severe obstacle in
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^             
>
> I have a difficulty to understand this.  
> If the parameter of TRIV+(X :: TRIV) is instanciated and it can not be 
> instanciated any more, it should be "bug".  How do you think? --> Toshimi

Please refer to my replies to Razvan and his comments on them. 

> Besides, if we can not write like:
>
> | |mod* LIST (X :: TRIV) {
> | |  protecting(TRIV+(X))
>

Of course, we can write it, and it is interpreted properly by the system, 
even thoght it might not be fit to your intension (please refer to our
previous discussion with Razvan again). 

>It is difficult (or impossible) to use
>
>   TABLE(NAT, CHAR)
>
>style notation for specify instanciation of two (or more) parameters
>which are brough up from submodules.
>I think we should support
>	   TABLE(NAT, CHAR)
> like notation in writing module expressions.

I could not grasp your exact intension. Please be more explicit.
Could you please show me a diagram representig what you want to get?

Suppose that we have a parameterized module TABLE
   mod* TABLE (A :: TH1, B :: TH2) { .... }

we can specify another parameterized module which passes its
arguments to TABLE like:

   mod! FOO (X :: TH1, Y :: TH2)          -- (1)
   {
     pr(TABLE(X,Y))
       :
    }

Or we can use another style like:

   mod! BAR {  pr(TABLE) .... }           -- (2)

BAR is also parameterized with the parameter inherited from
TABLE, and the meaning of (1) & (2) is different.

-- sawada@sra.co.jp

