To: Razvan Diaconescu <diacon@jaist.ac.jp>
Cc: kokichi@jaist.ac.jp, s_iida@jaist.ac.jp, sawada@sra.co.jp
Subject: Re: new path.mod 
In-reply-to: Your message of "Wed, 03 Jun 1998 17:21:09 JST"
References: <9806030821.AA06223@is27e0s07.jaist.ac.jp> 
Date: Wed, 03 Jun 1998 17:53:27 +0900
From: Toshimi & <sawada@sras75.sra.co.jp>
Content-Type: text
Content-Length: 1912

Dear Razvan,

Thanks a lot. I'm looking forward your new examples of partiality.

I think I should give some description on the implementation of
sort membership predicate. 

It is vertually declared on each Sort S as
      pred (_: S) : ?S 
where ?S is the corresponding error sort of S. Instead of declaring
this predicate explicitly on each sort S, system declares a predicate
      pred (_:_) : ?S SortId
where SortId is a new built-in sort defined in built-in module
CHAOS:PARSER. And predicate itself is universally declared in 
built-in module TRUTH and is defined by built-in procedure, i.e., the
axiom is written in Lisp.
For each module M, system declares constants
of SortId for each sort. For example, assume the following modules:
   mod M1 { [ S0 < S1 ] }
   mod M2 { pr(M1) [ S2 ] }
For module M1, system declares
   ops S0 S1 : -> SortId
and for module M2 system declares
   op S2 : -> SortId
The built-in procedure of _:_ uses this constant to get the internal
sort object to compare with the sort of the first argument. 
You can see these constants by show command, the current system does
not prohibit these constants from being printed. 

There are several reasons why I implemented _:_ as such. The main reason
is to adapt sort renaming or mapping by view be rather easier. 
When mapping a sort S to another sort S', system automatically maps 
corresponding constant of SortId S to S', thus we need not treate 
_:_ appering in axioms specially, and this reduces the chances of
new bugs appearing. Renaming is also treated like mapping. 

And, second reason is a nature of the predicate _:_, it must be 
dynamic in some sence. Assume you declare a module M importing M'.
If you introduce a sort S declaring it as subsort of sort S' 
of module M', now the predicate (_: S') must consider the new sort S. 
This means that we cannot define (_ : S') statically.

Best Regards
-- sawada@sra.co.jp
