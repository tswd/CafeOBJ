SMPI> set exec trace on
SMPI> in /tmp/aho
processing input : /tmp/aho.mod
-- reduce in SMPI : (mpirun(3,((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }))) ==>! L):Bool

**> Step 0 from [state 0] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[1]=(*,0)=>! [state 1] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[2 1]=(*,0)=>! [state 2] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[2 2]=(*,0)=>! [state 3] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 1 from [state 1] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[1 1]=(*,1)=>! [state 4] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[2 1]=(*,1)=>! [state 5] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List

@[2 2]=(*,1)=>! [state 6] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 1 from [state 2] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,1)=>! [state 5] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,1)=>! [state 7] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,1)=>! [state 8] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 1 from [state 3] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,1)=>! [state 6] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,1)=>! [state 8] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,1)=>! [state 9] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 4] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[1 1]=(*,2)=>! [state 10] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,2)=>! [state 11] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,2)=>! [state 12] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 5] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,2)=>! [state 11] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,2)=>! [state 13] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,2)=>! [state 14] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 6] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,2)=>! [state 12] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,2)=>! [state 14] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,2)=>! [state 15] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 7] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,2)=>! [state 13] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,2)=>! [state 16] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,2)=>! [state 17] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 8] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,2)=>! [state 14] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,2)=>! [state 17] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,2)=>! [state 18] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 2 from [state 9] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,2)=>! [state 15] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,2)=>! [state 18] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,2)=>! [state 19] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 3 from [state 10] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[1]=(*,3)=>! [state 20] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,3)=>! [state 21] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,3)=>! [state 22] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 11] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,3)=>! [state 21] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,3)=>! [state 23] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,3)=>! [state 24] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 12] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,3)=>! [state 22] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,3)=>! [state 24] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,3)=>! [state 25] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 13] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,3)=>! [state 23] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,3)=>! [state 26] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,3)=>! [state 27] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 14] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,3)=>! [state 24] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,3)=>! [state 27] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,3)=>! [state 28] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 15] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,3)=>! [state 25] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,3)=>! [state 28] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,3)=>! [state 29] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 3 from [state 16] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,3)=>! [state 26] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,3)=>! [state 30] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,3)=>! [state 31] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 17] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,3)=>! [state 27] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,3)=>! [state 31] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,3)=>! [state 32] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 3 from [state 18] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,3)=>! [state 28] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,3)=>! [state 32] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,3)=>! [state 33] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 3 from [state 19] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,3)=>! [state 29] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,3)=>! [state 33] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,3)=>! [state 34] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 4 from [state 20] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,4)=>! [state 35] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,4)=>! [state 36] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 21] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,4)=>! [state 35] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,4)=>! [state 37] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,4)=>! [state 38] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 22] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,4)=>! [state 36] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,4)=>! [state 38] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,4)=>! [state 39] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 23] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,4)=>! [state 37] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,4)=>! [state 40] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,4)=>! [state 41] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 24] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,4)=>! [state 38] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,4)=>! [state 41] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,4)=>! [state 42] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 25] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,4)=>! [state 39] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,4)=>! [state 42] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,4)=>! [state 43] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 4 from [state 26] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,4)=>! [state 40] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,4)=>! [state 44] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,4)=>! [state 45] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 27] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,4)=>! [state 41] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,4)=>! [state 45] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,4)=>! [state 46] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 28] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,4)=>! [state 42] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,4)=>! [state 46] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,4)=>! [state 47] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 4 from [state 29] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,4)=>! [state 43] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,4)=>! [state 47] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,4)=>! [state 48] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 4 from [state 30] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,4)=>! [state 44] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,4)=>! [state 49] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 31] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,4)=>! [state 45] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,4)=>! [state 49] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,4)=>! [state 50] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 4 from [state 32] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,4)=>! [state 46] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,4)=>! [state 50] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,4)=>! [state 51] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 4 from [state 33] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,4)=>! [state 47] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,4)=>! [state 51] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,4)=>! [state 52] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 4 from [state 34] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,4)=>! [state 48] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,4)=>! [state 52] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,4)=>! [state 53] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 35] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,5)=>! [state 54] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,5)=>! [state 55] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 36] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,5)=>! [state 55] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,5)=>! [state 56] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 37] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,5)=>! [state 54] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,5)=>! [state 57] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,5)=>! [state 58] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 38] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,5)=>! [state 55] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,5)=>! [state 58] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,5)=>! [state 59] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 39] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,5)=>! [state 56] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,5)=>! [state 59] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,5)=>! [state 60] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 5 from [state 40] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,5)=>! [state 57] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,5)=>! [state 61] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,5)=>! [state 62] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 41] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,5)=>! [state 58] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,5)=>! [state 62] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,5)=>! [state 63] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 42] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,5)=>! [state 59] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,5)=>! [state 63] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,5)=>! [state 64] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 5 from [state 43] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,5)=>! [state 60] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,5)=>! [state 64] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,5)=>! [state 65] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 44] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,5)=>! [state 61] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,5)=>! [state 66] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 45] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,5)=>! [state 62] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,5)=>! [state 66] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,5)=>! [state 67] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 46] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,5)=>! [state 63] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,5)=>! [state 67] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,5)=>! [state 68] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 5 from [state 47] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,5)=>! [state 64] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,5)=>! [state 68] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,5)=>! [state 69] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 48] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,5)=>! [state 65] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,5)=>! [state 69] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,5)=>! [state 70] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 49] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,5)=>! [state 66] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,5)=>! [state 71] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 5 from [state 50] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,5)=>! [state 67] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,5)=>! [state 71] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,5)=>! [state 72] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 5 from [state 51] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,5)=>! [state 68] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,5)=>! [state 72] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,5)=>! [state 73] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 52] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,5)=>! [state 69] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,5)=>! [state 73] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,5)=>! [state 74] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 5 from [state 53] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,5)=>! [state 70] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,5)=>! [state 74] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,5)=>! [state 75] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 6 from [state 54] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1 1]=(*,6)=>! [state 76] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,6)=>! [state 77] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 55] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,6)=>! [state 77] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,6)=>! [state 78] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 56] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,6)=>! [state 78] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,6)=>! [state 79] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 6 from [state 57] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,6)=>! [state 76] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,6)=>! [state 80] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,6)=>! [state 81] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 58] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,6)=>! [state 77] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,6)=>! [state 81] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,6)=>! [state 82] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 59] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,6)=>! [state 78] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,6)=>! [state 82] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,6)=>! [state 83] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 6 from [state 60] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,6)=>! [state 79] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,6)=>! [state 83] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,6)=>! [state 84] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 61] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1 1]=(*,6)=>! [state 80] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,6)=>! [state 85] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 62] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,6)=>! [state 81] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,6)=>! [state 85] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,6)=>! [state 86] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 63] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,6)=>! [state 82] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,6)=>! [state 86] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,6)=>! [state 87] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 6 from [state 64] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,6)=>! [state 83] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,6)=>! [state 87] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,6)=>! [state 88] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 65] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,6)=>! [state 84] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,6)=>! [state 88] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,6)=>! [state 89] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 66] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,6)=>! [state 85] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,6)=>! [state 90] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 6 from [state 67] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,6)=>! [state 86] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,6)=>! [state 90] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,6)=>! [state 91] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 6 from [state 68] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,6)=>! [state 87] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,6)=>! [state 91] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,6)=>! [state 92] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 69] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,6)=>! [state 88] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,6)=>! [state 92] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,6)=>! [state 93] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 70] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,6)=>! [state 89] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,6)=>! [state 93] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,6)=>! [state 94] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 6 from [state 71] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,6)=>! [state 90] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,6)=>! [state 95] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 6 from [state 72] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,6)=>! [state 91] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,6)=>! [state 95] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,6)=>! [state 96] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 73] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,6)=>! [state 92] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,6)=>! [state 96] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,6)=>! [state 97] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 6 from [state 74] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,6)=>! [state 93] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,6)=>! [state 97] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,6)=>! [state 98] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 6 from [state 75] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,6)=>! [state 94] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,6)=>! [state 98] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,6)=>! [state 99] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 76] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 1]=(*,7)=>! [state 100] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,7)=>! [state 101] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 7 from [state 77] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,7)=>! [state 101] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,7)=>! [state 102] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 7 from [state 78] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,7)=>! [state 102] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,7)=>! [state 103] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 7 from [state 79] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,7)=>! [state 103] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,7)=>! [state 104] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 80] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List*l
@[1]=(*,7)=>! [state 100] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,7)=>! [state 105] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 7 from [state 81] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,7)=>! [state 101] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,7)=>! [state 105] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,7)=>! [state 106] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 7 from [state 82] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,7)=>! [state 102] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,7)=>! [state 106] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,7)=>! [state 107] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 7 from [state 83] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,7)=>! [state 103] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,7)=>! [state 107] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,7)=>! [state 108] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 84] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,7)=>! [state 104] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,7)=>! [state 108] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,7)=>! [state 109] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 85] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,7)=>! [state 105] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,7)=>! [state 110] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 7 from [state 86] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,7)=>! [state 106] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,7)=>! [state 110] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,7)=>! [state 111] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 7 from [state 87] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,7)=>! [state 107] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,7)=>! [state 111] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,7)=>! [state 112] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 88] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,7)=>! [state 108] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,7)=>! [state 112] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,7)=>! [state 113] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 89] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,7)=>! [state 109] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,7)=>! [state 113] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,7)=>! [state 114] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 90] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,7)=>! [state 110] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,7)=>! [state 115] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 7 from [state 91] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,7)=>! [state 111] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,7)=>! [state 115] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,7)=>! [state 116] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 92] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,7)=>! [state 112] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,7)=>! [state 116] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,7)=>! [state 117] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 93] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,7)=>! [state 113] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,7)=>! [state 117] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,7)=>! [state 118] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 94] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,7)=>! [state 114] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,7)=>! [state 118] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,7)=>! [state 119] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 95] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,7)=>! [state 115] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,7)=>! [state 120] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 96] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,7)=>! [state 116] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,7)=>! [state 120] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,7)=>! [state 121] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 7 from [state 97] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,7)=>! [state 117] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,7)=>! [state 121] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,7)=>! [state 122] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 98] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,7)=>! [state 118] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,7)=>! [state 122] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,7)=>! [state 123] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 7 from [state 99] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,7)=>! [state 119] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,7)=>! [state 123] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,7)=>! [state 124] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 8 from [state 100] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)))):List
@[2 2]=(*,8)=>! [state 125] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 8 from [state 101] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,8)=>! [state 125] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,8)=>! [state 126] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 8 from [state 102] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1 1]=(*,8)=>! [state 126] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,8)=>! [state 127] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 8 from [state 103] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,8)=>! [state 127] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,8)=>! [state 128] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 104] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,8)=>! [state 128] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,8)=>! [state 129] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 105] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,8)=>! [state 125] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,8)=>! [state 130] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 8 from [state 106] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,8)=>! [state 126] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,8)=>! [state 130] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,8)=>! [state 131] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 8 from [state 107] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,8)=>! [state 127] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,8)=>! [state 131] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,8)=>! [state 132] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 108] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,8)=>! [state 128] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,8)=>! [state 132] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,8)=>! [state 133] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 109] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,8)=>! [state 129] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,8)=>! [state 133] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,8)=>! [state 134] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 110] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,8)=>! [state 130] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,8)=>! [state 135] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 8 from [state 111] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,8)=>! [state 131] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,8)=>! [state 135] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,8)=>! [state 136] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 112] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,8)=>! [state 132] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,8)=>! [state 136] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,8)=>! [state 137] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 113] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,8)=>! [state 133] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,8)=>! [state 137] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,8)=>! [state 138] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 114] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,8)=>! [state 134] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,8)=>! [state 138] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,8)=>! [state 139] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 115] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,8)=>! [state 135] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,8)=>! [state 140] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 116] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,8)=>! [state 136] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,8)=>! [state 140] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,8)=>! [state 141] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 117] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,8)=>! [state 137] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,8)=>! [state 141] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,8)=>! [state 142] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 118] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,8)=>! [state 138] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,8)=>! [state 142] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,8)=>! [state 143] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 119] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,8)=>! [state 139] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,8)=>! [state 143] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,8)=>! [state 144] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 8 from [state 120] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,8)=>! [state 140] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,8)=>! [state 145] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 8 from [state 121] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,8)=>! [state 141] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,8)=>! [state 145] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,8)=>! [state 146] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 122] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,8)=>! [state 142] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,8)=>! [state 146] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,8)=>! [state 147] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 8 from [state 123] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,8)=>! [state 143] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,8)=>! [state 147] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,8)=>! [state 148] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 8 from [state 124] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,8)=>! [state 144] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,8)=>! [state 148] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,8)=>! [state 149] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 125] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2 1]=(*,9)=>! [state 150] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 9 from [state 126] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[2 1]=(*,9)=>! [state 150] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,9)=>! [state 151] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 9 from [state 127] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,9)=>! [state 151] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,9)=>! [state 152] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 128] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,9)=>! [state 152] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,9)=>! [state 153] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 129] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,9)=>! [state 153] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,9)=>! [state 154] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 130] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,9)=>! [state 150] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,9)=>! [state 155] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 9 from [state 131] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,9)=>! [state 151] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,9)=>! [state 155] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,9)=>! [state 156] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 132] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,9)=>! [state 152] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,9)=>! [state 156] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,9)=>! [state 157] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 133] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,9)=>! [state 153] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,9)=>! [state 157] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,9)=>! [state 158] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 134] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,9)=>! [state 154] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,9)=>! [state 158] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,9)=>! [state 159] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 135] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,9)=>! [state 155] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,9)=>! [state 160] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 136] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,9)=>! [state 156] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,9)=>! [state 160] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,9)=>! [state 161] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 137] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,9)=>! [state 157] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,9)=>! [state 161] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,9)=>! [state 162] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 138] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,9)=>! [state 158] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,9)=>! [state 162] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,9)=>! [state 163] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 139] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,9)=>! [state 159] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,9)=>! [state 163] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,9)=>! [state 164] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 140] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,9)=>! [state 160] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,9)=>! [state 165] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 9 from [state 141] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,9)=>! [state 161] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,9)=>! [state 165] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,9)=>! [state 166] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 142] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,9)=>! [state 162] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,9)=>! [state 166] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,9)=>! [state 167] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 143] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,9)=>! [state 163] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,9)=>! [state 167] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,9)=>! [state 168] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 144] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,9)=>! [state 164] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,9)=>! [state 168] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,9)=>! [state 169] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 145] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,9)=>! [state 165] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,9)=>! [state 170] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 146] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,9)=>! [state 166] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,9)=>! [state 170] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,9)=>! [state 171] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 9 from [state 147] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,9)=>! [state 167] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,9)=>! [state 171] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,9)=>! [state 172] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 148] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,9)=>! [state 168] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,9)=>! [state 172] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,9)=>! [state 173] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 9 from [state 149] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,9)=>! [state 169] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,9)=>! [state 173] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,9)=>! [state 174] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 10 from [state 150] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((pid :: 0) (np :: 3)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,10)=>! [state 175] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 10 from [state 151] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,10)=>! [state 175] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,10)=>! [state 176] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 10 from [state 152] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,10)=>! [state 176] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,10)=>! [state 177] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 10 from [state 153] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,10)=>! [state 177] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,10)=>! [state 178] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 154] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,10)=>! [state 178] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,10)=>! [state 179] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 155] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,10)=>! [state 175] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,10)=>! [state 180] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 10 from [state 156] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,10)=>! [state 176] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,10)=>! [state 180] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,10)=>! [state 181] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 10 from [state 157] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,10)=>! [state 177] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,10)=>! [state 181] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,10)=>! [state 182] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 158] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,10)=>! [state 178] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,10)=>! [state 182] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,10)=>! [state 183] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 159] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,10)=>! [state 179] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,10)=>! [state 183] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,10)=>! [state 184] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 160] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,10)=>! [state 180] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,10)=>! [state 185] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 10 from [state 161] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,10)=>! [state 181] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,10)=>! [state 185] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,10)=>! [state 186] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 162] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,10)=>! [state 182] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,10)=>! [state 186] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,10)=>! [state 187] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 163] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,10)=>! [state 183] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,10)=>! [state 187] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,10)=>! [state 188] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 164] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,10)=>! [state 184] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,10)=>! [state 188] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,10)=>! [state 189] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 165] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,10)=>! [state 185] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,10)=>! [state 190] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 166] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,10)=>! [state 186] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,10)=>! [state 190] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,10)=>! [state 191] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 167] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,10)=>! [state 187] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,10)=>! [state 191] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,10)=>! [state 192] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 168] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,10)=>! [state 188] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,10)=>! [state 192] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,10)=>! [state 193] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 169] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,10)=>! [state 189] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,10)=>! [state 193] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,10)=>! [state 194] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 10 from [state 170] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,10)=>! [state 190] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,10)=>! [state 195] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 10 from [state 171] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,10)=>! [state 191] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,10)=>! [state 195] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,10)=>! [state 196] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 172] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,10)=>! [state 192] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,10)=>! [state 196] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,10)=>! [state 197] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 10 from [state 173] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,10)=>! [state 193] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,10)=>! [state 197] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,10)=>! [state 198] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 10 from [state 174] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,10)=>! [state 194] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,10)=>! [state 198] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,10)=>! [state 199] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 175] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,11)=>! [state 200] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 176] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,11)=>! [state 200] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,11)=>! [state 201] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 177] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,11)=>! [state 201] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,11)=>! [state 202] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 178] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,11)=>! [state 202] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,11)=>! [state 203] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 179] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,11)=>! [state 203] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,11)=>! [state 204] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 180] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,11)=>! [state 200] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,11)=>! [state 205] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 181] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,11)=>! [state 201] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,11)=>! [state 205] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,11)=>! [state 206] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 182] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,11)=>! [state 202] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,11)=>! [state 206] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,11)=>! [state 207] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 183] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,11)=>! [state 203] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,11)=>! [state 207] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,11)=>! [state 208] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 184] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,11)=>! [state 204] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,11)=>! [state 208] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,11)=>! [state 209] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 185] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,11)=>! [state 205] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,11)=>! [state 210] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 186] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,11)=>! [state 206] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,11)=>! [state 210] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,11)=>! [state 211] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 187] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,11)=>! [state 207] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,11)=>! [state 211] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,11)=>! [state 212] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 188] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,11)=>! [state 208] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,11)=>! [state 212] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,11)=>! [state 213] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 189] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,11)=>! [state 209] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,11)=>! [state 213] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,11)=>! [state 214] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 11 from [state 190] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,11)=>! [state 210] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,11)=>! [state 215] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 11 from [state 191] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,11)=>! [state 211] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,11)=>! [state 215] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,11)=>! [state 216] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 192] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,11)=>! [state 212] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,11)=>! [state 216] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,11)=>! [state 217] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 193] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,11)=>! [state 213] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,11)=>! [state 217] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,11)=>! [state 218] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 11 from [state 194] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,11)=>! [state 214] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,11)=>! [state 218] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,11)=>! [state 219] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 195] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,11)=>! [state 215] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,11)=>! [state 220] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 196] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,11)=>! [state 216] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,11)=>! [state 220] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,11)=>! [state 221] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 11 from [state 197] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,11)=>! [state 217] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,11)=>! [state 221] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,11)=>! [state 222] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 11 from [state 198] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,11)=>! [state 218] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,11)=>! [state 222] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,11)=>! [state 223] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 11 from [state 199] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,11)=>! [state 219] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,11)=>! [state 223] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 200] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 0) (np :: 3)) (int x ;)) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,12)=>! [state 224] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 201] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,12)=>! [state 224] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,12)=>! [state 225] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 12 from [state 202] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,12)=>! [state 225] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,12)=>! [state 226] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 12 from [state 203] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,12)=>! [state 226] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,12)=>! [state 227] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 204] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,12)=>! [state 227] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,12)=>! [state 228] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 205] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,12)=>! [state 224] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,12)=>! [state 229] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 12 from [state 206] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,12)=>! [state 225] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,12)=>! [state 229] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,12)=>! [state 230] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 12 from [state 207] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,12)=>! [state 226] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,12)=>! [state 230] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,12)=>! [state 231] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 208] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,12)=>! [state 227] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,12)=>! [state 231] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,12)=>! [state 232] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 209] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,12)=>! [state 228] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,12)=>! [state 232] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,12)=>! [state 233] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 12 from [state 210] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,12)=>! [state 229] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,12)=>! [state 234] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 12 from [state 211] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,12)=>! [state 230] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,12)=>! [state 234] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,12)=>! [state 235] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 212] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,12)=>! [state 231] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,12)=>! [state 235] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,12)=>! [state 236] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 213] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,12)=>! [state 232] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,12)=>! [state 236] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,12)=>! [state 237] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 12 from [state 214] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,12)=>! [state 233] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,12)=>! [state 237] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,12)=>! [state 238] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 215] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,12)=>! [state 234] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,12)=>! [state 239] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 216] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,12)=>! [state 235] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,12)=>! [state 239] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,12)=>! [state 240] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 217] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,12)=>! [state 236] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,12)=>! [state 240] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,12)=>! [state 241] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 12 from [state 218] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,12)=>! [state 237] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,12)=>! [state 241] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,12)=>! [state 242] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 219] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,12)=>! [state 238] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,12)=>! [state 242] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 220] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,12)=>! [state 239] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,12)=>! [state 243] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 12 from [state 221] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,12)=>! [state 240] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,12)=>! [state 243] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,12)=>! [state 244] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 12 from [state 222] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,12)=>! [state 241] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,12)=>! [state 244] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,12)=>! [state 245] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 12 from [state 223] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,12)=>! [state 242] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,12)=>! [state 245] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 224] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: na) ((pid :: 0) (np :: 3))) (((int i ;) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,13)=>! [state 246] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 13 from [state 225] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,13)=>! [state 246] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,13)=>! [state 247] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 13 from [state 226] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1 1]=(*,13)=>! [state 247] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,13)=>! [state 248] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 227] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,13)=>! [state 248] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,13)=>! [state 249] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 228] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,13)=>! [state 249] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,13)=>! [state 250] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 13 from [state 229] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,13)=>! [state 246] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,13)=>! [state 251] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 13 from [state 230] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,13)=>! [state 247] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,13)=>! [state 251] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,13)=>! [state 252] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 231] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,13)=>! [state 248] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,13)=>! [state 252] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,13)=>! [state 253] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 232] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,13)=>! [state 249] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,13)=>! [state 253] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,13)=>! [state 254] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 13 from [state 233] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,13)=>! [state 250] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,13)=>! [state 254] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,13)=>! [state 255] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 234] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,13)=>! [state 251] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,13)=>! [state 256] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 235] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,13)=>! [state 252] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,13)=>! [state 256] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,13)=>! [state 257] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 236] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,13)=>! [state 253] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,13)=>! [state 257] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,13)=>! [state 258] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 13 from [state 237] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,13)=>! [state 254] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,13)=>! [state 258] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,13)=>! [state 259] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 238] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,13)=>! [state 255] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,13)=>! [state 259] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 239] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,13)=>! [state 256] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,13)=>! [state 260] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 13 from [state 240] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,13)=>! [state 257] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,13)=>! [state 260] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,13)=>! [state 261] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 13 from [state 241] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,13)=>! [state 258] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,13)=>! [state 261] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,13)=>! [state 262] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 242] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,13)=>! [state 259] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,13)=>! [state 262] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 243] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,13)=>! [state 260] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,13)=>! [state 263] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 13 from [state 244] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,13)=>! [state 261] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,13)=>! [state 263] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,13)=>! [state 264] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 13 from [state 245] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,13)=>! [state 262] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,13)=>! [state 264] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 246] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 0) (np :: 3))) (int i ;)) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2 1]=(*,14)=>! [state 265] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 14 from [state 247] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,14)=>! [state 265] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,14)=>! [state 266] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 14 from [state 248] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,14)=>! [state 266] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,14)=>! [state 267] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 14 from [state 249] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,14)=>! [state 267] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,14)=>! [state 268] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 14 from [state 250] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,14)=>! [state 268] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,14)=>! [state 269] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 251] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,14)=>! [state 265] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,14)=>! [state 270] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 14 from [state 252] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,14)=>! [state 266] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,14)=>! [state 270] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,14)=>! [state 271] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 14 from [state 253] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,14)=>! [state 267] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,14)=>! [state 271] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,14)=>! [state 272] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 14 from [state 254] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,14)=>! [state 268] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,14)=>! [state 272] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,14)=>! [state 273] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 255] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,14)=>! [state 269] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,14)=>! [state 273] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 256] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,14)=>! [state 270] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,14)=>! [state 274] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 14 from [state 257] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,14)=>! [state 271] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,14)=>! [state 274] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,14)=>! [state 275] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 14 from [state 258] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,14)=>! [state 272] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,14)=>! [state 275] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,14)=>! [state 276] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 259] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,14)=>! [state 273] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,14)=>! [state 276] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 260] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,14)=>! [state 274] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,14)=>! [state 277] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 14 from [state 261] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,14)=>! [state 275] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,14)=>! [state 277] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,14)=>! [state 278] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 262] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,14)=>! [state 276] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,14)=>! [state 278] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 263] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,14)=>! [state 277] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,14)=>! [state 279] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 14 from [state 264] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,14)=>! [state 278] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,14)=>! [state 279] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 265] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[2 2]=(*,15)=>! [state 280] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 15 from [state 266] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,15)=>! [state 280] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,15)=>! [state 281] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 15 from [state 267] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1 1]=(*,15)=>! [state 281] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,15)=>! [state 282] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 15 from [state 268] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,15)=>! [state 282] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,15)=>! [state 283] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 269] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,15)=>! [state 284] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,15)=>! [state 283] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 270] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,15)=>! [state 280] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,15)=>! [state 285] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 15 from [state 271] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,15)=>! [state 281] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,15)=>! [state 285] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,15)=>! [state 286] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 15 from [state 272] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,15)=>! [state 282] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,15)=>! [state 286] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,15)=>! [state 287] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 273] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,15)=>! [state 283] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,15)=>! [state 287] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 274] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1 1]=(*,15)=>! [state 285] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,15)=>! [state 288] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 15 from [state 275] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,15)=>! [state 286] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,15)=>! [state 288] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,15)=>! [state 289] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 276] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,15)=>! [state 287] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,15)=>! [state 289] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 277] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,15)=>! [state 288] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,15)=>! [state 290] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 278] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,15)=>! [state 289] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,15)=>! [state 290] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 15 from [state 279] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,15)=>! [state 291] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,15)=>! [state 290] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 280] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: na) ((x :: na) ((pid :: 0) (np :: 3)))) (i := 1 ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2 1]=(*,16)=>! [state 292] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List

**> Step 16 from [state 281] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[2 1]=(*,16)=>! [state 292] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,16)=>! [state 293] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 16 from [state 282] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1 1]=(*,16)=>! [state 293] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,16)=>! [state 294] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 283] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,16)=>! [state 295] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,16)=>! [state 294] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 284] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,16)=>! [state 295] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,16)=>! [state 296] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,16)=>! [state 297] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 16 from [state 285] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List*l
@[1]=(*,16)=>! [state 292] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,16)=>! [state 298] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 16 from [state 286] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,16)=>! [state 293] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,16)=>! [state 298] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,16)=>! [state 299] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 287] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,16)=>! [state 294] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,16)=>! [state 299] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 288] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1 1]=(*,16)=>! [state 298] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,16)=>! [state 300] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 289] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,16)=>! [state 299] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,16)=>! [state 300] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 290] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,16)=>! [state 301] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,16)=>! [state 300] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 16 from [state 291] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,16)=>! [state 301] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,16)=>! [state 302] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,16)=>! [state 303] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 292] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)))):List
@[2 2]=(*,17)=>! [state 304] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List

**> Step 17 from [state 293] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[2 1]=(*,17)=>! [state 304] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,17)=>! [state 305] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 17 from [state 294] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,17)=>! [state 306] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1 1]=(*,17)=>! [state 305] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 17 from [state 295] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,17)=>! [state 306] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,17)=>! [state 307] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,17)=>! [state 308] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 296] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,17)=>! [state 307] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,17)=>! [state 309] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 297] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,17)=>! [state 308] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,17)=>! [state 309] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 298] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List*l
@[1]=(*,17)=>! [state 304] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,17)=>! [state 310] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 17 from [state 299] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,17)=>! [state 305] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,17)=>! [state 310] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 17 from [state 300] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,17)=>! [state 311] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,17)=>! [state 310] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 17 from [state 301] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,17)=>! [state 311] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,17)=>! [state 312] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,17)=>! [state 313] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 302] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,17)=>! [state 312] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,17)=>! [state 314] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 17 from [state 303] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,17)=>! [state 313] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,17)=>! [state 314] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 304] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end))):List
@[2 2 1]=(*,18)=>! [state 315] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 18 from [state 305] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,18)=>! [state 316] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[2 1]=(*,18)=>! [state 315] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 18 from [state 306] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,18)=>! [state 316] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,18)=>! [state 317] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,18)=>! [state 318] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 307] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,18)=>! [state 317] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,18)=>! [state 319] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 308] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,18)=>! [state 318] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,18)=>! [state 319] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 309] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,18)=>! [state 320] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,18)=>! [state 319] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 310] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,18)=>! [state 321] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,18)=>! [state 315] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 18 from [state 311] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,18)=>! [state 321] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,18)=>! [state 322] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,18)=>! [state 323] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 312] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,18)=>! [state 322] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,18)=>! [state 324] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 313] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,18)=>! [state 323] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,18)=>! [state 324] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 18 from [state 314] ((((pid :: 2) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,18)=>! [state 324] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 315] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 1) ((x :: na) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[]=(*,19)=>! [state 325] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 19 from [state 316] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[1]=(*,19)=>! [state 326] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,19)=>! [state 327] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,19)=>! [state 328] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 317] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,19)=>! [state 327] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,19)=>! [state 329] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 318] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,19)=>! [state 328] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,19)=>! [state 329] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 319] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,19)=>! [state 330] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,19)=>! [state 329] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 320] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,19)=>! [state 330] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,19)=>! [state 331] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,19)=>! [state 332] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 19 from [state 321] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,19)=>! [state 325] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,19)=>! [state 333] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,19)=>! [state 334] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 322] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,19)=>! [state 333] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,19)=>! [state 335] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 323] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,19)=>! [state 334] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,19)=>! [state 335] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 19 from [state 324] (((((pid :: 2) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,19)=>! [state 335] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 325] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,20)=>! [state 336] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,20)=>! [state 337] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 326] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,20)=>! [state 338] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,20)=>! [state 339] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 327] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,20)=>! [state 338] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,20)=>! [state 340] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 328] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,20)=>! [state 339] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,20)=>! [state 340] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 329] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,20)=>! [state 341] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,20)=>! [state 340] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 330] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,20)=>! [state 341] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,20)=>! [state 342] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,20)=>! [state 343] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 20 from [state 331] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,20)=>! [state 342] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,20)=>! [state 344] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,20)=>! [state 345] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 20 from [state 332] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,20)=>! [state 343] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,20)=>! [state 345] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,20)=>! [state 346] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 20 from [state 333] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,20)=>! [state 336] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,20)=>! [state 347] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 334] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,20)=>! [state 337] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,20)=>! [state 347] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 20 from [state 335] (((((pid :: 2) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,20)=>! [state 347] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 336] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,21)=>! [state 348] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 337] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,21)=>! [state 348] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 338] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,21)=>! [state 349] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 339] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: na) ((pid :: 2) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,21)=>! [state 349] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 340] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,21)=>! [state 350] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,21)=>! [state 349] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 21 from [state 341] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,21)=>! [state 350] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,21)=>! [state 351] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,21)=>! [state 352] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 21 from [state 342] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,21)=>! [state 351] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,21)=>! [state 353] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,21)=>! [state 354] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 21 from [state 343] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,21)=>! [state 352] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,21)=>! [state 354] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,21)=>! [state 355] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 21 from [state 344] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,21)=>! [state 353] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,21)=>! [state 356] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,21)=>! [state 357] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 21 from [state 345] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,21)=>! [state 354] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,21)=>! [state 357] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,21)=>! [state 358] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 21 from [state 346] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,21)=>! [state 355] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,21)=>! [state 358] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,21)=>! [state 359] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 21 from [state 347] ((((x :: na) ((pid :: 2) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,21)=>! [state 348] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 22 from [state 348] (((((x :: na) ((pid :: 2) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
-- no more transitions from state 348.

**> Step 22 from [state 349] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: na) ((pid :: 2) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,22)=>! [state 360] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 22 from [state 350] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,22)=>! [state 360] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,22)=>! [state 361] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,22)=>! [state 362] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 22 from [state 351] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,22)=>! [state 361] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,22)=>! [state 363] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,22)=>! [state 364] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 22 from [state 352] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,22)=>! [state 362] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,22)=>! [state 364] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,22)=>! [state 365] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 22 from [state 353] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,22)=>! [state 363] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,22)=>! [state 366] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,22)=>! [state 367] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 22 from [state 354] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,22)=>! [state 364] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,22)=>! [state 367] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,22)=>! [state 368] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 22 from [state 355] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,22)=>! [state 365] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,22)=>! [state 368] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,22)=>! [state 369] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 22 from [state 356] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,22)=>! [state 366] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,22)=>! [state 370] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,22)=>! [state 371] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 22 from [state 357] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,22)=>! [state 367] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,22)=>! [state 371] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,22)=>! [state 372] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 22 from [state 358] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,22)=>! [state 368] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,22)=>! [state 372] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,22)=>! [state 373] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 22 from [state 359] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,22)=>! [state 369] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,22)=>! [state 373] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 23 from [state 360] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,23)=>! [state 374] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,23)=>! [state 375] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 23 from [state 361] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,23)=>! [state 374] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,23)=>! [state 376] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,23)=>! [state 377] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 23 from [state 362] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,23)=>! [state 375] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,23)=>! [state 377] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,23)=>! [state 378] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 23 from [state 363] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,23)=>! [state 376] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,23)=>! [state 379] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,23)=>! [state 380] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 23 from [state 364] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,23)=>! [state 377] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,23)=>! [state 380] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,23)=>! [state 381] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 23 from [state 365] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,23)=>! [state 378] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,23)=>! [state 381] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,23)=>! [state 382] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 23 from [state 366] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,23)=>! [state 379] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,23)=>! [state 383] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,23)=>! [state 384] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 23 from [state 367] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,23)=>! [state 380] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,23)=>! [state 384] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,23)=>! [state 385] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 23 from [state 368] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,23)=>! [state 381] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,23)=>! [state 385] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,23)=>! [state 386] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 23 from [state 369] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,23)=>! [state 382] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,23)=>! [state 386] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 23 from [state 370] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,23)=>! [state 383] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,23)=>! [state 387] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 23 from [state 371] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,23)=>! [state 384] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,23)=>! [state 387] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,23)=>! [state 388] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 23 from [state 372] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,23)=>! [state 385] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,23)=>! [state 388] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,23)=>! [state 389] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 23 from [state 373] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,23)=>! [state 386] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,23)=>! [state 389] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 374] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,24)=>! [state 390] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,24)=>! [state 391] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 24 from [state 375] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,24)=>! [state 391] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,24)=>! [state 392] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 24 from [state 376] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,24)=>! [state 390] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,24)=>! [state 393] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,24)=>! [state 394] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 24 from [state 377] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,24)=>! [state 391] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,24)=>! [state 394] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,24)=>! [state 395] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 24 from [state 378] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,24)=>! [state 392] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,24)=>! [state 395] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,24)=>! [state 396] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 379] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,24)=>! [state 393] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,24)=>! [state 397] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,24)=>! [state 398] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 24 from [state 380] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,24)=>! [state 394] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,24)=>! [state 398] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,24)=>! [state 399] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 24 from [state 381] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,24)=>! [state 395] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,24)=>! [state 399] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,24)=>! [state 400] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 382] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,24)=>! [state 396] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,24)=>! [state 400] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 383] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,24)=>! [state 397] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,24)=>! [state 401] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 24 from [state 384] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,24)=>! [state 398] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,24)=>! [state 401] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,24)=>! [state 402] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 24 from [state 385] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,24)=>! [state 399] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,24)=>! [state 402] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,24)=>! [state 403] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 386] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,24)=>! [state 400] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,24)=>! [state 403] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 387] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,24)=>! [state 401] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,24)=>! [state 404] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 24 from [state 388] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,24)=>! [state 402] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,24)=>! [state 404] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,24)=>! [state 405] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 24 from [state 389] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,24)=>! [state 403] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,24)=>! [state 405] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 390] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,25)=>! [state 406] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,25)=>! [state 407] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 25 from [state 391] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,25)=>! [state 407] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,25)=>! [state 408] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 25 from [state 392] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,25)=>! [state 408] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,25)=>! [state 409] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 393] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,25)=>! [state 406] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,25)=>! [state 410] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,25)=>! [state 411] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 25 from [state 394] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,25)=>! [state 407] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,25)=>! [state 411] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,25)=>! [state 412] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 25 from [state 395] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,25)=>! [state 408] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,25)=>! [state 412] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,25)=>! [state 413] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 396] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,25)=>! [state 409] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,25)=>! [state 413] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 397] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,25)=>! [state 410] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,25)=>! [state 414] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 25 from [state 398] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,25)=>! [state 411] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,25)=>! [state 414] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,25)=>! [state 415] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 25 from [state 399] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,25)=>! [state 412] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,25)=>! [state 415] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,25)=>! [state 416] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 400] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,25)=>! [state 413] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,25)=>! [state 416] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 401] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,25)=>! [state 414] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,25)=>! [state 417] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 25 from [state 402] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,25)=>! [state 415] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,25)=>! [state 417] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,25)=>! [state 418] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 403] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,25)=>! [state 416] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,25)=>! [state 418] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 404] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,25)=>! [state 417] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,25)=>! [state 419] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 25 from [state 405] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,25)=>! [state 418] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,25)=>! [state 419] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 406] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,26)=>! [state 420] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,26)=>! [state 421] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 26 from [state 407] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,26)=>! [state 421] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,26)=>! [state 422] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 26 from [state 408] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,26)=>! [state 422] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,26)=>! [state 423] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 409] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,26)=>! [state 423] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 410] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,26)=>! [state 420] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,26)=>! [state 424] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 26 from [state 411] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,26)=>! [state 421] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,26)=>! [state 424] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,26)=>! [state 425] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 26 from [state 412] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,26)=>! [state 422] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,26)=>! [state 425] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,26)=>! [state 426] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 413] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,26)=>! [state 423] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,26)=>! [state 426] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 414] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,26)=>! [state 424] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,26)=>! [state 427] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 26 from [state 415] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,26)=>! [state 425] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,26)=>! [state 427] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,26)=>! [state 428] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 416] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,26)=>! [state 426] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,26)=>! [state 428] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 417] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,26)=>! [state 427] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,26)=>! [state 429] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 418] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,26)=>! [state 428] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,26)=>! [state 429] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 26 from [state 419] ((((pid :: 1) (np :: 3)) (((if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) }) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,26)=>! [state 429] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 420] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[]=(*,27)=>! [state 430] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,27)=>! [state 431] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 27 from [state 421] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,27)=>! [state 431] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,27)=>! [state 432] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 27 from [state 422] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1]=(*,27)=>! [state 432] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,27)=>! [state 433] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 423] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((x :: 2) ((i :: 1) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,27)=>! [state 433] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 424] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,27)=>! [state 431] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,27)=>! [state 434] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 27 from [state 425] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,27)=>! [state 432] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,27)=>! [state 434] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,27)=>! [state 435] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 426] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,27)=>! [state 433] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,27)=>! [state 435] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 427] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1 1]=(*,27)=>! [state 434] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,27)=>! [state 436] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 428] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,27)=>! [state 435] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,27)=>! [state 436] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 27 from [state 429] (((((pid :: 1) (np :: 3)) (if (not (pid = 0)) { ((int x ;) ((send ( pid , 0 ) ;) (recv ( x , 0 ) ;))) })) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,27)=>! [state 436] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 28 from [state 430] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[1]=(*,28)=>! [state 437] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,28)=>! [state 438] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,28)=>! [state 439] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 28 from [state 431] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[]=(*,28)=>! [state 437] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2 1]=(*,28)=>! [state 440] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List

**> Step 28 from [state 432] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[2 1 1]=(*,28)=>! [state 440] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,28)=>! [state 441] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 28 from [state 433] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1]=(*,28)=>! [state 441] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 28 from [state 434] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[1]=(*,28)=>! [state 440] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List
@[2 2]=(*,28)=>! [state 442] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 28 from [state 435] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,28)=>! [state 441] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,28)=>! [state 442] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 28 from [state 436] (((((pid :: 1) (np :: 3)) (int x ;)) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1 1]=(*,28)=>! [state 442] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 29 from [state 437] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[1 1]=(*,29)=>! [state 443] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,29)=>! [state 444] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,29)=>! [state 445] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 29 from [state 438] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,29)=>! [state 444] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,29)=>! [state 446] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 29 from [state 439] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,29)=>! [state 445] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,29)=>! [state 446] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 29 from [state 440] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | (((x :: 2) ((pid :: 2) (np :: 3))) end))):List*l
@[]=(*,29)=>! [state 443] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,29)=>! [state 447] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 29 from [state 441] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[2 1 1]=(*,29)=>! [state 447] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 29 from [state 442] ((((x :: na) ((pid :: 1) (np :: 3))) (((send ( pid , 0 ) ;) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[1]=(*,29)=>! [state 447] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List

**> Step 30 from [state 443] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[1]=(*,30)=>! [state 448] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,30)=>! [state 449] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,30)=>! [state 450] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 30 from [state 444] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1 1]=(*,30)=>! [state 449] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,30)=>! [state 451] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 30 from [state 445] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1 1]=(*,30)=>! [state 450] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,30)=>! [state 451] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 30 from [state 446] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,30)=>! [state 452] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,30)=>! [state 451] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 30 from [state 447] (((((x :: na) ((pid :: 1) (np :: 3))) (send ( pid , 0 ) ;)) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((((i :: 2) ((x :: 2) ((pid :: 0) (np :: 3)))) (recv ( x , any ) ;)) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)) | ((x :: 2) ((pid :: 2) (np :: 3))))):List*l
@[]=(*,30)=>! [state 448] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List

**> Step 31 from [state 448] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 1]=(*,31)=>! [state 453] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,31)=>! [state 454] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 31 from [state 449] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List*l
@[1]=(*,31)=>! [state 453] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,31)=>! [state 455] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 31 from [state 450] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[1]=(*,31)=>! [state 454] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,31)=>! [state 455] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 31 from [state 451] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,31)=>! [state 456] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,31)=>! [state 455] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 31 from [state 452] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,31)=>! [state 456] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,31)=>! [state 457] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,31)=>! [state 458] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 32 from [state 453] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((send ( x , (np - i) ) ;) ((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) end)))):List
@[2 2]=(*,32)=>! [state 459] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 32 from [state 454] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: na) ((pid :: 1) (np :: 3))) (((recv ( x , 0 ) ;) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List*l
@[2 1]=(*,32)=>! [state 459] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 32 from [state 455] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,32)=>! [state 460] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,32)=>! [state 459] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List

**> Step 32 from [state 456] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,32)=>! [state 460] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,32)=>! [state 461] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,32)=>! [state 462] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 32 from [state 457] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,32)=>! [state 461] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,32)=>! [state 463] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,32)=>! [state 464] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 32 from [state 458] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,32)=>! [state 462] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,32)=>! [state 464] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,32)=>! [state 465] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 33 from [state 459] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: na) ((pid :: 1) (np :: 3))) (recv ( x , 0 ) ;)) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (send ( x , (np - i) ) ;)) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)))):List
@[]=(*,33)=>! [state 466] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List

**> Step 33 from [state 460] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,33)=>! [state 466] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,33)=>! [state 467] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,33)=>! [state 468] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 33 from [state 461] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,33)=>! [state 467] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,33)=>! [state 469] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,33)=>! [state 470] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 33 from [state 462] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,33)=>! [state 468] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,33)=>! [state 470] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,33)=>! [state 471] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 33 from [state 463] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,33)=>! [state 469] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,33)=>! [state 472] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,33)=>! [state 473] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 33 from [state 464] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,33)=>! [state 470] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,33)=>! [state 473] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,33)=>! [state 474] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 33 from [state 465] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,33)=>! [state 471] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,33)=>! [state 474] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,33)=>! [state 475] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 34 from [state 466] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,34)=>! [state 476] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,34)=>! [state 477] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 34 from [state 467] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,34)=>! [state 476] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,34)=>! [state 478] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,34)=>! [state 479] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 34 from [state 468] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,34)=>! [state 477] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,34)=>! [state 479] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,34)=>! [state 480] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 34 from [state 469] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,34)=>! [state 478] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,34)=>! [state 481] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,34)=>! [state 482] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 34 from [state 470] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,34)=>! [state 479] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,34)=>! [state 482] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,34)=>! [state 483] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 34 from [state 471] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,34)=>! [state 480] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,34)=>! [state 483] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,34)=>! [state 484] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 34 from [state 472] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,34)=>! [state 481] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,34)=>! [state 485] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,34)=>! [state 486] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 34 from [state 473] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,34)=>! [state 482] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,34)=>! [state 486] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,34)=>! [state 487] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 34 from [state 474] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,34)=>! [state 483] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,34)=>! [state 487] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,34)=>! [state 488] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 34 from [state 475] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,34)=>! [state 484] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,34)=>! [state 488] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 35 from [state 476] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,35)=>! [state 489] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,35)=>! [state 490] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 35 from [state 477] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,35)=>! [state 490] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,35)=>! [state 491] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 35 from [state 478] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,35)=>! [state 489] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,35)=>! [state 492] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,35)=>! [state 493] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 35 from [state 479] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,35)=>! [state 490] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,35)=>! [state 493] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,35)=>! [state 494] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 35 from [state 480] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,35)=>! [state 491] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,35)=>! [state 494] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,35)=>! [state 495] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 35 from [state 481] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,35)=>! [state 492] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,35)=>! [state 496] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,35)=>! [state 497] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 35 from [state 482] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,35)=>! [state 493] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,35)=>! [state 497] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,35)=>! [state 498] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 35 from [state 483] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,35)=>! [state 494] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,35)=>! [state 498] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,35)=>! [state 499] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 35 from [state 484] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,35)=>! [state 495] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,35)=>! [state 499] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 35 from [state 485] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,35)=>! [state 496] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,35)=>! [state 500] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,35)=>! [state 501] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 35 from [state 486] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,35)=>! [state 497] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,35)=>! [state 501] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,35)=>! [state 502] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 35 from [state 487] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,35)=>! [state 498] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,35)=>! [state 502] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,35)=>! [state 503] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 35 from [state 488] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,35)=>! [state 499] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,35)=>! [state 503] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 489] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,36)=>! [state 504] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,36)=>! [state 505] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 36 from [state 490] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,36)=>! [state 505] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,36)=>! [state 506] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 36 from [state 491] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,36)=>! [state 506] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,36)=>! [state 507] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 492] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,36)=>! [state 504] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,36)=>! [state 508] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,36)=>! [state 509] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 36 from [state 493] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,36)=>! [state 505] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,36)=>! [state 509] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,36)=>! [state 510] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 36 from [state 494] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,36)=>! [state 506] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,36)=>! [state 510] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,36)=>! [state 511] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 495] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,36)=>! [state 507] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,36)=>! [state 511] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 496] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,36)=>! [state 508] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,36)=>! [state 512] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,36)=>! [state 513] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 36 from [state 497] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,36)=>! [state 509] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,36)=>! [state 513] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,36)=>! [state 514] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 36 from [state 498] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,36)=>! [state 510] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,36)=>! [state 514] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,36)=>! [state 515] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 499] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,36)=>! [state 511] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,36)=>! [state 515] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 500] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,36)=>! [state 512] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,36)=>! [state 516] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 36 from [state 501] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,36)=>! [state 513] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,36)=>! [state 516] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,36)=>! [state 517] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 36 from [state 502] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,36)=>! [state 514] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,36)=>! [state 517] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,36)=>! [state 518] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 36 from [state 503] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,36)=>! [state 515] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,36)=>! [state 518] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 504] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1 1]=(*,37)=>! [state 519] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,37)=>! [state 520] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 37 from [state 505] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,37)=>! [state 520] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,37)=>! [state 521] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 37 from [state 506] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,37)=>! [state 521] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,37)=>! [state 522] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 507] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (((i := (i + 1) ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,37)=>! [state 522] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 508] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,37)=>! [state 519] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,37)=>! [state 523] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,37)=>! [state 524] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 37 from [state 509] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,37)=>! [state 520] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,37)=>! [state 524] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,37)=>! [state 525] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 37 from [state 510] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,37)=>! [state 521] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,37)=>! [state 525] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,37)=>! [state 526] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 511] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,37)=>! [state 522] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,37)=>! [state 526] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 512] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1 1]=(*,37)=>! [state 523] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 2]=(*,37)=>! [state 527] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 37 from [state 513] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,37)=>! [state 524] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,37)=>! [state 527] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,37)=>! [state 528] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 37 from [state 514] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,37)=>! [state 525] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,37)=>! [state 528] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,37)=>! [state 529] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 515] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,37)=>! [state 526] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,37)=>! [state 529] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 516] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,37)=>! [state 527] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,37)=>! [state 530] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 37 from [state 517] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,37)=>! [state 528] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,37)=>! [state 530] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,37)=>! [state 531] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 37 from [state 518] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,37)=>! [state 529] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,37)=>! [state 531] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 519] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List
@[2 1]=(*,38)=>! [state 532] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))):List
@[2 2]=(*,38)=>! [state 533] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 38 from [state 520] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1 1]=(*,38)=>! [state 533] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,38)=>! [state 534] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 38 from [state 521] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,38)=>! [state 534] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,38)=>! [state 535] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 522] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((x :: 1) ((i :: 2) ((pid :: 0) (np :: 3)))) (i := (i + 1) ;)) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,38)=>! [state 535] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 523] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)))):List*l
@[1]=(*,38)=>! [state 532] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))):List
@[2 2]=(*,38)=>! [state 536] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List

**> Step 38 from [state 524] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,38)=>! [state 533] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,38)=>! [state 536] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,38)=>! [state 537] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 38 from [state 525] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,38)=>! [state 534] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,38)=>! [state 537] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,38)=>! [state 538] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 526] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,38)=>! [state 535] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,38)=>! [state 538] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 527] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1 1]=(*,38)=>! [state 536] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List
@[2 2 1]=(*,38)=>! [state 539] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 38 from [state 528] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,38)=>! [state 537] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,38)=>! [state 539] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,38)=>! [state 540] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 529] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,38)=>! [state 538] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,38)=>! [state 540] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 530] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,38)=>! [state 539] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,38)=>! [state 541] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 38 from [state 531] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,38)=>! [state 540] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,38)=>! [state 541] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 532] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end))):List
@[2]=(*,39)=>! [state 542] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)):List

**> Step 39 from [state 533] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[2 1]=(*,39)=>! [state 542] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)):List
@[2 2 1]=(*,39)=>! [state 543] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 39 from [state 534] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1 1]=(*,39)=>! [state 543] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,39)=>! [state 544] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 535] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) ((while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }) end)) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,39)=>! [state 544] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 536] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end))):List*l
@[1]=(*,39)=>! [state 542] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)):List
@[2 2 1]=(*,39)=>! [state 545] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List

**> Step 39 from [state 537] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,39)=>! [state 543] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,39)=>! [state 545] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,39)=>! [state 546] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 538] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,39)=>! [state 544] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,39)=>! [state 546] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 539] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1 1]=(*,39)=>! [state 545] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List
@[2 2]=(*,39)=>! [state 547] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 540] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,39)=>! [state 546] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,39)=>! [state 547] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 39 from [state 541] ((((x :: 2) ((pid :: 2) (np :: 3))) ((if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) }) end)) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,39)=>! [state 547] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 40 from [state 542] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((((x :: 1) ((pid :: 1) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end)):List
@[2 1]=(*,40)=>! [state 548] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) end)):List

**> Step 40 from [state 543] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[2 1]=(*,40)=>! [state 548] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) end)):List
@[2 2]=(*,40)=>! [state 549] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 40 from [state 544] (((x :: 2) ((pid :: 2) (np :: 3))) | (((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) })) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1 1]=(*,40)=>! [state 549] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 40 from [state 545] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | (((x :: 1) ((pid :: 1) (np :: 3))) end))):List*l
@[1]=(*,40)=>! [state 548] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) end)):List
@[2 2]=(*,40)=>! [state 550] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 40 from [state 546] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,40)=>! [state 549] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,40)=>! [state 550] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 40 from [state 547] (((((x :: 2) ((pid :: 2) (np :: 3))) (if (pid = 0) { (((int x ;) (int i ;)) ((i := 1 ;) (while (np > i) { ((recv ( x , any ) ;) ((send ( x , (np - i) ) ;) (i := (i + 1) ;))) }))) })) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1 1]=(*,40)=>! [state 550] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 41 from [state 548] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | (((x :: 1) ((pid :: 1) (np :: 3))) end)):List
@[2]=(*,41)=>! [state 551] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((x :: 1) ((pid :: 1) (np :: 3)))):List

**> Step 41 from [state 549] (((x :: 2) ((pid :: 2) (np :: 3))) | ((((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) end) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[2 1]=(*,41)=>! [state 551] (((x :: 2) ((pid :: 2) (np :: 3))) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

**> Step 41 from [state 550] ((((x :: 2) ((pid :: 2) (np :: 3))) end) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List*l
@[1]=(*,41)=>! [state 551] (((x :: 2) ((pid :: 2) (np :: 3))) | (((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3)))) | ((x :: 1) ((pid :: 1) (np :: 3))))):List

** Found [state 551] ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((x :: 1) ((pid :: 1) (np :: 3)))):List
   { L:List |-> ((((x :: 2) ((pid :: 2) (np :: 3))) | ((i :: 3) ((x :: 1) ((pid :: 0) (np :: 3))))) | ((x :: 1) ((pid :: 1) (np :: 3)))) }
-- no more transitions from state 551.

** No more possible transitions.
(true):Bool
(0.000 sec for parse, 11794 rewrites(11.770 sec), 65812 matches, 801 memo hits)
