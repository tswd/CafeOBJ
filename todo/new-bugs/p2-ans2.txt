Dear all, 

I little bit changed my mind, and did an experiment with the
inheritance of principal sort.

Please try the patch enclosed in this mail, and please examine the 
behaviour of the system. If there are no problems, I will include 
this in the next release.

If you applied this patch, principal sort is inherited in the 
following cases:
(1) if a parameterized module M has a principal sort PS,
    its instatiation has principal sort PS', where PS' is the
    same as PS if it is not mapped.
(2) if a module M has principal sort PS, its renamed module has
    principal sort PS' (may be mapped to another sort).

I generally dislike making exceptional cases, but aboves seems
to be natural. 
Here are some examples using your I-POSET and its friends.
First, this is the result of evaluating STRG-MAPPING declaration,
note there is no explict map from Elt to 2Tuple.
-------------------------------------------------------------------
STRG-MAPPING> sh .
module! STRG-MAPPING (Z :: POSET)
{
  imports {
    protecting (STRG(X <= I-POSET(Y' <= Z)) * {sort Strg -> 2Strg} + 
                  STRG(X <= Z))
  }
  signature {
    op s : 2Tuple -> 2Tuple
    op s : 2Strg -> 2Strg
    op [ _ ] : Elt -> 2Tuple
    op [ _ ] : Strg -> 2Strg
  }
  axioms {
    var E : Elt
    var N : Nat
    var S : Strg
    var S1 : 2Strg
    var S2 : 2Strg
    eq s(<< E ; N >>) = << E ; (s N) >> .
    eq s(S1 S2) = s(S1) s(S2) .
    eq [ E ] = << E ; 1 >> .
    eq [ (E S) ] = << E ; 1 >> s([ S ]) .
  }
}

STRG-MAPPING(Z)> sh all sorts
* visible sorts :
  Elt, Elt < Strg
  2Strg, 2Tuple < 2Strg
  2Tuple, 2Tuple < 2Strg
  Strg, Elt < Strg

----------------------------------------------------------------------
I suppose this is the result you wanted.

And here is a more complex case combining above cases (1) and (2);
----------------------------------------------------------------------
STRG-MAPPING(Z)> select STRG(I-POSET(NAT) * { sort 2Tuple -> two-tuple })
,,,,,,,*,,,,,,,,,,,,,,,,*,,,,,,,*,,,,,,,
STRG(X <= I-POSET(Y' <= NAT) * { ... })> sh .
*module STRG(X <= I-POSET(Y' <= NAT) * {sort 2Tuple -> two-tuple})
{
  imports {
    protecting (I-POSET(Y' <= NAT) * {sort 2Tuple -> two-tuple})
  }
  signature {
    [ Strg, two-tuple < Strg ]
    op nil : -> two-tuple { prec: 0 }
    op _ _ : Strg Strg -> Strg { assoc idr: nil prec: 41 r-assoc }
  }
  axioms {
    eq [ident12] : nil X-ID:Strg = X-ID:Strg .
    eq [ident13] : Y-ID:Strg nil = Y-ID:Strg .
  }
}

STRG(X <= I-POSET(Y' <= NAT) * { ... })> sh all sorts
* visible sorts :
  two-tuple, two-tuple < Strg
  Strg, two-tuple < Strg
----------------------------------------------------------------------

OK, so, here is a patch, put the following code fragment to a file
("psort-inheritance.lisp") and input the command sequenses below:

(1) invoke cafeobj interpreter
(2) ev (compile-file "./psort-inheritance.lisp")
(3) ev (load "./psort-inheritance.o")
(4) save-system /tmp/cafeobj.exe
(5) replace old one with the /tmp/cafeobj.exe

Thanks!
-- sawada@sra.co.jp

---BEGIN-<psort-inheritance.lisp>------------------------------------
(in-package :chaos)

(defun eval-psort-declaration (decl module)
  (let ((sort-ref (%psort-decl-sort decl))
	(sort nil))
    ;; we have a case the reference is just a sort-object,
    ;; occuring only when we inherit p-sort in instantiation/renaming.
    ;;
    (if (sort-p sort-ref)
	(setq sort sort-ref)
	(setq sort (resolve-sort-ref module (%psort-decl-sort decl))))
    (unless sort
      (with-output-chaos-error ('no-such-sort)
	(princ "declaring principal sort, no such sort ")
	(print-sort-ref (%psort-decl-sort decl))
	))
    (setf (module-principal-sort module) sort)))

(defun apply-modmorph-internal (map mod newmod)
  (flet ((inherit-principal-sort (s s-mapped)
	   (when (and (null (module-principal-sort newmod))
		      (sort= s (module-principal-sort mod)))
	     ;; this will be evaluated later on compilation stage.
	     (setf (module-psort-declaration newmod)
		   (%psort-decl* s-mapped))
	     ;; the following seems redundant, but there are
	     ;; some cases the real module compilation is not done
	     ;; while evaluating modexprs, and we also want
	     ;; psort-declaration for consistency. 
	     (setf (module-principal-sort newmod) s-mapped)
	     ))
	 )
    ;; 
    (when *chaos-verbose* (princ "["))	; now we begin.
    (when *on-modexp-debug*
      (with-output-simple-msg ()
	(format t "[apply-modmorph] : begin ----------------------------")
	(format t "~&- map = ")
	(print-mapping map)
	(format t "~& - module = ")
	(print-modexp mod)
	(format t "~& - new module = ")
	(print-modexp newmod)))
    ;;
    (let ((amod (assq mod (modmorph-module map))))
      ;; newmod is depends on mod, so we set dependency relation.
      ;; mode :modmorph meas relation is not simple inclusions.
      (add-imported-module newmod :modmorph mod)

      ;; update module map mod->newmod
      (if amod
	  (when (null (cdr amod)) (rplacd amod newmod))
	  (push (cons mod newmod) (modmorph-module map)))

      ;; this makes temporaly generated module for remaing trash away.
      (when (modmorph-is-rename map)
	(reduce-rename-dummy map mod newmod)
	(print-in-progress ","))

      ;; now finished simple preparation, we begin the real work.
      ;;
      (let ((sortmap (modmorph-sort map))
	    (opmap (modmorph-op map))
	    (modmap (modmorph-module map))
	    (no-error-sort nil))
	
	;; MAP SUBMODULES -----------------------------------------------------
	;; the first big job is to incorporate submodules.
	;; * need to consider sub-module-instantiation
	;;   also apply mapping; want to memoize appropriately;
	;;   in some sense must always apply the mapping to sub-objects
	;; * idea: if sub-module contains parameter as its sub-module then
	;;   map it (should always be directly there); the other source
	;;   of information is the name of the module; if is instantiated
	;;   then can see if the name contains a use of the parameter

	(modmorph-import-submodules mod newmod map mod)
	(print-in-progress ",")
      
	;; at this point have already got a lot of sorts and operators (etc.)
	;;   from the incorporated modules

	;; after have created sub-modules need to "fix" renaming
	(when (modmorph-is-rename map) (fix-sort-renaming map newmod))
	(print-in-progress ",")
      
	;; now, maps may have been updated, so re-new the local cache.
	(setq sortmap (modmorph-sort map))
	(setq opmap (modmorph-op map))
	(setq modmap (modmorph-module map))

	;; MAP SORTS, SORT RELATIONS ----------------------------------------
	;;
	;; mapping sorts
	(dolist (x (reverse (module-all-sorts mod)))
	  (unless (sort-is-for-regularity? x mod)
	    ;; reverse because want to preserve the original order
	    (let ((sortmapval (assoc x sortmap)))
	      (if sortmapval
		  (let ((ims (cdr sortmapval)))
		    (inherit-principal-sort x ims)
		    (unless (memq ims (module-all-sorts newmod))
		      (add-sort-to-module ims newmod))) ; check sort order
		  ;; 
		  (if (eq mod (sort-module x))
		      (let ((sortim (modmorph-recreate-sort newmod
							    modmap
							    sortmap
							    x))) 
			(inherit-principal-sort x sortim)
			(unless (eq x sortim)
			  (push (cons x sortim) sortmap)
			  (setf (modmorph-sort map) sortmap)
			  (setq x sortim))
			(add-sort-to-module sortim newmod))
		      ;;
		      (let ((modv (assq (sort-module x) modmap)))
			(if modv
			    (let ((sortim (modmorph-recreate-sort newmod
								  modmap
								  sortmap
								  x)))
			      (inherit-principal-sort x sortim)
			      (unless (eq x sortim)
				(push (cons x sortim) sortmap)
				(setf (modmorph-sort map) sortmap))
			      )
			    (inherit-principal-sort x x))
			)))
	      )))
	;;
	(if *chaos-verbose*
	    (print-in-progress "s")	; done mapping sorts
	    (print-in-progress ","))
      
	;; sort-relation
	(let ((self-rel (modmorph-recreate-sort-relations newmod
							  mod
							  modmap
							  sortmap
							  (module-sort-relations
							   newmod))))
	  (setf (module-sort-relations newmod)
		(modmorph-merge-sort-relations
		 (modmorph-recreate-sort-relations newmod mod modmap sortmap
						   (module-sort-relations mod)) 
		 self-rel)))
	(let ((so (module-sort-order newmod)))
	  (dolist (sl (module-sort-relations newmod))
	    (add-relation-to-order (copy-sort-relation sl) so))
	  ;; we need error sorts
	  (generate-err-sorts so)
	  (setq no-error-sort t)
	  )
	;;
	(if *chaos-verbose*
	    (print-in-progress "<")	; done mapping sort relations
	    (print-in-progress ","))

	;; MAP OPERATORS ----------------------------------------------------
	;;
	(when (modmorph-is-rename map)
	  ;; operators
	  ;; after have created sub-modules need to "fix" renaming for
	  ;; operators too.
	  (fix-method-renaming map newmod))
	;;
	(dolist (opinfo (reverse (module-all-operators mod)))
	  ;; want to preserve the original order of operators
	  (dolist (method (opinfo-methods opinfo))
	    (when (or (method-is-user-defined-error-method method)
		      (and (not (method-is-error-method method))
			   (not (memq method
				      (module-methods-for-regularity mod)))))
	      (unless (assq method opmap)
		(modmorph-recreate-method mod newmod sortmap method))
	      )))
	;;
	(if *chaos-verbose*
	    (print-in-progress "o")	; done mapping operators
	    (print-in-progress ","))

	;; At this point all operators should exist; term recreation is possible.
	;; all of the error sorts & error method should be
	;; generated here.
	(modmorph-prepare-for-parsing newmod map no-error-sort)

	;;  MAP AXIOMS ------------------------------------------------------
	;;
	;; equations
	(setf (module-equations newmod)
	      (append
	       (mapcar #'(lambda (r)
			   (when *on-modexp-debug*
			     (with-in-module (mod)
			       (format t "~&* recreating the axiom :")
			       (print-rule r)))
			   (modmorph-recreate-axiom newmod sortmap opmap modmap r))
		       (module-equations mod))
	       (module-equations newmod)))
	;; transitions
	(setf (module-rules newmod)
	      (append
	       (mapcar #'(lambda (r)
			   (modmorph-recreate-axiom newmod sortmap opmap modmap r))
		       (module-rules mod))
	       (module-rules newmod)))
	(if *chaos-verbose*
	    (print-in-progress "a")	; done mapping axioms 
	    (print-in-progress ","))
	
	;; THEOREMS ---------------------------------------------------------
	#|| NO YET
	(setf (module-theorems newmod)
        	(append
	          (mapcar #'(lambda (r)
	                       (modmorph-recreate-axiom newmod sortmap
	                                                opmap modmap r))
                          (module-theorems mod))
       	          (module-theorems newmod)))
	||#
      
	;; OK we've done, nothing to be done here already.
	;;
	(when *on-modexp-debug*
	  (format t "~&* apply-modmorph: DONE. generated new module ")
	  (print-mod-name newmod))
	(if *chaos-verbose*
	    (print-in-progress "]")	; done whole work.
	    (print-in-progress ","))
	newmod				;the final result
	))))

---END-<psort-inheritance.lisp>-------------------------------------