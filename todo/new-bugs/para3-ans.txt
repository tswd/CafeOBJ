Dear Razvan,

I tried to fix the problem of handling error sorts.
This was rather global changes of the system, so I made a
collection of source files modified since I put version 1.4.2a2.
I will send it in the next e-mail. 

> mod* NAT-TRANSF (F :: FUNCTOR, G :: FUNCTOR) {
>   op _nt : Obj.C -> Arr.D
>
>  var A : Obj.C
>
>  eq dom(A nt) = A fun.F .
>  eq cod(A nt) = A fun.G .
> }
>
> -- defining module* NAT-TRANSF
> [Warning]: redefining module NAT-TRANSF _*_*_*_*_*_*._*_*_*_*_*_*.
> [Error]: module name C is ambiguous in the current context.
> -- failed to evaluate the form:

This is because C is really ambiguous in module NAT-TRANSF.

        CATEGORY --C-->                   <--C-- CATEGORY
                        FUNCTOR   FUNCTOR 
        CATEGORY --D-->    |         |    <--D-- CATEGORY
                           F         G
                           |         |
                           V         V
                            NAT-TRANSF

You need more qualifiers to disambiguate it.
You can specify the arity of _nt as
  op _nt : Obj.C.F -> Arr.D.G
I guess this is your intension, because _nt is for representing
natural transformation from functor F to G assigning every 
C-object to D-arrow. 
And also, for variable declaration of A would be
  var A : Obj.C.F

And, please note, there are no way to denote a specific operator by 
modifying its name by module expressions, 
that is, you cannot write like `fun.F'.

BUT, it seems that you want to represent the following constructs:
 (1) two category C and D
 (2) two functors F and G from C to D
 (3) natural transformation from F to G
if this is true, we need, for example Obj.C.F and Obj.C.G to be
the same object. To achieve this you may need to declare
NAT-TRANSF as like

  mod* NAT-TRANSF' (C :: CATEGORY, D :: CATEGORY,
    		    F :: FUNCTOR(C,D), G :: FUNCTOR(C,D))
  {
    op _nt : Obj.C -> Arr.D

    var A : Obj.C

    eq dom(A nt) = A fun .
    eq cod(A nt) = A fun .
  }

That is, you must be explicit to say that the functor F and
G are two functors of category C and D. 
And this is the output of `desc' command from the (patched) system:
(please ignore duplicated SortId constants like Obj, this is not
 harmful, and I will fix this soon.)

CafeOBJ> desc NAT-TRANSF'
======================================================================
module NAT-TRANSF'(C::CATEGORY, D::CATEGORY, F::FUNCTOR(C <= C, D <= 
D), G::FUNCTOR(C <= C, D <= D))
                          kind: theory
                       type: user defined
              created: 1998 Jun 10 Wed 8:53:20 GMT
----------------------------------------------------------------------

                        << parameters >>
  argument C : protecting CATEGORY
  argument D : protecting CATEGORY
  argument F : protecting FUNCTOR(C <= C, D <= D)
  argument G : protecting FUNCTOR(C <= C, D <= D)
  

                << sorts and subsort relations >>
  * visible sorts :
    Obj.C
    Arr.C
    Obj.D
    Arr.D

                         << variables >>
    A:Obj.C

                   << operators and axioms >>

.............................(_ ; _).............................
  * rank: ?Arr.C ?Arr.C -> ?Arr.C
    - attributes:  { assoc r-assoc }
    - axioms:
      ceq 1(A) ; f:Arr.C = f:Arr.C if dom f:Arr.C == A
      ceq f:Arr.C ; 1(A) = f:Arr.C if cod f:Arr.C == A
..............................(Obj)..............................
  * rank: -> SortId
    - attributes:  { constr prec: 0 }
  * rank: -> SortId
    - attributes:  { constr prec: 0 }
..............................(Arr)..............................
  * rank: -> SortId
    - attributes:  { constr prec: 0 }
  * rank: -> SortId
    - attributes:  { constr prec: 0 }
...............................(1)...............................
  * rank: Obj.C -> Arr.C
    - attributes:  { prec: 0 }
.............................(cod _).............................
  * rank: Arr.C -> Obj.C
    - attributes:  { prec: 15 }
    - axioms:
      eq cod 1(A) = A
.............................(dom _).............................
  * rank: Arr.C -> Obj.C
    - attributes:  { prec: 15 }
    - axioms:
      eq dom 1(A) = A
.............................(_ ; _).............................
  * rank: ?Arr.D ?Arr.D -> ?Arr.D
    - attributes:  { assoc r-assoc }
    - axioms:
      ceq 1(A) ; f:Arr.D = f:Arr.D if dom f:Arr.D == A
      ceq f:Arr.D ; 1(A) = f:Arr.D if cod f:Arr.D == A
      ceq 1(A) ; f:Arr.D = f:Arr.D if dom f:Arr.D == A
      ceq f:Arr.D ; 1(A) = f:Arr.D if cod f:Arr.D == A
...............................(1)...............................
  * rank: Obj.D -> Arr.D
    - attributes:  { prec: 0 }
.............................(cod _).............................
  * rank: Arr.D -> Obj.D
    - attributes:  { prec: 15 }
    - axioms:
      eq cod (A nt) = A fun
      eq cod (f:Arr.C fun) = cod f:Arr.C fun
      eq cod 1(A) = A
.............................(dom _).............................
  * rank: Arr.D -> Obj.D
    - attributes:  { prec: 15 }
    - axioms:
      eq dom (A nt) = A fun
      eq dom (f:Arr.C fun) = dom f:Arr.C fun
      eq dom 1(A) = A
.............................(_ fun).............................
  * rank: Arr.C -> Arr.D
    - attributes:  { prec: 41 }
    - axioms:
      eq 1(A) fun = 1(A fun)
  * rank: Arr.C -> Arr.D
    - attributes:  { prec: 41 }
    - axioms:
      eq 1(A) fun = 1(A fun)
.............................(_ fun).............................
  * rank: Obj.C -> Obj.D
    - attributes:  { prec: 41 }
  * rank: Obj.C -> Obj.D
    - attributes:  { prec: 41 }
.............................(_ nt).............................
  * rank: Obj.C -> Arr.D


-- sawada@sra.co.jp
