> The point here is that would remind the user that B is a parameterized
> module, otherwise in a complex module hierarchy he might completely
> lose awarness of this. 

I agree. And this is the reason why the interpreter shows parameters
when printing a module name in prompt line. As you might be noticed,
for the module `mod* B { pr(A) }', interpter print its name as
`B(X.A)' which tries to inform the fact that module B is parameterized
with formal argument X of module A. This convention is also used in
infos shown by describe command. But, of course, what you want is
a explicit notation at the specification document level. 

> Notice that for A maybe is not so important to
> see that it is a parameterized module, although some people
> legitimately might want this too.

I agree also. 

> So, my question is: how can we achieve this in the current framework?
> Maybe we can have some convention, for exmaple if the A(X :: ...) and
> then we we use the same X for B (X :: ...) {pr(A(X))} or {pr(A)} then
> the system does not treat it as a view. But I am not sure such
> convention really works safely.

I think this convention does not work well. People must be careful about
naming the formal parameters, this brings another but similar kind of 
complexity, and it makes very difficult to make a module be reusable.
Plese consider the following situation:
There are modules
	mod* A (X :: TRIV) { ... }
        mod* B (X :: MONOID) { ... }
and you want a module C which inherits parameters from A and B.

Another convention can be using qualified formal parameter names.
For exapmle, in the above case, module C may be declared as
   mod* C (X.A :: TRIV, X.B :: MONOID) { pr (A + B) ... }
Unfortunately, current system does not allow this way of declaring
formal parameters. It will complain about the name of the parameter
such as
	[Error]: parameter name must not contain `.' or `@'.
Even if the system allow qualified formal parameter, there still 
remains many difficult problems. For an instance, 
there can be various types of errorneous situations.
(1) People can easily forget to import neccessaly modules, 
    ex. forget pr(A + B) in the above.
(2) Users must be careful to declare ALL formal parameters to be
    inherited. For example, if a module M1 is declared as
      mod* M1 (X :: T1, Y :: T2, Z :: T3) { ... }
    a module M2 which wants parameters of M1 may be incorrectly 
    declared as 
      mod* M2 (X :: T1, Z :: T3) { pr(M1) ...}
(3) How about the following
      mod* C (X.A :: TRIV) { us(A) ...}
and there can be many others. And if we want provide this type of
convension, the system must check the all of these situations.
I can try an experimental implementation, but before starting,
I want some more discussion about this issue.

Thanks.
-- sawada@sra.co.jp
