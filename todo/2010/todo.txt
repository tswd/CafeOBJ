1. letの件
(1) let 変数と$$term($$subterm)
   let 変数に$$termあるいは$$subtermを束縛する際は，副作用を避けるため
   にコピーを作成しそれを変数に束縛している． 
(2) 項中に出現するlet変数
   ある項の中にlet変数が出現した際は，変数に束縛されている項のコピーが
   展開される．ただしlet変数に束縛されている項に含まれる変数はコピーさ
   れた項と共有される．

   この件については文書化しておく事が必要．

2. BOOL の動的切り替え
   残念ながらシステム事情により二木先生の望む通りにならない．
   優先度を下げて引き続き検討．

3．不正なreductionの件
   優先度大．
   p19 では問題が発生していない．理由は不明．
   -> 暫定修正完了。2011/2/22
   -> 修正完了。2011/2/23, head operator を変更した際に、
      項のソートを変更していない。p19からの修正のどこかで
      対応コードが抜けてしまっていたらしい。

3'. p19 でも発生する?
　　異なった現象．3項参照。
   aexpCompBadRed101226.cafe
	-> 修正完了。2011/2/24, if_then_else_fi の部分項の
	   ソート付け直し。

4. auto context on の場合に，外部からロードするファイル中に open
   スクリプトがある場合，open 中にインポートを行った後でコンテキストが
    open中のモジュールに戻らない事がある．
    ==> ファイル中にeofコマンドが含まれている場合に発生
    	何故そうなるかは不明．．．
　　==>　違った。ファイルからでも端末からでも同様。
	対応として、import する際に auto context change を無効にした。

5. 自動的にmemoアトリビュートを付加する?
   2011/2/22: 新規スイッチ 'always memo' を導入。これがオンの場合暗黙的に
   全てのオペレータに memo 属性を付加する。デフォルトはオン。

6. on the fly variableと
   bad-match.cafe
   これいったいなんだっけか? --> 解決済

7. ac match をせずに reduction => .....
   これは試してみたが、うまく行かない。

8. 過去の例題で動作しなくなったものが存在する。
   - bset.mod, 書き換え戦略がマイナスのやつー>スタックオーバーフロー
   - counter.mod, ==> がうまく実現できていない?
     		  exec normalize off が実現出来ていないため。
		  RWLおよび cexec.lisp を修正したつもりだが、
		  未だうまくいかない。 
		  --> cexec.lisp 修正。一応動くようになったっぽい。p25
		  としてリリースする予定。2011/2/24
   - blist.mod, 証明失敗 -> OK @ p28
   - debt-red.mod, 
     -- execute in % : ((('a 4 'b) ('b 2 'c)) ((('d -4 'c) ('d 5 'b)) ((('a -1 'e) ('b 4 'e)) (('b 3 'a) ('e 3 'd)))))
    -- reduce in %DEBT-REDUCE(X <= dint-int) : (((('a 4 'b) ('b 2 'c))
    ((('d -4 'c) ('d 5 'b)) ((('a -1 'e) ('b 4 'e)) (('b 3 'a) ('e 3
    'd))))) = ( 3 ) => ('c 2 'd)):Bool
　　　brute から帰って来ない… <- error ソートを含んだ項に対応出来てい
　　　　　　ない、interpreter は帰ってくる。しかし時間がかかる。
%DEBT-REDUCE(X <= dint-int)> red B =( 3 )=> 'c 2 'd .
-- reduce in %DEBT-REDUCE(X <= dint-int) : (((('a 4 'b) ('b 2 'c)) ((('d -4 'c) ('d 5 'b)) ((('a -1 'e) ('b 4 'e)) (('b 3 'a) ('e 3 'd))))) = ( 3 ) => ('c 2 'd)):Bool
-- reached to the specified search depth 3.
(false):Bool
(0.000 sec for parse, 27178 rewrites(121.770 sec), 44106 matches, 208680 memo hits)

    - watch, brute から帰って来ない…
      <- 帰ってくるようになった. p28. but error ソートの項。
         インタプリタでは帰って来ない。
==========================


3項の件:
p19 --> p22 で触ったプログラム．
** chaos/primitives
/defterm.lisp/1.2/Thu Jul 15 04:40:55 2010//
/find.lisp/1.5/Thu Jul 15 04:40:55 2010//
/gen-print.lisp/1.17/Thu Jul 15 04:40:55 2010//
/term-utils.lisp/1.6/Thu Jul 29 07:45:27 2010// <- こいつが悪かった
/boperator.lisp/1.6/Tue Aug  3 01:16:11 2010//
/op-theory.lisp/1.2/Tue Aug  3 01:16:11 2010//

** chaos/boot
/preproc.lisp/1.10/Wed Aug  4 04:37:34 2010//

** chaos/cafein
/rengine.lisp/1.10/Wed Aug  4 04:37:34 2010//

** chaos/construct
/match-method.lisp/1.3/Tue Aug  3 01:16:11 2010//

** chaos/decafe
/view.lisp/1.2/Mon Aug  9 00:43:37 2010//

** chaos/e-match
/match-ac.lisp/1.4/Thu Jul 15 02:09:10 2010//
/match2.lisp/1.3/Tue Aug  3 01:16:11 2010//

** chaos/eval
/eval-ast2.lisp/1.29/Wed Aug  4 04:37:34 2010//

** chaos/term-parser
/parse-engine.lisp/1.12/Tue Jul 20 06:59:37 2010//

** chaos/tools
/show.lisp/1.4/Wed Jul 14 01:59:02 2010//
/set.lisp/1.16/Thu Jul 15 04:40:55 2010//
/op-check.lisp/1.3/Wed Aug  4 04:37:34 2010//

** chaos/tram
/tram.lisp/1.4/Wed Aug  4 04:37:34 2010//

** cafeobj
/command-proc.lisp/1.11/Thu Jul 15 04:40:55 2010//
/creader.lisp/1.15/Mon Aug  9 00:43:37 2010//

** comlib
/message.lisp/1.3/Wed Jul 14 01:59:02 2010//
/misc.lisp/1.4/Thu Jul 15 04:40:55 2010//
/fsys.lisp/1.16/Wed Aug  4 04:37:34 2010//
/macros.lisp/1.6/Wed Aug  4 04:37:34 2010//

p21: での修正内容．メールより．
二木先生

澤田です．幾つか不具合と組み込み ==> の実装を修正した
バージョンをSRAのFTPサイトにおきました:
	ftp://ftp.sra.co.jp/pub/lang/CafeOBJ/cafeobj
バージョンは 1.4.8p21 です．win32, Linux, MacOSX それぞれ
バイナリを置いてあります．

修正内容は次の通りです:
(1) ==> はサーチ系組み込みの ==>* を直接用いるようにした．
   従来システムが行っていた ==> 関連の等式の追加は行わない．
(2) 先の X + X = 2 * X のバグの対応でセオリ idem がうまく
　効かなくなっていた悪い副作用を修正した．
(3) exs 下にある例題の中にはシステムが =*= のcongruency を
　証明して自動追加する等式を仮定しているものがあったため
	set accept =*= proof on
　として実行するように例題を修正した．

残っている既知の問題として，brute を用いた書き換えを行う
場合に失敗する事があるのと，brute から返される項のソート
がlowestソートになっていない事があります．
その他印字出力で改行をいれた方が見やすくなる箇所が
幾つかあります．文脈次第では不要なケースもあり，出力を
見やすくするためには全面的に見直したほうがよさそうです．
これらはあまり優先度をあげていません．

以上です．

-- swd
