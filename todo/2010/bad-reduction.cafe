-- ================================================
--
-- reduction produces non-reduced result
--

mod! LIST(X :: TRIV) {
 [List]
 op nil : -> List
 op _|_ : Elt.X List -> List
}

mod! PAIR(X :: TRIV,Y :: TRIV) {
 [Pair]
 op <_,_> : Elt.X Elt.Y -> Pair

 op fst : Pair -> Elt.X
 eq fst(< A:Elt.X,B:Elt.Y >) = A .

 op snd : Pair -> Elt.Y
 eq snd(< A:Elt.X,B:Elt.Y >) = B .
}

mod! ENTRY(K :: TRIV, V :: TRIV) {
 pr(PAIR(K,V) * {sort Pair -> Entry,
                 op fst -> key,
                 op snd -> val})
}

mod! TABLEDATA(K :: TRIV, V :: TRIV) {
 pr(LIST(ENTRY(K,V){sort Elt -> Entry})
    * {sort List -> Table, op nil -> empty})
}

mod! OPTION(M :: TRIV) {
 [None Some < Option]
 --
 op none : -> None
 op some : Elt -> Some
 --
 op valOf : Some -> Elt
 eq valOf(some(E:Elt)) = E .
}

mod! TABLE(K :: TRIV, V :: TRIV) {
 inc(EQL)
 pr(OPTION(TABLEDATA(K,V) {sort Elt -> Table})
    * {sort Option -> TOption,
       sort Some -> TSome,
       sort None -> TNone,
       op none -> noneT,
       op valOf -> valOfT,
       op some -> someT})
 --
 vars K K1 : Elt.K
 vars V V1 : Elt.V
 var T : Table
 -- singleton
 op singleton : Elt.K Elt.V -> Table
 eq singleton(K,V) = < K,V > | empty .
 -- update
 op update : Elt.K Elt.V Table -> Table
 eq update(K,V,empty) = < K,V > | empty .
 eq update(K,V,< K1,V1 > | T)
    = if K == K1 then < K,V > | T
      else < K1,V1 > | update(K,V,T) fi .
 -- insert
 op insert : Elt.K Elt.V Table -> TOption
 eq insert(K,V,empty) = someT(< K,V > | empty) .
 eq insert(K,V,< K1,V1 > | T)
    = if K == K1 then noneT
      else (if insert(K,V,T) == noneT then noneT
            else someT(< K1,V1 > | valOfT(insert(K,V,T))) fi) fi .
}

mod TEST {
 pr(TABLE(QID,NAT))
 op t : -> Table .
 eq t = update('d,3,
        update('c,2,
        update('b,1,
        singleton('a,0)))) .
}

open TEST
 --
 red update('c,10,t) .
 red insert('c,10,t) .

**
** 

--> this produces an abnormal result
 red insert('e,10,t) .
 -- it returns:
 "(someT(((< 'a , 0 >) |
  valOfT(someT(((< 'b , 1 >) |
  valOfT(someT(((< 'c , 2 >) |
  valOfT(someT(((< 'd , 3 >) |
  ((< 'e , 10 >) | empty))))))))))))):?TOption"

eof
**
close

--> this returns a normal result
parse in TEST :
(someT(((< 'a , 0 >) |
valOfT(someT(((< 'b , 1 >) |
valOfT(someT(((< 'c , 2 >) |
valOfT(someT(((< 'd , 3 >) |
((< 'e , 10 >) | empty))))))))))))) .

--> this returns a normal result
red in TEST :
(someT(((< 'a , 0 >) |
valOfT(someT(((< 'b , 1 >) |
valOfT(someT(((< 'c , 2 >) |
valOfT(someT(((< 'd , 3 >) |
((< 'e , 10 >) | empty))))))))))))) .

eof
-- ================================================
