mod! QUEUE(X :: TRIV) {
 [ NeQu < Qu ]
 op empty : -> Qu 
 op put : Qu Elt -> NeQu 
 op rest : NeQu -> Qu 
 op get : NeQu -> Elt
 var E : Elt 
 var NQ : NeQu 
 eq get(put(empty,E)) = E .
 eq get(put(NQ,E)) = get(NQ) .
 eq rest(put(empty,E)) = empty .
 eq rest(put(NQ,E)) = put(rest(NQ),E) .
}

--> test cases for checking that
select QUEUE(NAT)
red rest(rest(put(empty,1))) .
red get(put(put(empty,1),2)) .
red get(rest(put(put(empty,1),2))) .
red get(rest(rest(put(empty,1)))) .
red put(rest(rest(rest(put(put(empty,1),2)))),4) .
red get(put(rest(rest(rest(put(put(empty,1),2)))),4)) .
red get(put(rest(rest(rest(put(put(put(empty,1),2),3)))),4)) .

mod! QUEUEapp(X :: TRIV) {
  protecting (QUEUE(X))
  op append : Qu Qu -> Qu
  eq append(Q:Qu, empty) = Q .
  eq append(Q:Qu, put(Q1:Qu, E:Elt)) = put(append(Q,Q1),E) .
}

--> proving that append is associative:
-->   append(Q1,append(Q2,Q3)) = append(append(Q1,Q2),Q3)
--> by induction of the length of Q3
open QUEUEapp 
ops q1 q2 q3 : -> Qu .
op e : -> Elt .

--> induction base: Q3 = empty
reduce append(q1,append(q2,empty)) == append(append(q1,q2),empty) . 

--> induction hypothesis: holds for q3 
eq append(q1,append(q2,q3)) = append(append(q1,q2),q3) .

--> induction step: Q3 = put(q3,e)
reduce append(q1,append(q2,put(q3,e))) == append(append(q1,q2),put(q3,e)) .

close

-- the following is an attempt of using more easy to write notation
-- for "put" and "append"
make Qnat (QUEUEapp(NAT) * {op put -> (_ _)})
make QQnat (Qnat * {op append -> (_ _)})

select QQnat
reduce ((empty 1 3 4 3) (empty 3 4 2 34 5)) .
--> the above works well; but we have the following problem

-- the following "all at once renaming" does not work	
--> *****this seems to be strange; I might misunderstand syntax of renaming???
make QQQnat (QUEUEapp(NAT) * {op put -> (_ _), op append -> add})
--                      <--- the above line seems to cause some problems

--
eof
-- 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%log of the above code%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
input /home/kokichi/a-9710/lecture/i613-98-examples/queue.mod

-- loading standard prelude
Loading /usr/local/cafeobj-1.4/prelude/std.bin
Finished loading /usr/local/cafeobj-1.4/prelude/std.bin

             -- CafeOBJ system Version 1.4.2(b3) --
                built: 1998 Jul 6 Mon 16:20:27 GMT
                      prelude file: std.bin
                               ***
                   1998 Jul 19 Sun 1:35:26 GMT
                         Type ? for help
                               ---
                   uses GCL (GNU Common Lisp)
            Licensed under GNU Public Library License
              Contains Enhancements by W. Schelter
CafeOBJ> processing input : /home/kokichi/a-9710/lecture/i613-98-examples/queue.mod
-- defining module! QUEUE_*_*........_....* done.
--> test cases for checking that,,,,,,,*
-- reduce in QUEUE(X <= NAT) : rest(rest(put(empty,1)))
rest(empty) : ?Qu
(0.000 sec for parse, 1 rewrites(0.030 sec), 1 matches)
-- reduce in QUEUE(X <= NAT) : get(put(put(empty,1),2))
1 : NzNat
(0.000 sec for parse, 2 rewrites(0.000 sec), 3 matches)
-- reduce in QUEUE(X <= NAT) : get(rest(put(put(empty,1),2)))
2 : NzNat
(0.000 sec for parse, 3 rewrites(0.000 sec), 4 matches)
-- reduce in QUEUE(X <= NAT) : get(rest(rest(put(empty,1))))
get(rest(empty)) : ?Nat
(0.000 sec for parse, 1 rewrites(0.000 sec), 1 matches)
-- reduce in QUEUE(X <= NAT) : put(rest(rest(rest(put(put(empty,1)
    ,2)))),4)
put(rest(empty),4) : ?Qu
(0.010 sec for parse, 3 rewrites(0.000 sec), 4 matches)
-- reduce in QUEUE(X <= NAT) : get(put(rest(rest(rest(put(put(empty,
    1),2)))),4))
get(put(rest(empty),4)) : ?Nat
(0.010 sec for parse, 3 rewrites(0.000 sec), 4 matches)
-- reduce in QUEUE(X <= NAT) : get(put(rest(rest(rest(put(put(put(
    empty,1),2),3)))),4))
4 : NzNat
(0.010 sec for parse, 7 rewrites(0.000 sec), 10 matches)
-- defining module! QUEUEapp_*_*.,,,,,,,*.._..* done.
--> proving that append is associative:
-->   append(Q1,append(Q2,Q3)) = append(append(Q1,Q2),Q3)
--> by induction of the length of Q3
-- opening module QUEUEapp(X).. done.
--> induction base: Q3 = empty_*
-- reduce in %(X.QUEUEapp) : append(q1,append(q2,empty)) == append(
    append(q1,q2),empty)
true : Bool
(0.000 sec for parse, 3 rewrites(0.400 sec), 11 matches)
--> induction hypothesis: holds for q3 
--> induction step: Q3 = put(q3,e)*
-- reduce in %(X.QUEUEapp) : append(q1,append(q2,put(q3,e))) == append(
    append(q1,q2),put(q3,e))
true : Bool
(0.010 sec for parse, 5 rewrites(0.000 sec), 26 matches)
-- defining module Qnat,,,,,,,*,,,,,,,,,,,,,,,,*,,,,,,,*._* done.
-- defining module QQnat,,,,,,,,,*,,,,,,,*._* done.
-- reduce in QQnat : ((((empty 1) 3) 4) 3) (((((empty 3) 4) 2) 34)
     5)
((((((((empty 1) 3) 4) 3) 3) 4) 2) 34) 5 : NeQu
(0.040 sec for parse, 6 rewrites(0.020 sec), 11 matches)
-- defining module QQQnat,,,,,,,*,,,,,,,,,,,,,,,,*,,,,,,,*._* done.
QQnat> select QQQnat
QQQnat> sh .
module QQQnat
{
  imports {
    protecting (QUEUEapp(X <= NAT) * { ... })
  }
}
QQQnat> set verbose on
QQQnat> sh .				<---show command makes the system stuck
module QQQnat
{
  imports {
    protecting (QUEUEapp(X <= NAT) * { ... })
  }
  signature {
    [ NeQu, NeQu < Qu,
      Qu, NeQu < Qu ]
    op _ _ : ?Qu ?Nat -> ?Qu { prec: 0 }
    op _ _ : Qu Nat -> NeQu { prec: 0 }
    op empty : -> Qu { prec: 0 }
    op rest : ?Qu -> ?Qu { prec: 0 }
    op rest : NeQu -> Qu { prec: 0 }
    op get : ?Qu -> ?Nat { prec: 0 }
    op get : NeQu -> Nat { prec: 0 }
    op s _ : ?Nat -> ?Nat { prec: 15 }
    op s _ : Nat -> NzNat
    op s _ : NzNat -> NzNat
    op _ >= _ : ?Nat ?Nat -> ?Bool { prec: 51 }
    op _ >= _ : Nat Nat -> Bool
    op _ >= _ : NzNat NzNat -> Bool
    op _ > _ : ?Nat ?Nat -> ?Bool { prec: 51 }
    op _ > _ : Nat Nat -> Bool
    op _ > _ : NzNat NzNat -> Bool
    op _ <= _ : ?Nat ?Nat -> ?Bool { prec: 51 }
    op _ <= _ : Nat Nat -> Bool
    op _ <= _ : NzNat NzNat -> Bool
    op _ < _ : ?Nat ?Nat -> ?Bool { prec: 51 }
    op _ < _ : Nat Nat -> Bool
    op _ < _ : NzNat NzNat -> Bool
    op _ quo _ : ?Nat ?Nat -> ?Nat { prec: 31 l-assoc }
    op _ quo _ : Nat NzNat -> Nat
    op _ quo _ : NzNat NzNat -> NzNat
    op _ * _ : ?Nat ?Nat -> ?Nat { prec: 31 r-assoc }
    op _ * _ : Nat Nat -> Nat { assoc comm idr: 1 r-assoc }
    op _ * _ : NzNat NzNat -> NzNat { assoc comm idr: 1 r-assoc }
    op d : ?Nat ?Nat -> ?Nat { prec: 0 }
    op d : NzNat NzNat -> NzNat { comm }
    op _ + _ : ?Nat ?Nat -> ?Nat { prec: 33 r-assoc }
    op _ + _ : Nat Nat -> Nat { assoc comm idr: 0 r-assoc }
    op _ + _ : NzNat NzNat -> NzNat { assoc comm r-assoc }
    op sd : ?Nat ?Nat -> ?Nat { prec: 0 }
    op sd : Nat Nat -> Nat { comm }
    op _ rem _ : ?Nat ?Nat -> ?Nat { prec: 31 l-assoc }
    op _ rem _ : Nat NzNat -> Nat
    op _ divides _ : ?Nat ?Nat -> ?Bool { prec: 51 }
    op _ divides _ : NzNat Nat -> Bool
    op p _ : ?Nat -> ?Nat { prec: 15 }
    op p _ : NzNat -> Nat
    op _ _ : 					<---here is the problem
Break: print-sort-name: given non sort.
Broken at EVAL-SHOW.  Type :H for Help.
CHAOS>>

%%%%%%%%%%end end end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




