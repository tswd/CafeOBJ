-- op, sort の重複チェックに加えて，
-- 等式について重複検査を行うこと．
-- Warning を出力し，その旨を知らせること．

-- ****** file 2 *********************************
** ***********************************************
** examples for checking sort/op/ax duplication
** and also module structures produced by us/ex/pr
** ***********************************************
** line with **> shows the points to be considered
** ***********************************************

mod L= {
 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .
}

**> produce two axs/eqs!!
**> should be no duplication
mod L2 {
 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .

 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .
}

**> produce three axs/eqs!!
**> should be no duplication
mod L3 {
 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .

 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .

 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .
}

-- Leq has the same contents as L=
-- but different module name
mod Leq {
 [Lconst < L]
 pred _=_ : L L
 eq (L:L = L) = true .

 ops lc1 lc2 : -> Lconst
 vars Lc1 Lc2 : Lconst
 eq (Lc1 = Lc2) = (Lc1 == Lc2) .
}

set auto context on

-- expanded and no duplication
mod L=UsL=Us {us(L=)us(L=)}

-- expanded and no duplication
mod L=UsL=UsL=Us {us(L=)us(L=)us(L=)}

**> produce two sorts, ops, and eqs!!
**> should be no duplication
**> using/us is better to be handled as macro expansions
**> without considering the module names used
mod L=UsLeqUs {us(L=)us(Leq)}
**> there is no way to disambiguate
**> (lc1):Lconst.L=UsLeqUs !!!
parse lc1 .



**> one expansion and no reference
mod L=usL=Pr {us(L=)pr(L=)}
parse lc1 .

-- one expansion and a reference
mod L=UsLeqPr {us(L=)pr(Leq)}
parse lc1 .
parse (lc1):Lconst.Leq .

-- sharing one module and no duplication
mod L=PrL=Pr {pr(L=)pr(L=)}
parse lc1 .

-- referring two modules
mod L=PrLeqPr {pr(L=)pr(Leq)}
parse lc1 .
parse (lc1):Lconst.Leq .
parse (lc1):Lconst.L= .


**> ***** summary *****
**> 1 duplication of the same op/sort/ax/eq declaration
**>    is better to be warned and prohibited
**> 2 using/us is better to be handled as macro expansions
**>    without considering the module names used
**> ***** end end *****
