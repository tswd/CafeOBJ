** -*- Mode:CafeOBJ -*-
** $Id: bool.mod,v 1.4 2007-03-05 12:01:59 sawada Exp $
** system: Chaos
** module: library
** file: bool.mod
** -------------------------------------------------------------
-- modified by KF101227

require truth
--
-- NOTE: You may need to modify `setup-BOOL' if you change
--       the definition of module BOOL
--
lispq
(defun setup-bool ()
  (setq *BOOL-module* (eval-modexp "BOOL"))
  (with-in-module (*bool-module*)
    (let* ((and-op-info (find-operator '("_" "and" "_") 2 *bool-module*))
	   (and-meth (lowest-method* (car (opinfo-methods and-op-info)))))
      (setq *bool-and* and-meth))
    (let* ((or-op-info (find-operator '("_" "or" "_") 2 *bool-module*))
	   (or-meth (lowest-method* (car (opinfo-methods or-op-info)))))
      (setq *bool-or* or-meth))
    (let* ((not-op-info (find-operator '("not" "_") 1 *bool-module*))
	   (not-meth (lowest-method* (car (opinfo-methods not-op-info)))))
      (setq *bool-not* not-meth))
    (let* ((xor-op-info (find-operator '("_" "xor" "_") 2 *bool-module*))
	   (xor-meth (lowest-method* (car (opinfo-methods xor-op-info)))))
      (setq *bool-xor* xor-meth))
    (let* ((imp-op-info (find-operator '("_" "implies" "_") 2 *bool-module*))
	   (imp-meth (lowest-method* (car (opinfo-methods imp-op-info)))))
      (setq *bool-imply* imp-meth))
    (let* ((and-also (find-operator '("_" "and-also" "_") 2 *bool-module*))
	   (and-also-meth (lowest-method* (car (opinfo-methods and-also)))))
      (setq *bool-and-also* and-also-meth))
    (let* ((or-else (find-operator '("_" "or-else" "_") 2 *bool-module*))
	   (or-else-meth (lowest-method* (car (opinfo-methods or-else)))))
      (setq *bool-or-else* or-else-meth))
    (let* ((iff (find-operator '("_" "iff" "_") 2 *bool-module*))
	   (iff-meth (lowest-method* (car (opinfo-methods iff)))))
      (setq *bool-iff* iff-meth))
    ))

**
** MODULE BOOL
** 
** we don't want to include BOOL of course
set include BOOL off

sys:mod! BOOL
      principal-sort Bool
{
  imports {
    protecting (TRUTH)
  }
  signature {
    op not_ : Bool -> Bool {strat: (0 1) prec: 51 }

-- specific to AF
    op _and_ : Bool Bool -> Bool {constr assoc comm strat: (0 1 2) prec: 53 r-assoc }

    op _or_ : Bool Bool -> Bool {assoc comm strat: (0 1 2) prec: 53 r-assoc }   

--    op _aa_ : Bool Bool -> Bool {strat: (1 0 2) prec: 55 r-assoc }
    op _and-also_ : Bool Bool -> Bool { strat: (1 0 2) prec: 55 r-assoc }
--    op _oe_ : Bool Bool -> Bool {strat: (1 0 2) prec: 55 r-assoc }
    op _or-else_ : Bool Bool -> Bool { strat: (1 0 2) prec: 55 r-assoc }

    -- implies
--    op _imp_ : Bool Bool -> Bool {strat: (0 1 2) prec: 60 r-assoc }
    op _implies_ : Bool Bool -> Bool {strat: (0 1 2) prec: 60 r-assoc }
    -- consequence-of
--    op _cno_ : Bool Bool -> Bool {strat: (0 1 2) prec: 60 r-assoc }

    op _xor_ : Bool Bool -> Bool {assoc comm strat: (0 1 2) prec: 65 r-assoc }

-- specific to AF
    op _iff_ : Bool Bool -> Bool {constr assoc comm strat: (0 1 2) prec: 65 r-assoc }
  }
  axioms {
    -- vars P Q R : Bool . -- the last "." is not accepted KF101224
    vars P Q R : Bool 

    eq[notT]: not true = false .
    eq[notF]: not false = true .
    eq[not2]: not not P = P .

    eq[andT]: P and true = P . 
    eq[andF]: P and false = false . 
    eq[and2]: P and P = P .

    eq[orT]: P or true = true . 
    eq[orT]: P or false = P . 
    eq[or2]: P or P = P .

--    eq[Taa]: (true aa Q) = Q .
--    eq[Faa]: (false aa Q) = false .
--    eq[aaT]: (P aa true) = P .
--    eq[aaF]: (P aa false) = false .
    --
    eq[Taa']: (true and-also Q) = Q .
    eq[Faa']: (false and-also Q) = false .
    eq[aaT']: (P and-also true) = P .
    eq[aaF']: (P and-also false) = false .

--    eq[Toe]: (true oe Q) = true .
--    eq[Foe]: (false oe Q) = Q .
--    eq[oeT]: (P oe true) = true .
--    eq[oeF]: (P oe false) = P .
    --
    eq[Toe']: (true or-else Q) = true .
    eq[Foe']: (false or-else Q) = Q .
    eq[oeT']: (P or-else true) = true .
    eq[oeF']: (P or-else false) = P .

--    eq[Timp]: (true imp Q) = Q .
--    eq[Fimp]: (false imp Q) = true .
--    eq[impT]: (P imp true) = true .
--    eq[impF]: (P imp false) = not P .

    eq[Timp']: (true implies Q) = Q .
    eq[Fimp']: (false implies Q) = true .
    eq[impT']: (P implies true) = true .
    eq[impF']: (P implies false) = not P .

--    eq[Tcno]: (true cno Q) = true .
--    eq[Fcno]: (false cno Q) = not Q .
--    eq[cnoT]: (P cno true) = P .
--    eq[cnoF]: (P cno false) =  true .

    eq[xorF]: P xor false = P . 
    eq[xor2]: P xor P = false . 

    eq[iffT]: P iff true = P . 
    eq[iff2]: P iff P = true . 

-- specific to AF
eq[notIFF]: not P = P iff false .
eq[orAF]: P or Q = P iff Q iff (P and Q) .
-- eq[impAF]: P imp Q = (P and Q) iff P .
eq[impAF']: P implies Q = (P and Q) iff P .
-- eq[cnoAF]: P cno Q = (P and Q) iff Q .
eq[xorNF]: P xor Q = not(P iff Q) .
eq[distAF]: P and (Q iff R) = (P and Q) iff (P and R) iff P .

  }
}

** setting up
lispq
(setup-bool)
lispq
(setup-tram-bool-modules)
lispq
(init-builtin-universal)
**
set include BOOL on
**
provide bool
provide BOOL
**
eof
