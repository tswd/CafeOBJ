--
-- another bad reduction observation kf101226
--

mod! PNAT {

  -- the following causes bad reduction problem kf101229
  inc(EQL)

  [Zero NzNat < Nat < ErrorNat]
  op 0 : -> Zero
  op s : Nat -> NzNat
  -- For verification
  op errorNat : -> ErrorNat 
  
  -- the following causes the bad reduction problem if EQL is imported, 
  -- that is if EQL is not imported no problem happens kf101229
  op _=_ : ErrorNat ErrorNat -> Bool {comm prec: 51}

  op _<_ : Nat Nat -> Bool
  op _+_ : Nat Nat -> Nat
  op _*_ : Nat Nat -> Nat
  op sd : Nat Nat -> Nat
  op _quo_ : Nat Zero -> ErrorNat
  op _quo_ : Nat NzNat -> Nat
  op _rem_ : Nat Zero -> ErrorNat
  op _rem_ : Nat NzNat -> Nat
  op sq : Nat -> Nat

  -- square root
  op sqr : Nat -> Nat
  op pivot : Nat Nat -> Nat
  op bs : Nat Nat Nat Nat -> Nat

  --
  vars M N L U X : Nat
  -- _=_
  eq (N = N) = true .
  eq (0 = s(N)) = false .
  eq (s(M) = s(N)) = (M = N) .
  --
  eq (errorNat = N) = false .
  eq (N = errorNat) = false .
  -- _<_
  eq 0 < 0 = false .
  eq 0 < s(N) = true .
  eq s(M) < 0 = false .
  eq s(M) < s(N) = M < N .
  -- _+_
  eq 0 + N = N .
  eq s(M) + N = s(M + N) .
  -- _*_
  eq 0 * N = 0 .
  eq s(M) * N = N + (M * N) .
  -- sd
  eq sd(0,N) = N .
  eq sd(s(M),0) = s(M) .
  eq sd(s(M),s(N)) = sd(M,N) .
  -- quo
  eq M quo 0 = errorNat .
  eq M quo s(N) = (if M < s(N) then 0 else s(sd(M,s(N)) quo s(N)) fi) .
  -- rem
  eq M rem 0 = errorNat .
  eq M rem s(N) = (if M < s(N) then M else sd(M,s(N)) rem s(N) fi) .
  -- sq
  eq sq(N) = N * N .

  -- sqr
  eq sqr(N) = bs(0,N,pivot(0,N),N) .
  -- pivot
  eq pivot(L,U) = if (sd(U,L) rem s(s(0))) = 0 then L + (sd(U,L) quo s(s(0)))
                  else (L + (sd(U,L) quo s(s(0)))) + s(0) fi .
  -- bs: binary search
  eq bs(L,U,X,N)
     = if L = U then L
       else (if N < sq(X)
             then bs(L,sd(X,s(0)),pivot(L,sd(X,s(0))),N)
             else bs(X,U,pivot(X,U),N) fi) fi .
}

-- arithmetic expressions
mod! EXP {
  pr(PNAT)
  [Nat < Exp]
  op _++_ : Exp Exp -> Exp {l-assoc prec: 30}
  op _--_ : Exp Exp -> Exp {l-assoc prec: 30}
  op _**_ : Exp Exp -> Exp {l-assoc prec: 29}
  op _//_ : Exp Exp -> Exp {l-assoc prec: 29}
  op _%%_ : Exp Exp -> Exp {l-assoc prec: 29}
  op _^2 : Exp -> Exp {prec: 27}
  op /_ : Exp -> Exp {prec: 28}


}

mod! INTERPRETER {
  pr(EXP)
  op interpret : Exp -> Nat
  var N : Nat
  vars E E1 E2 : Exp
  eq interpret(N) = N .
  eq interpret(E1 ++ E2) = interpret(E1) + interpret(E2) .
  eq interpret(E1 -- E2) = sd(interpret(E1),interpret(E2)) .
  eq interpret(E1 ** E2) = interpret(E1) * interpret(E2) .
  eq interpret(E1 // E2) = interpret(E1) quo interpret(E2) .
  eq interpret(E1 %% E2) = interpret(E1) rem interpret(E2) .
  eq interpret(E ^2)     = sq(interpret(E)) .
  eq interpret(/ E)      = sqr(interpret(E)) .
}

mod! LIST (M :: TRIV) {
  [List]
  op nil : -> List
  op _|_ : Elt.M List -> List
  op _@_ : List List -> List {assoc}
  var E : Elt.M
  vars L1 L2 : List
  eq nil @ L2 = L2 .
  eq (E | L1) @ L2 = E | (L1 @ L2) .
  eq L1 @ nil = L1 .
}

mod! COMMAND {
  pr(PNAT)
  [Command]
  op push : Nat -> Command
  op multiply : -> Command
  op divide : -> Command
  op mod : -> Command
  op add : -> Command
  op minus : -> Command
  op sq : -> Command
  op sqr : -> Command
}

mod! CLIST {
  pr(LIST(COMMAND{sort Elt -> Command}) * {sort List -> CList})
}

-- virtual stack machine
mod! VM {
  pr(CLIST)
  pr(LIST(PNAT{sort Elt -> ErrorNat})
     *{sort List -> Stack, op nil -> empstk})
  op vm : CList -> Nat
  op exec : CList Stack -> Nat
  var CL : CList
  var PC : Nat
  var Stk : Stack
  vars N N1 N2 : Nat
  eq vm(CL) = exec(CL,empstk) .
  eq exec(nil,N | empstk) = N .
  eq exec(push(N) | CL,empstk) = exec(CL,N | empstk) .
  eq exec(push(N) | CL,N1 | Stk) = exec(CL,N | N1 | Stk) .
  eq exec(add | CL,N2 | N1 | Stk) = exec(CL,N1 + N2 | Stk) .
  eq exec(multiply | CL,N2 | N1 | Stk) = exec(CL,N1 * N2 | Stk) .
  eq exec(divide | CL,N2 | N1 | Stk) = exec(CL,N1 quo N2 | Stk) .
  eq exec(mod | CL,N2 | N1 | Stk) = exec(CL,N1 rem N2 | Stk) .
  eq exec(minus | CL,N2 | N1 | Stk) = exec(CL,sd(N1,N2) | Stk) .
  eq exec(sq | CL,N | Stk) = exec(CL,sq(N) | Stk) .
  eq exec(sqr | CL,N | Stk) = exec(CL,sqr(N) | Stk) .

  -- For verification
  eq exec(CL,errorNat | Stk) = errorNat .
}

mod! COMPILER {
  pr(EXP)
  pr(CLIST)
  op compile : Exp -> CList
  var N : Nat
  vars E E1 E2 : Exp
  eq compile(N) = push(N) | nil .
  eq compile(E1 ++ E2) = compile(E1) @ compile(E2) @ (add | nil) .
  eq compile(E1 -- E2) = compile(E1) @ compile(E2) @ (minus | nil) .
  eq compile(E1 ** E2) = compile(E1) @ compile(E2) @ (multiply | nil) .
  eq compile(E1 // E2) = compile(E1) @ compile(E2) @ (divide | nil) .
  eq compile(E1 %% E2) = compile(E1) @ compile(E2) @ (mod | nil) .
  eq compile(E ^2) = compile(E) @ (sq | nil) .
  eq compile(/ E) = compile(E) @ (sqr | nil) .
}

mod THEOREM-COMPILER {
  pr(INTERPRETER)
  pr(VM)
  pr(COMPILER)
-- arbitrary values  
  ops e e1 e2 : -> Exp
  ops n n1 m : -> Nat
  op nz : -> NzNat
  op l : -> CList
  ops s s1 : -> Stack
-- names of theorems
  op th1 : Exp Nat -> Bool
  op th2 : Exp CList Stack Nat -> Bool
-- CafeOBJ variables
  var E : Exp
  var N : Nat
  var L : CList 
  var S : Stack 
-- theorems
  eq th1(E,N) = (interpret(E) = N implies vm(compile(E)) = N) .
}

-- 
-- begin of bad reduction observation
--

--> ************101226
--> the following does not work properly,
--  may be because of a conflict of the declarations of
--   _=_ in EQL and _=_ declared in PNAT 
--  and LHS of the equation declared does not match
open THEOREM-COMPILER
-- assumptions
  eq ((if 0 = interpret(e) then 0
       else (if interpret(e) < sq(pivot(0,interpret(e)))
             then bs(0,sd(pivot(0,interpret(e)),s(0)),
                     pivot(0,sd(pivot(0,interpret(e)),s(0))),
                     interpret(e))
             else bs(pivot(0,interpret(e)),interpret(e),
                     pivot(pivot(0,interpret(e)),interpret(e)),interpret(e))
             fi)
       fi) = n) = false .
-- check
  red th1(/ e,n) .
close
-- BUT the following works!
open THEOREM-COMPILER
-- assumptions
  eq ((if 0 = interpret(e) then 0
       else (if interpret(e) < sq(pivot(0,interpret(e)))
             then bs(0,sd(pivot(0,interpret(e)),s(0)),
                     pivot(0,sd(pivot(0,interpret(e)),s(0))),
                     interpret(e))
             else bs(pivot(0,interpret(e)),interpret(e),
                     pivot(pivot(0,interpret(e)),interpret(e)),interpret(e))
             fi)
       fi) = n) = false .
-- check
  red th1(/ e,n) .
  let rr = $$term .
  red rr .
close

-- 
-- end of bad reduction observation
--
