-- red, start $$term, apply..., and apply reduce

mod! BOOLba {
inc(EQL)
[BoolBa]
ops true false : -> BoolBa 
op _and_ : BoolBa BoolBa -> BoolBa {assoc comm prec: 35} 
op _or_ : BoolBa BoolBa -> BoolBa {assoc comm prec: 35} 
op not_ : BoolBa -> BoolBa {prec: 30}
vars P Q R : BoolBa

-- idempotent law
eq[idemOr]: P or P = P .
eq[idemAnd]: P and P = P .

-- distribution of and over or
eq[distAndOr]: P and (Q or R) = (P and Q) or (P and R) .

-- absorption law
eq[absoAndOr]: P and (P or Q) = P .
eq[absoOrAnd]: P or (P and Q) = P .

-- contradiction
eq[contr]: P and not P = false .

-- excluded middle
eq[exMid]: P or not P = true .

-- some fundamental equalities; can be proved
eq[andTrue]: P:BoolBa and true = P .
eq[andFalse]: P:BoolBa and false = false .
eq[orTrue]: P:BoolBa or true = true .
eq[orFalse]: P:BoolBa or false = P .
eq[notFalse]: (not false):BoolBa = (true):BoolBa .
eq[notTrue]: (not true):BoolBa = (false):BoolBa .
eq[dbNeg]: not not P:BoolBa = P .
-- De Morgan
eq[dmAnd]: not(P:BoolBa and Q:BoolBa) = (not P or not Q) .
eq[dmOr]: not(P:BoolBa or Q:BoolBa) = (not P and not Q) .

-- 
vars P Q R : BoolBa .
--
op _iff_ : BoolBa BoolBa -> BoolBa {assoc comm prec: 40} 
eq (P iff Q) = ((P or not Q) and (not P or Q)) .
--
op distOrIff : BoolBa BoolBa BoolBa -> Bool
eq [distOrIff]: distOrIff(P,Q,R) = (P or (Q iff R) = (P or Q) iff (P or R)) .

}

open BOOLba
ops p r q : -> BoolBa .

-- the following does not work
red distOrIff(p,q,r) .
start $$term .
apply -andTrue at (1 2 1) .
apply -exMid with P = p at (1 2 1 2) .
apply distAndOr at (1 2 1) .
apply reduce within term .
-- "reduce <the outputed term> ." returns "(true):Bool"

-- the following works,
-- and so "red distOrIff(p,q,r) . start $$term ." should be the cause
start ((p or (((not r) and (not q)) or (q and r))) = 
       ((((not r) and (not q)) and (not p)) or ((q and r) or p))) . 
-- the above is "start <the result of "red distOrIff(p,q,r) ."> ." 
apply -andTrue at (1 2 1) .
apply -exMid with P = p at (1 2 1 2) .
apply distAndOr at (1 2 1) .
apply reduce within term .

close
