mod! PNAT {
  [ Nat ]
  op 0 : -> Nat {constr} .
  op s_ : Nat -> Nat {constr} .

  -- equality over the natural numbers
  op _=_ : Nat Nat -> Bool {comm} .
  eq (X:Nat = X) = true .
  eq (0 = s(Y:Nat)) = false .
  eq (s(X:Nat) = s(Y:Nat)) = (X = Y) .
}

mod! PNAT+*dist {
  pr(PNAT)  

  vars X Y : Nat .

  op _+_ : Nat Nat -> Nat {assoc comm prec: 30 r-assoc}
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  -- _*_ connects stronger than _+_ 
  op _*_ : Nat Nat -> Nat {assoc comm prec: 29 r-assoc}
  eq 0 * Y = 0 .
  eq s(X) * Y = Y + (X * Y) .

  -- _*_ distributes on _+_
  eq X:Nat * (Y:Nat + Z:Nat) = (X * Y) + (X * Z) .

}

mod! FACT {
  pr(PNAT+*dist)
  op fact : Nat -> Nat .
  eq fact(0) = s 0 .
  eq fact(s N:Nat) = (s N) * fact(N) .
}

mod! FACT2 {
  pr(PNAT+*dist)
  op fact2 : Nat Nat -> Nat .
  eq[fact2-1]: fact2(0,N:Nat) = N .
  eq[fact2-2]: fact2(s M:Nat,N:Nat) = fact2(M,(s M) * N) .
}

-- proof score for proving:
-- fact2(M:Nat,N:Nat) = fact2(0,fact(N) * M) 
-- by induction on the first argument M

-- ****************************************************
-- the following open-close code causes error 
-- when it is read from a file in succession with the above codes
-- BUT it does not cause any error when read by a cut-and-paste manner
-- it is also okay to use "open (FACT + FACT2 + EQL)"
-- instead of "open (FACT + FACT2) <CR> inc(EQL)"
-- ****************************************************

-- the following works
-- open (FACT + FACT2 + EQL) 
-- but
-- the following two lines causes error; this is fixed at 148p23
open (FACT + FACT2) 
inc(EQL)

--> induction base M = 0
red (fact2(0,N:Nat) = fact2(0,fact(0) * N)) .

--> induction hypothesis
op m : -> Nat .
eq fact2(m,N:Nat) = fact2(0,fact(m) * N) .

-- induction step
red (fact2(s m,N:Nat) = fact2(0,fact(s m) * N)) .

-- the following is the theorem proved
eq[theorem]: fact2(M:Nat,N:Nat) = fact2(0,fact(M) * N) .
-- 

--> the following does not work at 148p23 110224
start (fact(M:Nat) = fact2(M,s 0)) .
apply theorem within term
apply fact2-1 within term
apply reduce within term

-- but

--> the following works
start (fact(M:Nat) = fact2(M,s 0)) .
apply theorem within term
apply fact2-1 within term
let rr = $$term .
red rr .

-- this implies the following equation holds
eq fact(M:Nat) = fact2(M,s 0) .

close
