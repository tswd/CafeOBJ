;;;-*- Mode:LISP; Package: COMMON-LISP-USER; Base:10; Syntax:Common-Lisp -*-
;;; $Id: chaosx.system,v 1.1.1.1 2003-06-19 08:25:56 sawada Exp $
;;;=============================================================================
;;; 			CHAOS system configuration file
;;;=============================================================================

;;; *NOTE*
;;;  1. If you want (very very) slow but safer version of binaries,
;;;     do (push :chaos-debug *features*) BEFORE loading this file.
;;;
#+:chaos-debug(eval-when (eval load)
		(proclaim '(optimize (safety 3) (speed 1)
			    #-(or GCL EXCL) (debug 3)
			    #+EXCL (debug 2))))
#-:chaos-debug(eval-when (eval load)
                (proclaim '(optimize (speed 3) (safety 0) #-GCL (debug 0))))

(proclaim '(declaration values))

;;; CHAOS KERNEL MODULE

(eval-when (eval load)
  (unless (find-package :common-lisp)
    (rename-package :lisp :common-lisp
		    (union '("CL" "LISP")
			   (package-nicknames (find-package :lisp)) :test #'string=)))
  (unless (find-package :common-lisp-user)
    (rename-package :user :common-lisp-user
		    (union '("CL-USER" "USER")
			   (package-nicknames (find-package :user)) :test #'string=)))
  (setq *print-array* nil)
  (setq *print-circle* t)
  )

#+LUCID (in-package "user")
#+Excl (in-package :user)
#+:ccl (in-package :common-lisp-user)
#+GCL (in-package :user)
#+GCL (setf compiler::*compile-ordinaries* t)
#+:clisp (in-package :user)

;;; INSTALL___________________________________________________________________
#|
  A. COMPILE
   1. Edit *chaos-root*, see `SITE SPECIFIC' below.
   2. Invoke gcl.
   3. load "defsystem.lisp" (or "defsystem.o" if you compiled it).
   4. load "system.lisp" (this file)
   5. do (mk:compile-system 'chaos-kernel)
   6. (chaos::initialize-cafeobj)
  B. SAVE
   1. (si:save-system PATH-NAME/chaos.exe)
      ex. (si:save-system "/usr/local/bin/chaos.exe")
|#

;;; BEGIN SITE SPECIFIC ------------------------------------------------------
;;; please change the pathname to fit to your site.
;;; *chaos-root* : directry path of Chaos root.
;;; (defvar *chaos-root* "HD500Internal:Languages:MCL-PPC 3.9:projects:Chaos")
;;; (defvar *chaos-root* "Macintosh HD:Languages:MCL3.9:MCL-PPC 3.9:projects:cafeobj-1.2")
(defvar *chaos-root* ".")
;;; (defvar *chaos-root* "/home/sawada/prj/cafe/Chaos")
;;; (setq *chaos-root* "/Users/sawada/prj/cafe/Chaos")

;;; END SITE SPECIFIC --------------------------------------------------------

(defparameter *chaos-source-path-name* *chaos-root*)

#+(or UNIX DARWIN)
(defparameter *chaos-bin-path-name* (concatenate 'string *chaos-root*
						 #-:chaos-debug "/bin"
						 #+:chaos-debug "/safe-bin"))
#+APPLE
(defparameter *chaos-bin-path-name* (concatenate 'string *chaos-root*
						 #-:chaos-debug ":bin:"
                                                 #+:chaos-debug ":safe-bin:"))

;;; Chaos Configuration

(mk:defsystem :chaosx
    :source-pathname *chaos-source-path-name*
    :binary-pathname *chaos-bin-path-name*
    :source-extension "lisp"
    :components
    (#+gcl
     (:module "clII"
	      :components (#-:defpackage (:file "loop")
			   #-:defpackage (:file "defpackage")
			   ))
     ;;
     (:file "chaos-package")
     (:file "version")
     ;; (:file "func-spec")
     (:module comlib
	      :components ((:file "globals")
			   (:file "macros")
			   (:file "print-utils")
			   (:file "message")
			   (:file "error")
			   (:file "misc")
			   (:file "string")
			   (:file "list")
			   (:file "dag")
			   (:file "fsys")
			   (:file "tree-display")
			   (:file "lex")
			   (:file "reader")
			   ))
     (:subsystem "chaos"
		 :components ((:module primitives
				       :components ((:file "term2")
						    (:file "defterm")
						    (:file "bobject2"
							   :depends-on ("defterm"))
						    (:file "absntax"
							   :depends-on ("defterm"))
						    (:file "script"
							   :depends-on ("defterm"))
						    (:file "op-theory")
						    (:file "bmodexp"
							   :depends-on ("defterm"))
						    (:file "bmodule2"
							   :depends-on ("defterm"))
						    (:file "bview2"
							   :depends-on ("defterm"))
						    (:file "parse-modexp"
							   :depends-on ("bmodexp"))
						    (:file "normodexp"
							   :depends-on ("bmodexp"))
						    (:file "bsort"
							   :depends-on ("defterm"))
						    (:file "boperator"
							   :depends-on ("defterm" "bsort"))
						    (:file "baxioms"
							   :depends-on ("defterm"))
						    (:file "bmacro")
						    (:file "gen-eval")
						    (:file "gen-print")
						    (:file "context")
						    (:file "term-utils"
							   :depends-on ("term2"))
						    (:file "substitution"
							   :depends-on ("term2"))
						    (:file "find"
							   :depends-on ("term2"))
						    (:file "print-object")
						    ))
			      (:module term-parser
				       :components ((:file "parse-macro")
						    (:file "parse-engine")
						    (:file "parse-top")
						    )
				       ;; :depends-on (primitives)
				       )
			      (:module e-match
				       :components ((:file "match-utils")
						    (:file "match-system")
						    (:file "match-state")
						    (:file "match-e")
						    (:file "match-idem")
						    (:file "match-z")
						    (:file "match-a")
						    (:file "match-c")
						    (:file "match-az")
						    (:file "match-cz")
						    (:file "match-ac")
						    (:file "match-acz")
						    (:file "match")
						    (:file "match2")
						    ))
			      (:module construct
				       :components ((:file "sort")
						    (:file "operator")
						    (:file "variable")
						    (:file "match-method")
						    (:file "axiom")
						    (:file "gen-rule")
						    (:file "cr")
						    (:file "rwl")
						    (:file "beh")
						    (:file "module")
						    (:file "trs")
						    )
				       )
			      (:module decafe
				       :components ((:file "mutils")
						    (:file "modmorph")
						    (:file "mrmap")
						    (:file "meval")
						    (:file "view")
						    (:file "mimport")
						    ))
			      (:module cafein
				       :components (;; (:file "apply-rule")
						    (:file "rengine")
						    (:file "cbred")
						    ;; (:file "rdebug")
						    ;; (:file "trs")
						    ))
			      (:module tools
				       :components ((:file "regcheck")
						    (:file "regularize")
						    (:file "describe")
						    (:file "sort-tree")
						    (:file "module-tree")
						    (:file "show")
						    (:file "set")
						    (:file "op-check")
						    (:file "compat")
						    ;; (:file "psupport")
						    ))
			      (:module eval
				       :components ((:file "eval-mod")
						    (:file "eval-ast")
						    (:file "eval-ast2")
						    (:file "chaos-top")
						    )
				       )
			      (:module boot
				       :components ((:file "preproc")
						    (:file "prelude")
						    (:file "builtins")
						    ))
			      (:module tram
				       :components ((:file "tram")))
			      (:module psup
				       :components ((:file "psup")))
			      ))
     (:module thstuff
	      :components ((:file "parse-apply")
			   (:file "basics")
			   (:file "eval-match")
			   (:file "eval-apply")
			   (:file "cexec")))
     (:module cafeobj
	      :components ((:file "cafeobjvar")
			   (:file "creader")
			   (:file "trans-com")
			   (:file "trans-decl")
			   (:file "trans-form")
			   (:file "command-proc")
			   (:file "command-top")
			   (:file "cafeobj-top")
			   ))
     #+:BIGPINK
     (:subsystem "BigPink"
		 :components ((:module codes
				       :components ((:file "types")
						    (:file "glob")
						    (:file "proof-sys")
						    (:file "syntax")
						    (:file "index"
							   :depends-on ("glob"
									"types"))
						    (:file "butils"
							   :depends-on ("glob"
									"types"))
						    (:file "unify"
							   :depends-on ("glob"
									"types"))
						    (:file "clause"
							   :depends-on ("glob"
									"types"))
						    (:file "formula"
							   :depends-on ("glob"
									"types"))
						    (:file "modconv"
							   :depends-on ("glob"
									"types"))
						    (:file "weight"
							   :depends-on ("glob"
									"types"))
						    (:file "lrpo"
							   :depends-on ("glob"
									"types"))
						    (:file "resolve"
							   :depends-on ("glob"
									"types"))
						    (:file "paramod"
							   :depends-on ("glob"
									"types"))
						    (:file "demod"
							   :depends-on ("glob"
									"types"))
						    (:file "infer"
							   :depends-on ("glob"
									"types"))
						    (:file "sigmatch"
							   :depends-on ("glob"
									"types"))
						    (:file "refine"
							   :depends-on ("glob"
									"types"))
						    (:file "commands"
							   :depends-on ("glob"
									"types"))
						    (:file "inv"
							   :depends-on ("glob"
									"types"))
						    ))))
     #+:BIGPINK2
     (:subsystem "BigPink"
		 :components ((:module codes
				       :components ((:file "glob2")
						    (:file "types")
						    (:file "proof-sys")
						    (:file "syntax")
						    (:file "index2"
							   :depends-on ("glob2"
									"types"))
						    (:file "butils"
							   :depends-on ("glob2"
									"types"))
						    (:file "unify"
							   :depends-on ("glob2"
									"types"))
						    (:file "clause"
							   :depends-on ("glob2"
									"types"))
						    (:file "formula"
							   :depends-on ("glob2"
									"types"))
						    (:file "weight"
							   :depends-on ("glob2"
									"types"))
						    (:file "lrpo"
							   :depends-on ("glob2"
									"types"))
						    (:file "resolve"
							   :depends-on ("glob2"
									"types"))
						    (:file "paramod"
							   :depends-on ("glob2"
									"types"))
						    (:file "demod"
							   :depends-on ("glob2"
									"types"))
						    (:file "infer"
							   :depends-on ("glob2"
									"types"))
						    (:file "sigmatch2"
							   :depends-on ("glob2"
									"types"))
						    (:file "refine"
							   :depends-on ("glob2"
									"types"))
						    (:file "commands"
							   :depends-on ("glob2"
									"types"))
						    (:file "inv"
							   :depends-on ("glob2"
									"types"))
						    ))))
     ;;
     #+:CHAOS-WITH-TK
     (:module tk-tools
	      :components ((:file "tool-kits")
			   (:file "menu")
			   (:file "main")))
     #+:chaos-2.0
     (:module top
	      :components ((:file "common-e")
			   (:file "module-e")
			   (:file "rewrite-e")
			   (:file "default-env"))
	      :depends-on (tty))
     ))


;;; EOF
