;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: nat.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)

(defun chaos-install-nat ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "NAT" :object :system
			((%import :protecting "NZNAT" nil)
			 (%import :protecting "NAT-VALUE" nil)
			 (%psort-decl (%sort-ref "Nat" nil))
			 (%op-decl ("_" "+" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs ((:idr "0")) nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("sd")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs (:comm) nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "*" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "quo" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "rem" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "rem" "_") nil 2)
			  (%opattrs nil :l-assoc 31 nil nil nil nil t))
			 (%op-decl ("_" "divides" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl
			  (%opref ("_" "divides" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" "<" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<=" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">=" "_")
			  ((%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("s" "_") ((%sort-ref "Nat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("p" "_") ((%sort-ref "NzNat" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("p" "_") nil 1)
			  (%opattrs nil nil 15 nil nil nil nil t))
			 (%var-decl ("M" "N") (%sort-ref "Nat" nil))
			 (%var-decl ("NN") (%sort-ref "NzNat" nil))
			 (%axiom-decl :equation (":BDEMOD")
			  ("sd" "(" "M" "," "N" ")")
			  ((%slisp (abs (- m n)))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("M" "+" "N")
			  ((%slisp (+ m n))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("N" "*" "0") ("0")
			  nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("M" "quo" "NN")
			  ((%slisp (truncate m nn))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("M" "rem" "NN")
			  ((%slisp (rem m nn))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "divides" "M")
			  ((%slisp (= 0 (rem m nn)))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("N" "<" "0")
			  ("false") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("0" "<" "NN")
			  ("true") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "<=" "0")
			  ("false") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("0" "<=" "N")
			  ("true") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("0" ">" "N")
			  ("false") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" ">" "0")
			  ("true") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("0" ">=" "NN")
			  ("false") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("N" ">=" "0")
			  ("true") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("s" "0") ("1") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("p" "NN")
			  ((%slisp (- nn 1))) nil nil))))
    (eval-ast-if-need '(%protect ("NAT") :set))
    (eval-ast-if-need '(%provide "NAT"))
    (eval-ast-if-need '(%provide "nat"))
    ))

(defun chaos-nat-tram-interface ()
  (setq *z-nat* (get-z-module-or-panic "NAT"))
  (push *z-nat* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-nat)
  (chaos-nat-tram-interface))

;;; EOF

