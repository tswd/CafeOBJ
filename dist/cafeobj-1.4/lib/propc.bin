;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: propc.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-propc ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "PROPC" :object :system
			((%import :protecting "CHAOS:IDENTIFIER" nil)
			 (%import :protecting "TRUTH" nil)
			 (%psort-decl (%sort-ref "Prop" nil))
			 (%sort-decl (%sort-ref "Prop" nil) nil)
			 (%subsort-decl
			  (nil (%sort-ref "Identifier" nil)
			       (%sort-ref "Bool" nil) :<
			       (%sort-ref "Prop" nil)))
			 (%op-decl ("_" "and" "_")
			  ((%sort-ref "Prop" nil)
			   (%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs (:assoc :comm) nil 55 nil nil t nil)
			  nil)
			 (%op-decl ("_" "xor" "_")
			  ((%sort-ref "Prop" nil)
			   (%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs (:assoc :comm) nil 57 nil nil t nil)
			  nil)
			 (%op-decl ("_" "or" "_")
			  ((%sort-ref "Prop" nil)
			   (%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs (:assoc :comm) nil 59 nil nil
				    nil nil)
			  nil)
			 (%op-decl ("not" "_") ((%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs nil nil 53 nil nil nil nil)
			  nil)
			 (%op-decl ("_" "->" "_")
			  ((%sort-ref "Prop" nil)
			   (%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs nil nil 61 nil nil nil nil)
			  nil)
			 (%op-decl ("_" "<->" "_")
			  ((%sort-ref "Prop" nil)
			   (%sort-ref "Prop" nil))
			  (%sort-ref "Prop" nil)
			  (%opattrs (:assoc) nil 63 nil nil nil nil)
			  nil)
			 (%var-decl ("p" "q" "r")
			  (%sort-ref "Prop" nil))
			 (%axiom-decl :equation nil ("p" "and" "false")
			  ("false") nil nil)
			 (%axiom-decl :equation nil ("p" "and" "true")
			  ("p") nil nil)
			 (%axiom-decl :equation nil ("p" "and" "p")
			  ("p") nil nil)
			 (%axiom-decl :equation nil ("p" "xor" "false")
			  ("p") nil nil)
			 (%axiom-decl :equation nil ("p" "xor" "p")
			  ("false") nil nil)
			 (%axiom-decl :equation nil
			  ("p" "and" "(" "q" "xor" "r" ")")
			  ("(" "p" "and" "q" ")" "xor" "(" "p" "and"
			       "r" ")")
			  nil nil)
			 (%axiom-decl :equation nil ("p" "or" "q")
			  ("(" "p" "and" "q" ")" "xor" "p" "xor" "q")
			  nil nil)
			 (%axiom-decl :equation nil ("not" "p")
			  ("p" "xor" "true") nil nil)
			 (%axiom-decl :equation nil ("p" "->" "q")
			  ("(" "p" "and" "q" ")" "xor" "p" "xor"
			       "true")
			  nil nil)
			 (%axiom-decl :equation nil ("p" "<->" "q")
			  ("p" "xor" "q" "xor" "true") nil nil))))
    (eval-ast-if-need '(%protect ("PROPC") :set))
    (eval-ast-if-need '(%provide "PROPC"))
    (eval-ast-if-need '(%provide "propc"))
    ))

(defun chaos-propc-tram-interface ()
  )

(eval-when (eval load)
  (chaos-install-propc)
  (chaos-propc-tram-interface))

;;; EOF

