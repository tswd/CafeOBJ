;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: string.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-string ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "STRING" :object :system
			((%import :protecting "CHARACTER" nil)
			 (%import :protecting "STRING-VALUE" nil)
			 (%psort-decl (%sort-ref "String" nil))
			 (%op-decl ("schar")
			  ((%sort-ref "String" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "Character" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "++" "_")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil :r-assoc nil nil nil t nil t)
			  nil)
			 (%op-decl ("string")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("upcase") ((%sort-ref "String" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("downcase")
			  ((%sort-ref "String" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("capitalize")
			  ((%sort-ref "String" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("substring")
			  ((%sort-ref "String" nil)
			   (%sort-ref "Nat" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("substring")
			  ((%sort-ref "String" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("rsubstring")
			  ((%sort-ref "String" nil)
			   (%sort-ref "Nat" nil))
			  (%sort-ref "String" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("length") ((%sort-ref "String" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("string=")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("string<")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("string>")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("string<=")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("string>=")
			  ((%sort-ref "String" nil)
			   (%sort-ref "String" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%var-decl ("S" "S1" "S2")
			  (%sort-ref "String" nil))
			 (%var-decl ("C") (%sort-ref "Character" nil))
			 (%var-decl ("N" "FROM" "TO")
			  (%sort-ref "Nat" nil))
			 (%axiom-decl :equation (":BDEMOD") ("S" "++" "S2")
			  ((%slisp (concatenate 'string s s2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string" "(" "C" ")")
			  ((%slisp (string c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("schar" "(" "S" "," "N" ")")
			  ((%slisp (schar s n))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("upcase" "(" "S" ")")
			  ((%slisp (string-upcase s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("downcase" "(" "S" ")")
			  ((%slisp (string-downcase s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("capitalize" "(" "S" ")")
			  ((%slisp (string-capitalize s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("substring" "(" "S" "," "FROM" "," "TO"
				       ")")
			  ((%slisp (subseq s from to))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("substring" "(" "S" "," "N" ")")
			  ((%slisp (subseq s n))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("rsubstring" "(" "S" "," "N" ")")
			  ((%slisp (subseq s 0 n))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("length" "(" "S" ")")
			  ((%slisp (length s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string=" "(" "S1" "," "S2" ")")
			  ((%slisp (string= s1 s2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string<" "(" "S1" "," "S2" ")")
			  ((%slisp (string< s1 s2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string>" "(" "S1" "," "S2" ")")
			  ((%slisp (string> s1 s2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string<=" "(" "S1" "," "S2" ")")
			  ((%slisp (string<= s1 s2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("string>=" "(" "S1" "," "S2" ")")
			  ((%slisp (string>= s1 s2))) nil nil))))
    (eval-ast-if-need '(%protect ("STRING") :set))
    (eval-ast-if-need '(%provide "STRING"))
    (eval-ast-if-need '(%provide "string"))
    ))

(defun chaos-string-tram-interface ()
  (setq *z-string* (get-z-module-or-panic "STRING"))
  (push *z-string* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-string)
  (chaos-string-tram-interface))

;;; EOF
