;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: character.bin,v 1.6 2007-01-24 23:27:26 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-character ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "CHARACTER" :object :system
			((%import :protecting "BOOL" nil)
			 (%import :protecting "NAT" nil)
			 (%import :protecting "CHAR-VALUE" nil)
			 (%psort-decl (%sort-ref "Character" nil))
			 (%op-decl ("char-code")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Nat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("code-char") ((%sort-ref "Nat" nil))
			  (%sort-ref "Character" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("upcase")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Character" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("downcase")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Character" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("graphic-char-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("alpha-char-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("upper-case-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("lower-case-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("both-case-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("digit-char-p")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("alphanumericp")
			  ((%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("char<")
			  ((%sort-ref "Character" nil)
			   (%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("char>")
			  ((%sort-ref "Character" nil)
			   (%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("char<=")
			  ((%sort-ref "Character" nil)
			   (%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("char>=")
			  ((%sort-ref "Character" nil)
			   (%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("char=")
			  ((%sort-ref "Character" nil)
			   (%sort-ref "Character" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%var-decl ("C" "C2")
			  (%sort-ref "Character" nil))
			 (%var-decl ("N") (%sort-ref "Nat" nil))
			 (%axiom-decl :equation (":BDEMOD")
			  ("char-code" "(" "C" ")")
			  ((%slisp (char-code c))) nil nil)
			 (%axiom-decl :equation nil
			  ("code-char" "(" "N" ")")
			  ((%slisp (code-char n))) ("N" "<=" "255") nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("upcase" "(" "C" ")")
			  ((%slisp (char-upcase c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("downcase" "(" "C" ")")
			  ((%slisp (char-downcase c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("graphic-char-p" "(" "C" ")")
			  ((%slisp (graphic-char-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("alpha-char-p" "(" "C" ")")
			  ((%slisp (alpha-char-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("upper-case-p" "(" "C" ")")
			  ((%slisp (upper-case-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("lower-case-p" "(" "C" ")")
			  ((%slisp (lower-case-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("both-case-p" "(" "C" ")")
			  ((%slisp (both-case-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("digit-char-p" "(" "C" ")")
			  ((%slisp (digit-char-p c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("alphanumericp" "(" "C" ")")
			  ((%slisp (alphanumericp c))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("char=" "(" "C" "," "C2" ")")
			  ((%slisp (char= c c2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("char<" "(" "C" "," "C2" ")")
			  ((%slisp (char< c c2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("char>" "(" "C" "," "C2" ")")
			  ((%slisp (char> c c2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("char<=" "(" "C" "," "C2" ")")
			  ((%slisp (char<= c c2))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("char>=" "(" "C" "," "C2" ")")
			  ((%slisp (char>= c c2))) nil nil))))
    (eval-ast-if-need '(%protect ("CHARACTER") :set))
    (eval-ast-if-need '(%provide "CHARACTER"))
    (eval-ast-if-need '(%provide "character"))
    ))

(defun chaos-character-tram-interface ()
  (setq *z-char* (get-z-module-or-panic "CHARACTER"))
  (push *z-char* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-character)
  (chaos-character-tram-interface))

;;; EOF
