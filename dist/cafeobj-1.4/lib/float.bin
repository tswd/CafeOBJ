;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: float.bin,v 1.6 2007-01-24 23:27:26 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-float ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "FLOAT" :object :system
			((%import :protecting "FLOAT-VALUE" nil)
			 (%import :protecting "BOOL" nil)
			 (%psort-decl (%sort-ref "Float" nil))
			 (%op-decl ("_" "+" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "+" "_") nil 2)
			  (%opattrs (:assoc :comm) nil 33 nil nil
				    nil nil t))
			 (%op-decl ("_" "-" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "-" "_") nil 2)
			  (%opattrs nil :r-assoc 33 nil nil nil nil t))
			 (%op-decl ("_" "*" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "*" "_") nil 2)
			  (%opattrs (:assoc :comm) nil 31 nil nil
				    nil nil t))
			 (%op-decl ("_" "/" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "/" "_") nil 2)
			  (%opattrs nil :l-assoc 31 nil nil nil nil t))
			 (%op-decl ("_" "rem" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "rem" "_") nil 2)
			  (%opattrs nil :l-assoc 31 nil nil nil nil t))
			 (%op-decl ("exp") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("log") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("sqrt") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("abs") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("sin") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("cos") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("atan") ((%sort-ref "Float" nil))
			  (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("pi") nil (%sort-ref "Float" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "<" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" "<=" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "<=" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" ">" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" ">" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" ">=" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" ">=" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" "=" "[" "_" "]" "_")
			  ((%sort-ref "Float" nil)
			   (%sort-ref "Float" nil)
			   (%sort-ref "Float" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl
			  (%opref ("_" "=" "[" "_" "]" "_") nil 3)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%var-decl ("X" "Y" "Z")
			  (%sort-ref "Float" nil))
			 (%axiom-decl :equation (":BDEMOD") ("X" "+" "Y")
			  ((%slisp (+ x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "-" "Y")
			  ((%slisp (- x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "*" "Y")
			  ((%slisp (* x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "/" "Y")
			  ((%slisp (/ x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "rem" "Y")
			  ((%slisp (rem x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("exp" "(" "X" ")")
			  ((%slisp (exp x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("log" "(" "X" ")")
			  ((%slisp (log x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("sqrt" "(" "X" ")")
			  ((%slisp (sqrt x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("abs" "(" "X" ")")
			  ((%slisp (abs x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("sin" "(" "X" ")")
			  ((%slisp (sin x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("cos" "(" "X" ")")
			  ((%slisp (cos x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("atan" "(" "X" ")")
			  ((%slisp (atan x))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("pi") ((%slisp pi))
			  nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "<" "Y")
			  ((%slisp (< x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" "<=" "Y")
			  ((%slisp (<= x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" ">" "Y")
			  ((%slisp (> x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("X" ">=" "Y")
			  ((%slisp (>= x y))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("(" "X" "=" "[" "Z" "]" "Y" ")")
			  ((%slisp (< (abs (- x y)) z))) nil nil))))
    (eval-ast-if-need '(%protect ("FLOAT") :set))
    (eval-ast-if-need '(%provide "FLOAT"))
    (eval-ast-if-need '(%provide "float"))
    ))

(defun chaos-float-tram-interface ()
  (setq *z-float* (get-z-module-or-panic "FLOAT"))
  (push *z-float* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-float)
  (chaos-float-tram-interface)
  )

;;; EOF
