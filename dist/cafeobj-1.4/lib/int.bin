;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: int.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-int ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "INT" :object :system
			((%import :protecting "NAT" nil)
			 (%import :protecting "INT-VALUE" nil)
			 (%psort-decl (%sort-ref "Int" nil))
			 (%op-decl ("_" "+" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs ((:idr "0")) nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "-" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "-" "_") nil 2)
			  (%opattrs nil :r-assoc 33 nil nil nil nil t))
			 (%op-decl ("_" "*" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "quo" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "NzInt" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "rem" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "NzInt" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "divides" "_")
			  ((%sort-ref "NzInt" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<=" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">=" "_")
			  ((%sort-ref "Int" nil)
			   (%sort-ref "Int" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("s" "_") ((%sort-ref "Int" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("-" "_") ((%sort-ref "Int" nil))
			  (%sort-ref "Int" nil)
			  (%opattrs nil nil 15 nil nil nil nil t)
			  nil)
			 (%op-decl ("-" "_") ((%sort-ref "NzInt" nil))
			  (%sort-ref "NzInt" nil)
			  (%opattrs nil nil 15 nil nil nil nil t)
			  nil)
			 (%var-decl ("I" "J") (%sort-ref "Int" nil))
			 (%var-decl ("NJ") (%sort-ref "NzInt" nil))
			 (%axiom-decl :equation (":BDEMOD") ("-" "I")
			  ((%slisp (- i))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "+" "J")
			  ((%slisp (+ i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "-" "J")
			  ("I" "+" "(" "-" "J" ")") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "*" "J")
			  ((%slisp (* i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "quo" "NJ")
			  ((%slisp (truncate i nj))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "rem" "NJ")
			  ((%slisp (rem i nj))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NJ" "divides" "I")
			  ((%slisp (= 0 (rem i nj)))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "<" "J")
			  ((%slisp (< i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" "<=" "J")
			  ((%slisp (<= i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" ">" "J")
			  ((%slisp (> i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("I" ">=" "J")
			  ((%slisp (>= i j))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("s" "I")
			  ("1" "+" "I") nil nil))))
    (eval-ast-if-need '(%protect "INT" :set))
    (eval-ast-if-need '(%provide "INT"))
    (eval-ast-if-need '(%provide "int"))
    ))

(defun chaos-int-tram-interface ()
  (setq *z-int* (get-z-module-or-panic "INT"))
  (push *z-int* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-int)
  (chaos-int-tram-interface))

;;; EOF
