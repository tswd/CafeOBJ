Date: Sun, 9 Nov 1997 17:21:03 +0200
From: Diaconescu Razvan <diacon@stoilow.imar.ro>
Message-Id: <9711091521.AA05422@stoilow.imar.ro>
To: sawada@sra.co.jp
Subject:  Re: order sortedness example
Cc: ishisone@sra.co.jp, kokichi@jaist.ac.jp, mitihiro@jaist.ac.jp,
        nakagawa@sra.co.jp, ogata@jaist.ac.jp, s_iida@jaist.ac.jp
Content-Type: text
Content-Length: 2840

Dear Toshimi,

: > It does not concern with retract mechanism or error operator of CafeOBJ.
: > It is just a problem of operator theory, in this case, associativity 
: > of _;_.
: > 
: > Why do you declare op on Path as
: >   op _;_ : Path Path -> EPath 
: > 
: > instead of 
: >   op _;_ : Path Path -> Path { assoc } ?
:
: It seems that I've been misunderstanding your intention.
: Your example is an example for example showing some properties of
: order sorted-ness. Very sorry about that.
:
: Still, the problem is that operator _;_ is not associative on Path.
: CafeOBJ does not allow 
:    op _;_ : Path Path -> Epath { assoc }
:
: Do you think this is too restrictive?

This is an example of how to use partial functions in CafeOBJ
(a kind of sort constraints). These things are going to be very useful
in practice, in fact really necessary. So, let embrace this example as
a kind of benchmark, and if we make it somehow (by more clever
specification writing or by some implemetation developments) work then
all problems of this kind (i.e., involving partiality in which the
domain of the functions is equationally defined) will also work.

The main idea is very similar to MEL and very recent work by Joseph
Goguen involving retracts (IIda-san, could you please send Sawada-san
these two postscript files by email; thanks!). In this example _;_ is
*partial* because we can compose path only if the target of the first
is the same woth the source of the second. Then we define an "error
supersort" EPath to contain also expressions that do not make sense
(i.e., path that do not compose). This is like a KIND in MEL. In OBJ3
we use the retract from EPath->Path in the equations and in MEL we say
something like 

cmb P ; P' : Path if (P : Path) and (P' : Path) and (s P') == (t P) .

In our example I do not think the problem is the associativity
operation _;_. I simplified a bit the specification (you see
the last version at the end of the message) so that assoc is not a
problem anymore. Also, I tried it without the attribute { assoc } and
it behaves exactly the same. 

: And, I could not find why 
: >  red s (e1 ; e3) . -- should be error

This should be an error in the sense that the result has an error
supersort ?Node, which actually happens. It should be like this
because the edges e1 and e3 cannot be composed into a path
(t e1 == n2 =/= n3 == s e3). This is also why we cannot do

_;_ : Path Path -> Path

Finally I do not think that the fact that CafeOBJ  does not allow 
   op _;_ : Path Path -> Epath { assoc }

is restrictive, I think we should stick with the clear associativity
property where all sorts are the same. But, in my opinion, this maybe
has nothing to do with this problem.

Please let me know what you think.

Best regards,
Razvan

PS. This message was still written on the Japanese territory...
