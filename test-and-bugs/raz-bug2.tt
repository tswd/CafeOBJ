-- From: Razvan Diaconescu <diacon@jaist.ac.jp>
-- Date: Wed, 15 Oct 97 23:41:29 JST
-- Message-Id: <9710151441.AA00274@is27e0s07.jaist.ac.jp>
-- To: sawada@sra.co.jp
-- Subject:  bug in RWL example
-- Content-Type: text
-- Content-Length: 5231

-- Dear Toshimi,

-- This is the bug in a RWL example I mentioned during the 1st day of the
-- workshop. At the end there is maybe a bug related to the module system
-- too (but I am not sure yet about this).

-- The problem is that the following part

-- open DEBT-REDUCE .
-- ops sys1 sys2 a b : -> Debt* .
-- eq sys1 ==> sys2 = true .
-- eq a ==> b = true .
-- red sys1 a ==> sys2 b .

-- doesnt give true. 

-- Best regards,
-- Razvan
-- ----------------------
-- example of coherent RWL specification in CafeOBJ featuring
-- use of the transition predicate ==> in proof scores

-- to be completed with induction proofs of
-- balance(agnt,sys1) == balance(agnt,sys2) if sys1 ==> sys2

mod! DINT {
  [ DNat < DInt ]
  op 0 : -> DNat { constr }
  op s_ : DNat -> DNat { constr }
  op s_ : DInt -> DInt { constr }
  op p_ : DInt -> DInt { constr }

  op _+_ : DInt DInt -> DInt
  op _+_ : DNat DNat -> DNat
  op _-_ : DInt DInt -> DInt
  op -_ : DInt -> DInt

  op _<_ : DNat DNat -> Bool
  op _<=_ : DNat DNat -> Bool

  vars I J : DInt
  eq s p I = I .
  eq p s I = I .

  eq I + 0 = I .
  eq 0 + I = I .
  eq I + s J = s(I + J) .
  eq s I + J = s(I + J) .
  eq I + p J = p(I + J) .
  eq p I + J = p(I + J) .

  eq I - 0 = I .
  eq 0 - I = - I .
  eq I - s J = p(I - J) .
  eq s I - J = s(I - J) .
  eq I - p J = s(I - J) .
  eq p I - J = p(I - J) .

  eq - 0 = 0 .
  eq - (s I) = p (- I) .
  eq - (p I) = s (- I) .

  vars M N K L : DNat
  eq 0 < 0 = false .
  eq 0 < s N = true .
  eq s M < 0 = false .
  eq s M < s N = M < N .
  ceq M <= N = true if M < N .
  ceq M <= N = true if M == N .
  ceq M <= N = false if N < M .
  ceq (M + N) <= (K + L) = true if (M <= K) and (N <= L) .
  eq M <= (M + N) = true .
  eq N <= (M + N) = true .
}

mod! DEBT (X :: DINT) {
  protecting(QID * { sort Id -> Agent })

  [ Debt < Debt* ]

  op ___ : Agent DInt Agent -> Debt
  op nil : -> Debt*
  op __ : Debt* Debt* -> Debt* { assoc comm }

  vars a b c : Agent
  var n : DInt

-- the whole debt in the system
  op global-debt : Debt* -> DNat

  eq global-debt(nil) = 0 .
  ceq global-debt(a n b) = n   if 0 <= n .
  ceq global-debt(a n b) = - n if n <= 0 .
  eq global-debt(d1:Debt* d2:Debt*) = global-debt(d1) + global-debt(d2) .

-- individual balance for each agent
  op balance : Agent Debt* -> DInt

  eq balance(a, nil) = 0 .
  ceq balance(a, (b n c)) = 0   if  ((b =/= a) and (c =/= a)) or
                                    ( (b == a) and (c == a) ) . 
  ceq balance(a, (a n b)) = - n if b =/= a .
  ceq balance(a, (b n a)) = n   if b =/= a .
  eq balance(a, d1:Debt* d2:Debt*) = balance(a, d1) + balance(a, d2) . 
}

mod! DEBT-REDUCE {
  protecting(DEBT)

  var S : Debt*
  vars m n : DInt 
  vars !A !B !C : Agent

  eq nil S = S .

  ceq !A m !B = !B - m !A if (m < 0) .
  eq  !A 0 !B = nil .
  eq (!A m !B) (!A n !B) = !A (m + n) !B .
  eq !A m !A = nil .

  ctrans (!A m !B) (!B n !C) => (!A m !C) (!B (n - m) !C)
                                        if (m <= n) and (0 < m) and (0 < n) .
  ctrans (!A m !B) (!B n !C) => (!A (m - n) !B) (!A n !C)
                                        if (n <= m) and (0 < m) and (0 < n) .
}

-- global-debt(sys2) <= global-debt(sys1)   if sys1 ==> sys2
-- base case 
-- no transition
open DEBT-REDUCE .
ops sys1 sys2 : -> Debt* .
eq sys2 = sys1 .
red global-debt(sys2) <= global-debt(sys1) .
close

-- m < n, 0 < m, 0 < n
mod! BASE1 {
pr(DEBT-REDUCE)
ops a b c : -> Agent
ops m n k : -> DNat

eq 0 < m = true .
eq 0 < n = true .
-- eq m < n = true .
-- eq n - m = k .
eq 0 < k = true .
eq k + m = n .
}

open BASE1
red global-debt((a m c) (b k c)) <= global-debt((a m b) (b n c)) .
close

-- m = n, 0 < m, 0 < n
mod! BASE2 {
pr(DEBT-REDUCE)
ops a b c : -> Agent
ops m n : -> DNat

eq n = m .
eq 0 < m = true .
}

open BASE2
red global-debt((a m c) (b 0 c)) <= global-debt((a m b) (b n c)) .
close

-- n < m, 0 < m, 0 < n
mod! BASE3 {
pr(DEBT-REDUCE)
ops a b c : -> Agent
ops m n k : -> DNat

eq 0 < m = true .
eq 0 < n = true .
-- eq m < n = true .
-- eq m - n = k .
eq 0 < k = true .
eq n + k = m .
}

open BASE3
red global-debt((a k c) (b n c)) <= global-debt((a m b) (b n c)) .
close

-- Induction Step

open DEBT-REDUCE .
ops sys1 sys2 a b : -> Debt* .
eq sys1 ==> sys2 = true .
eq a ==> b = true .
red sys1 a ==> sys2 b .

eq global-debt(sys1) <= global-debt(sys2) = true .
eq global-debt(a) <= global-debt(b) = true .
red global-debt(sys1 a) <= global-debt(sys2 b) .
close

-- -------------------------------------------------------------------
--> some tests
-- -------------------------------------------------------------------
view dint-int from DINT to INT {
  sort DInt -> Int,
  sort DNat -> Nat,
  op s X:DNat -> X:Nat + 1, 
  op p Y:DInt -> X:Int - 1, 
  op 0 -> 0 
}

open DEBT-REDUCE(dint-int) .

let A = ('a -2 'b) ('a 3 'c) ('c 4 'b) .
red global-debt(A) .
red balance('b, A) .
exec A .
red A ==> ('a 1 'b) ('c 1 'b) .
let B = ('a 4 'b) ('b 2 'c) ('d -4 'c) ('d 5 'b) ('a -1 'e)
        ('b 4 'e) ('b 3 'a) ('e 3 'd) .
exec B .
-- red B =( 3 )=> 'c 2 'd .
-- red B ==> 'c 2 'd .
--> the problem is NOT confluent: both of the following are normal forms
red ('c 3 'a) ('d 1 'a) ('a 2 'b) ==> ('d 1 'a) ('c 2 'b) ('c 1 'a) .
red ('c 3 'a) ('d 1 'a) ('a 2 'b) ==> ('c 2 'a) ('d 1 'b) ('c 1 'b) .
close










