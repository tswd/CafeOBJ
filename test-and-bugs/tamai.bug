module LATTICE 
     principal-sort Elt
{
  [ Elt ]
  signature {
    op _v_ : Elt Elt -> Elt {
      assoc comm
    }
    op _^_ : Elt Elt -> Elt {
      assoc comm
    }
    op _<=_ : Elt Elt -> Bool
  }
  axioms {
    vars x y : Elt
    eq x v (x ^ y) = x .
    eq x ^ (x v y) = x .
    eq x <= y = x ^ y == x .
  }
}

module LATTICE-1
     principal-sort Elt
{
  protecting(LATTICE)
  signature {
    op top : -> Elt
  }
  axioms {
    var x : Elt
    eq top ^ x = x .
    --  prove "x<=top = true" (should be trivial)
  }
}

module TRANS[lt :: LATTICE-1] 
     principal-sort Elt
{ 
  [ Trans ]
  signature {
    op _*_ : Trans Trans -> Trans {
      assoc
    }
    op _^_ : Trans Trans -> Trans {
      assoc comm
    }
    op _<_> : Trans Elt -> Elt
    ops iota tau : -> Trans
  }
  axioms {
    vars f f1 f2 : Trans
    vars x y : Elt
    eq (f1 * f2) < x > = f1 < (f2 < x >) > .
    eq (f1 ^ f2) < x > = (f1 < x >) ^ (f2 < x >) .
    eq iota < x > = x .
    eq tau < x > = top .
    eq (not (x <= y)) or ((f < x >) <= (f < y >)) = true .
  }
}

module GRAPH
{
  [ Vertex Edge ]
  signature {
    ops head tail : Edge -> Vertex
  }
}

module FIXEDPOINT[gr :: GRAPH, tr :: TRANS] {
  signature {
    op fe : Edge -> Trans
    op xv : Vertex -> Elt
  }
  axioms {
    var v : Vertex var e : Edge
    ceq xv(v) = xv(v) ^ ((fe(e)) < xv(tail(e)) >) if head(e) == v .
  }
}

-- Shortest Path Problem

module NAT-MAXMIN 
     principal-sort Nat+
{
  protecting(NAT)
  [ Nat < Nat+ ]
  signature {
    op inf : -> Nat+
    ops min max : Nat+ Nat+ -> Nat+ {assoc comm}
    op _<=_ : Nat+ Nat+ -> Bool
    op _+_ : Nat+ Nat+ -> Nat+ {assoc comm}
  }
  axioms {
    vars x y : Nat+
    eq x <= inf = true .
    eq x + inf = inf .
    ceq min(x,y) = x if x <= y .
    ceq min(x,y) = y if y <= x .
    ceq max(x,y) = x if y <= x .
    ceq max(x,y) = y if x <= y .
  }
}

"
view LATTICEtoNAT from LATTICE-1 to NAT-MAXMIN {
  sort Elt -> Nat+,
  op   _^_ -> min,
  op   _v_ -> max,
  op   top -> inf
}
"
view LATTICEtoNAT from LATTICE-1 to NAT-MAXMIN {
  sort Elt -> Nat+
  op   _^_ -> min,
  op   _v_ -> max,
  op   top -> inf
}

module GRAPH-A {
  [ Vertex Edge ]
  signature {
    ops v1 v2 v3 v4 v5 v6 : -> Vertex
    ops e1 e2 e3 e4 e5 e6 e7 e8 e9 : -> Edge
    ops head tail : Edge -> Vertex
  }
  axioms {
    eq head(e1) = v1 . eq tail(e1) = v2 .
    eq head(e2) = v1 . eq tail(e2) = v3 .
    eq head(e3) = v2 . eq tail(e3) = v4 .
    eq head(e4) = v2 . eq tail(e4) = v5 .
    eq head(e5) = v3 . eq tail(e5) = v4 .
    eq head(e6) = v3 . eq tail(e6) = v5 .
    eq head(e7) = v4 . eq tail(e7) = v6 .
    eq head(e8) = v5 . eq tail(e8) = v6 .
    eq head(e9) = v6 . eq tail(e9) = v2 .
  }
}

module NAT-TRANS {
  protecting(TRANS[lt <= LATTICEtoNAT])
}

--
-- view to があると駄目。eof になる。
--
module SHORTESTP {
  -- protecting (FIXEDPOINT[gr <= view to GRAPH-A,
  --                         tr <= view to NAT-TRANS])
  protecting (FIXEDPOINT[tr <= NAT-TRANS{ sort Elt -> Nat+,
                                          vars X Y : Elt,
                                          op X ^ Y -> min(X,Y),
                                          op _v_ -> max,
                                          op top -> inf }
		 	 gr <= GRAPH-A])
  
  signature {
    op dist : Edge -> Nat
  }
  axioms {
    var e : Edge 
    var x : Nat
    eq dist(e1) = 2 .
    eq dist(e2) = 5 .
    eq dist(e3) = 3 .
    eq dist(e4) = 4 .
    eq dist(e5) = 1 .
    eq dist(e6) = 2 .
    eq dist(e7) = 3 .
    eq dist(e8) = 1 .
    eq dist(e9) = 4 .
    -- -----------------
    eq fe(e) < x > = x + dist(e) .
  }
}

