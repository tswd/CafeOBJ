The following two tables contain the names of functions, macros and classes
that might cause autoloading during the running of your application. While
macros can be autoloaded, they are only autoloaded when source code that
uses them is evaluated or compiled, so unless you are doing evaluation or
compilation in your application at runtime you can ignore macro autoloads.

Autoloading can potentially cause a runtime failure of your application.
You have two options for preventing this failure:

1. Use the `runtime-bundle' keyword argument to generate-application.  This
   causes a special and smaller version of files.bu to be used by the
   application, one that contains redistributable files according to the
   license agreement for Allegro Runtime.  We suggest you use the
   runtime-bundle option and then test that the functions you wish to call
   are properly loaded from the runtime bundle.

2. Require the modules that you need.  This is the preferrable option.

The first table contains the names of autoloaded classes.  The first column
is the module name (acceptable to common-lisp:require) and the second
column is the symbol naming the class.  If find-class is called, either
directly or indirectly by your application, on a class listed in this
table, then the module in column one will be loaded.

The second table contains the names of autoloaded functions and macros.  If
any of the functions listed in column two are called, then the file listed
in column one will be autoloaded.  To prevent autoloading at application
runtime, you should require the file containing the autoloaded functions
you will use during the execution of your application. For example, for a
file foo.fasl and a function foo, you should add to your application the
following form:

   (eval-when (compile eval load) (require :foo))

This will properly prevent autoloading for functions contained in the
module :foo.


module name            autoloaded class
-----------            ----------------
STREAMC                EXCL::STRING-OUTPUT-WITH-ENCAPSULATED-ANNOTATION-STREAM
STREAMC                EXCL::XP-STREAM


file name              autoloaded symbol
---------              -----------------
build.fasl             BUILD-LISP-IMAGE
constructor.fasl       EXCL::INSTALL-TEMPLATE-AND-CONSTRUCTOR
defctype.fasl          FOREIGN-FUNCTIONS:MAKE-CSTRUCT
defctype.fasl          FOREIGN-FUNCTIONS:MALLOC-CSTRUCT
defctype.fasl          FOREIGN-FUNCTIONS:FREE-CSTRUCT
defctype.fasl          FOREIGN-FUNCTIONS::CSTRUCT-CONSTRUCTOR-GENERATOR-3
defctype.fasl          FOREIGN-FUNCTIONS::CSTRUCT-CONSTRUCTOR-GENERATOR
defctype.fasl          FOREIGN-FUNCTIONS::CSTRUCT-TR
defctype.fasl          FOREIGN-FUNCTIONS::CSTRUCT-SETF-EXPANDER
disasm.fasl            DISASSEMBLE
efmacs.fasl            EXCL::PREBUILD-ALL-EFS
efmacs.fasl            FIND-COMPOSED-EXTERNAL-FORMAT
efmacs.fasl            EOL-CONVENTION
efmacs.fasl            GENERATE-FILLED-EF-TEMPLATES
ftp.fasl               ACL-SOCKET:FTP-TRANSFER-FILE
ftp.fasl               ACL-SOCKET:OPEN-FTP-STREAM
genapp.fasl            GENERATE-APPLICATION
generate.fasl          GENERATE-RSA-KEYS
genexe.fasl            GENERATE-EXECUTABLE
inspect.fasl           INSPECT
lldb.fasl              EXCL::INSTALL-BREAKPOINTS
lldb.fasl              EXCL::BREAKPOINT-1
lldb.fasl              DELETE-BREAKPOINT
lldb.fasl              ADD-BREAKPOINT
locale.fasl            EXCL::LOCALE-TIME-UT-TO-FORMAT-CONTROL-ARGS
rc4.fasl               RC4-SET-KEY
rc4.fasl               RC4
scm.fasl               ED
step.fasl              EXCL::STEP-1
update.fasl            SYSTEM:UPDATE-ALLEGRO
walker.fasl            EXCL::OLD-COMPILER-WALK
walker.fasl            EXCL::WALK
xref.fasl              EXCL::LIST-UNDEFINED-FUNCTIONS
xref.fasl              EXCL::LIST-UNUSED-FUNCTIONS
