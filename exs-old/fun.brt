(use INT)
(use QID)
(sort |?InitList..trs#1.| |InitList..trs#1.| |?Env..trs#4.| |Env..trs#4.| |?SortId.CHAOS:PARSER| |SortId.CHAOS:PARSER| |Bool.TRUTH-VALUE| |IntExp.EXP| |?BoolExp.EXP| |BoolExp.EXP| |?Stmt.STMT| |Stmt.STMT| |IdList..trs#3.| |IdNeList..trs#3.| |?IdList+IntExp+IntList.FUNCONSTR| |IntList..trs#2.| |IntNeList..trs#2.| |Init.FUNCONSTR| |NeList..trs#1.| |?Fun.FUN| |Fun.FUN|)(sort-order (|NeList..trs#1.| |InitList..trs#1.|) (|Init.FUNCONSTR| |NeList..trs#1.|) (|IntNeList..trs#2.| |IntList..trs#2.|) (|IdNeList..trs#3.| |IdList..trs#3.|) (|Int.INT-VALUE| |IntNeList..trs#2.|) (|Int.INT-VALUE| |IntExp.EXP|) (|Bool.TRUTH-VALUE| |BoolExp.EXP|) (|Id.QID| |IdNeList..trs#3.|) (|Id.QID| |IntExp.EXP|))
(sort-order (|Fun.FUN| |?Fun.FUN|) (|IntList..trs#2.| |?IdList+IntExp+IntList.FUNCONSTR|) (|IdList..trs#3.| |?IdList+IntExp+IntList.FUNCONSTR|) (|Stmt.STMT| |?Stmt.STMT|) (|BoolExp.EXP| |?BoolExp.EXP|) (|IntExp.EXP| |?IdList+IntExp+IntList.FUNCONSTR|) (|SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) (|Env..trs#4.| |?Env..trs#4.|) (|InitList..trs#1.| |?InitList..trs#1.|))
(op |Fun/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |wrong#args/0?Env..trs#4.| nil |Env..trs#4.| nil)
(op |\\[\\[_\\]\\]\\[_\\]_?Env..trs#4.| (|Fun.FUN| |Env..trs#4.| |IntList..trs#2.|) |Env..trs#4.| (1 0 2 3 0))
(op |\\[\\[_:=_\\]\\]_?Env..trs#4.| (|IdList..trs#3.| |IntList..trs#2.| |Env..trs#4.|) |Env..trs#4.| (1 2 0 3 0))
(op |fun__isvars_body:_?Fun.FUN| (|Id.QID| |IdList..trs#3.| |InitList..trs#1.| |Stmt.STMT|) |Fun.FUN| (1 2 3 4 0))
(op |InitList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |Init/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |_initially_?InitList..trs#1.| (|Id.QID| |IntExp.EXP|) |Init.FUNCONSTR| (1 2 0))
(op |IntNeList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |IntList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |__?IdList+IntExp+IntList.FUNCONSTR| (|IntNeList..trs#2.| |IntList..trs#2.|) |IntNeList..trs#2.| (1 2 0) (:r-assoc :constr (:id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))))
(op |__?IdList+IntExp+IntList.FUNCONSTR| (|IntList..trs#2.| |IntList..trs#2.|) |IntList..trs#2.| (1 2 0) (:r-assoc :constr (:id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) :assoc))
(op |__?IdList+IntExp+IntList.FUNCONSTR| (|IdNeList..trs#3.| |IdList..trs#3.|) |IdNeList..trs#3.| (1 2 0) (:r-assoc :constr (:id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))))
(op |__?IdList+IntExp+IntList.FUNCONSTR| (|IdList..trs#3.| |IdList..trs#3.|) |IdList..trs#3.| (1 2 0) (:r-assoc :constr (:id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) :assoc))
(op |head_?IdList+IntExp+IntList.FUNCONSTR| (|IntNeList..trs#2.|) |Int.INT-VALUE| (1 0))
(op |head_?IdList+IntExp+IntList.FUNCONSTR| (|IdNeList..trs#3.|) |Id.QID| (1 0))
(op |tail_?IdList+IntExp+IntList.FUNCONSTR| (|IntNeList..trs#2.|) |IntList..trs#2.| (1 0))
(op |tail_?IdList+IntExp+IntList.FUNCONSTR| (|IdNeList..trs#3.|) |IdList..trs#3.| (1 0))
(op |IdNeList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |IdList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |nil/0?IdList+IntExp+IntList.FUNCONSTR| nil |IntList..trs#2.| nil (:constr))
(op |nil/0?IdList+IntExp+IntList.FUNCONSTR| nil |IdList..trs#3.| nil (:constr))
(op |\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|InitList..trs#1.|) |Nat.NAT-VALUE| (1 0))
(op |\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|IntList..trs#2.|) |Nat.NAT-VALUE| (1 0))
(op |\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|IdList..trs#3.|) |Nat.NAT-VALUE| (1 0))
(op |empty?_?BoolExp.EXP| (|InitList..trs#1.|) |Bool.TRUTH-VALUE| (0 1 0))
(op |empty?_?BoolExp.EXP| (|IntList..trs#2.|) |Bool.TRUTH-VALUE| (1 0))
(op |empty?_?BoolExp.EXP| (|IdList..trs#3.|) |Bool.TRUTH-VALUE| (1 0))
(op |IntExp/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |BoolExp/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |\\[\\[_\\]\\]_?BoolExp.EXP| (|BoolExp.EXP| |Env..trs#4.|) |Bool.TRUTH-VALUE| (1 0 2 0))
(op |\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|Fun.FUN| |IntList..trs#2.|) |Int.INT-VALUE| (1 0 2 0))
(op |\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|IntExp.EXP| |Env..trs#4.|) |Int.INT-VALUE| (1 0 2 0))
(op |if_then_else_endif?IdList+IntExp+IntList.FUNCONSTR| (|BoolExp.EXP| |IntExp.EXP| |IntExp.EXP|) |IntExp.EXP| (1 2 3 0))
(op |_=_?BoolExp.EXP| (|IntExp.EXP| |IntExp.EXP|) |BoolExp.EXP| (1 2 0))
(op |Env/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |Id/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op _-_ (|IntExp.EXP| |IntExp.EXP|) |IntExp.EXP| (1 2 0) (:r-assoc))
(op |NzInt/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |Int/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op _<_ (|IntExp.EXP| |IntExp.EXP|) |BoolExp.EXP| (1 2 0))
(op _*_ (|IntExp.EXP| |IntExp.EXP|) |IntExp.EXP| (1 2 0) (:r-assoc (:idr (:builtin-value 1 |NzNat.NZNAT-VALUE|)) :comm :assoc))
(op _+_ (|IntExp.EXP| |IntExp.EXP|) |IntExp.EXP| (1 2 0) (:r-assoc :comm :assoc))
(op |false/0| nil |Bool.TRUTH-VALUE| nil (:constr))
(op |true/0| nil |Bool.TRUTH-VALUE| nil (:constr))
(op |Bool/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |_and_| (|BoolExp.EXP| |BoolExp.EXP|) |BoolExp.EXP| (1 2 0))
(op |_and_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 2 0) (:r-assoc :comm :assoc))
(op |_and-also_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 0 2 0) (:r-assoc))
(op |_or_| (|BoolExp.EXP| |BoolExp.EXP|) |BoolExp.EXP| (1 2 0))
(op |_or_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 2 0) (:r-assoc :comm :assoc))
(op |_or-else_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 0 2 0) (:r-assoc))
(op |_xor_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 2 0) (:r-assoc :comm :assoc))
(op |not_| (|BoolExp.EXP|) |BoolExp.EXP| (1 0))
(op |not_| (|Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (0 1 0))
(op |_implies_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (0 1 2 0) (:r-assoc))
(op |_iff_| (|Bool.TRUTH-VALUE| |Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (0 1 2 0) (:r-assoc))
(op |NzNat/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |Nat/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |Zero/0| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |nilArr/0?Env..trs#4.| nil |Env..trs#4.| nil (:constr))
(op |put/3?Env..trs#4.| (|Id.QID| |Int.INT-VALUE| |Env..trs#4.|) |Env..trs#4.| (1 2 3 0))
(op |_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| (|Env..trs#4.| |Id.QID|) |Int.INT-VALUE| (1 0 2 0))
(op |_in_?BoolExp.EXP| (|Id.QID| |Env..trs#4.|) |Bool.TRUTH-VALUE| (2 0 1 0))
(op |undef/1?IdList+IntExp+IntList.FUNCONSTR| (|Id.QID|) |Int.INT-VALUE| (1 0))
(op |_;_?Stmt.STMT| (|Stmt.STMT| |Stmt.STMT|) |Stmt.STMT| (1 2 0) (:r-assoc :assoc))
(op |_:=_?Stmt.STMT| (|Id.QID| |IntExp.EXP|) |Stmt.STMT| (1 2 0))
(op |while_do_od?Stmt.STMT| (|BoolExp.EXP| |Stmt.STMT|) |Stmt.STMT| (1 2 0))
(op |\\[\\[_\\]\\]_?Env..trs#4.| (|InitList..trs#1.| |Env..trs#4.|) |Env..trs#4.| (1 0 2 0))
(op |\\[\\[_\\]\\]_?Env..trs#4.| (|Stmt.STMT| |Env..trs#4.|) |Env..trs#4.| (1 0 2 0))
(op |Stmt/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |_;_?InitList..trs#1.| (|InitList..trs#1.| |InitList..trs#1.|) |InitList..trs#1.| (1 2 0) (:r-assoc :constr (:id (|nil-init/0?InitList..trs#1.|)) :assoc))
(op |_;_?InitList..trs#1.| (|NeList..trs#1.| |InitList..trs#1.|) |NeList..trs#1.| (1 2 0) (:r-assoc :constr (:id (|nil-init/0?InitList..trs#1.|))))
(op |nil-init/0?InitList..trs#1.| nil |InitList..trs#1.| nil (:constr))
(op |NeList/0?SortId.CHAOS:PARSER| nil |SortId.CHAOS:PARSER| nil (:constr))
(op |head_?InitList..trs#1.| (|NeList..trs#1.|) |Init.FUNCONSTR| (1 0))
(op |tail_?InitList..trs#1.| (|NeList..trs#1.|) |InitList..trs#1.| (1 0))
(op |\\[\\[_\\]\\]\\[_\\]_?Env..trs#4.| (|?Fun.FUN| |?Env..trs#4.| |?IdList+IntExp+IntList.FUNCONSTR|) |?Env..trs#4.| (1 2 3 0))
(op |\\[\\[_:=_\\]\\]_?Env..trs#4.| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR| |?Env..trs#4.|) |?Env..trs#4.| (1 2 3 0))
(op |fun__isvars_body:_?Fun.FUN| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR| |?InitList..trs#1.| |?Stmt.STMT|) |?Fun.FUN| (1 2 3 4 0))
(op |_initially_?InitList..trs#1.| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?InitList..trs#1.| (1 2 0))
(op |__?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:r-assoc))
(op |head_?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |tail_?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|?InitList..trs#1.|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |empty?_?BoolExp.EXP| (|?InitList..trs#1.|) |?BoolExp.EXP| (1 0))
(op |empty?_?BoolExp.EXP| (|?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 0))
(op |\\[\\[_\\]\\]_?BoolExp.EXP| (|?BoolExp.EXP| |?Env..trs#4.|) |?BoolExp.EXP| (1 2 0))
(op |\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|?Fun.FUN| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op |\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR| |?Env..trs#4.|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op |if_then_else_endif?IdList+IntExp+IntList.FUNCONSTR| (|?BoolExp.EXP| |?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 3 0))
(op |_=_?BoolExp.EXP| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op -_ (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op _-_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:r-assoc))
(op |s_| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op _>=_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op _>_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op _<=_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op _<_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op |_quot_| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:l-assoc))
(op _*_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:r-assoc))
(op |d/2| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op _+_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:r-assoc))
(op |_and_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |_and-also_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |_or_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |_or-else_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |_xor_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |not_| (|?BoolExp.EXP|) |?BoolExp.EXP| (1 0))
(op |_implies_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |_iff_| (|?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 2 0) (:r-assoc))
(op |sd/2| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op |_quo_| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op |_rem_| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0) (:l-assoc))
(op |_divides_| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?BoolExp.EXP| (1 2 0))
(op |p_| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |put/3?Env..trs#4.| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR| |?Env..trs#4.|) |?Env..trs#4.| (1 2 3 0))
(op |_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| (|?Env..trs#4.| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 2 0))
(op |_in_?BoolExp.EXP| (|?IdList+IntExp+IntList.FUNCONSTR| |?Env..trs#4.|) |?BoolExp.EXP| (1 2 0))
(op |undef/1?IdList+IntExp+IntList.FUNCONSTR| (|?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |_;_?Stmt.STMT| (|?Stmt.STMT| |?Stmt.STMT|) |?Stmt.STMT| (1 2 0) (:r-assoc))
(op |_:=_?Stmt.STMT| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?Stmt.STMT| (1 2 0))
(op |while_do_od?Stmt.STMT| (|?BoolExp.EXP| |?Stmt.STMT|) |?Stmt.STMT| (1 2 0))
(op |\\[\\[_\\]\\]_?Env..trs#4.| (|?InitList..trs#1.| |?Env..trs#4.|) |?Env..trs#4.| (1 2 0))
(op |\\[\\[_\\]\\]_?Env..trs#4.| (|?Stmt.STMT| |?Env..trs#4.|) |?Env..trs#4.| (1 2 0))
(op |_;_?InitList..trs#1.| (|?InitList..trs#1.| |?InitList..trs#1.|) |?InitList..trs#1.| (1 2 0) (:r-assoc))
(op |head_?InitList..trs#1.| (|?InitList..trs#1.|) |?InitList..trs#1.| (1 0))
(op |tail_?InitList..trs#1.| (|?InitList..trs#1.|) |?InitList..trs#1.| (1 0))
(op |=/=-aux| (|?InitList..trs#1.| |?InitList..trs#1.|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?InitList..trs#1.| |?InitList..trs#1.|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?InitList..trs#1.| |?InitList..trs#1.|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?InitList..trs#1.| |?InitList..trs#1.|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?InitList..trs#1.| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?InitList..trs#1.| |?InitList..trs#1.|) |?InitList..trs#1.| (1 0))
(op |=/=-aux| (|?Env..trs#4.| |?Env..trs#4.|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?Env..trs#4.| |?Env..trs#4.|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?Env..trs#4.| |?Env..trs#4.|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?Env..trs#4.| |?Env..trs#4.|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?Env..trs#4.| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?Env..trs#4.| |?Env..trs#4.|) |?Env..trs#4.| (1 0))
(op |=/=-aux| (|?SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?SortId.CHAOS:PARSER| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?SortId.CHAOS:PARSER| |?SortId.CHAOS:PARSER|) |?SortId.CHAOS:PARSER| (1 0))
(op |=/=-aux| (|?BoolExp.EXP| |?BoolExp.EXP|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?BoolExp.EXP| |?BoolExp.EXP|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?BoolExp.EXP| |?BoolExp.EXP|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?BoolExp.EXP| |?BoolExp.EXP|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?BoolExp.EXP| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?BoolExp.EXP| |?BoolExp.EXP|) |?BoolExp.EXP| (1 0))
(op |=/=-aux| (|?Stmt.STMT| |?Stmt.STMT|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?Stmt.STMT| |?Stmt.STMT|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?Stmt.STMT| |?Stmt.STMT|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?Stmt.STMT| |?Stmt.STMT|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?Stmt.STMT| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?Stmt.STMT| |?Stmt.STMT|) |?Stmt.STMT| (1 0))
(op |=/=-aux| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?IdList+IntExp+IntList.FUNCONSTR| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?IdList+IntExp+IntList.FUNCONSTR| |?IdList+IntExp+IntList.FUNCONSTR|) |?IdList+IntExp+IntList.FUNCONSTR| (1 0))
(op |=/=-aux| (|?Fun.FUN| |?Fun.FUN|) |Bool.TRUTH-VALUE| (1 2 0))
(op |==-aux| (|?Fun.FUN| |?Fun.FUN|) |Bool.TRUTH-VALUE| (1 2 0))
(op _=/=_ (|?Fun.FUN| |?Fun.FUN|) |Bool.TRUTH-VALUE| (1 2 0))
(op _==_ (|?Fun.FUN| |?Fun.FUN|) |Bool.TRUTH-VALUE| (1 2 0))
(op |_:is_| (|?Fun.FUN| |SortId.CHAOS:PARSER|) |Bool.TRUTH-VALUE| (1 2 0))
(op |if_then_else_fi| (|?BoolExp.EXP| |?Fun.FUN| |?Fun.FUN|) |?Fun.FUN| (1 0))
(op |!if| (|Bool.TRUTH-VALUE|) |Bool.TRUTH-VALUE| (1 0))
(rule ((v |Env..trs#4.|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|nil-init/0?InitList..trs#1.|) v) v)
(rule ((v |Env..trs#4.|) (|INs| |InitList..trs#1.|) (e |IntExp.EXP|) (i |Id.QID|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_;_?InitList..trs#1.| (|_initially_?InitList..trs#1.| i e) |INs|) v) (|\\[\\[_\\]\\]_?Env..trs#4.| |INs| (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i e) v)))
(rule ((v |Env..trs#4.|) (n |Int.INT-VALUE|) (|Ns| |IntList..trs#2.|) (|Is| |IdList..trs#3.|) (i |Id.QID|)) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| (|__?IdList+IntExp+IntList.FUNCONSTR| i |Is|) (|__?IdList+IntExp+IntList.FUNCONSTR| n |Ns|) v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i n) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| |Is| |Ns| v)))
(rule ((v |Env..trs#4.|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) v) v)
(rule ((|Ns| |IntList..trs#2.|) (v |Env..trs#4.|) (s |Stmt.STMT|) (|Is| |IdList..trs#3.|) (f |Id.QID|)) (|\\[\\[_\\]\\]\\[_\\]_?Env..trs#4.| (|fun__isvars_body:_?Fun.FUN| f |Is| (|nil-init/0?InitList..trs#1.|) s) v |Ns|) (|\\[\\[_\\]\\]_?Env..trs#4.| s v))
(rule ((|Ns| |IntList..trs#2.|) (v |Env..trs#4.|) (s |Stmt.STMT|) (|INs| |InitList..trs#1.|) (|Is| |IdList..trs#3.|) (f |Id.QID|)) (|\\[\\[_\\]\\]\\[_\\]_?Env..trs#4.| (|fun__isvars_body:_?Fun.FUN| f |Is| |INs| s) v |Ns|) (|\\[\\[_\\]\\]_?Env..trs#4.| s (|\\[\\[_\\]\\]_?Env..trs#4.| |INs| (|\\[\\[_:=_\\]\\]_?Env..trs#4.| |Is| |Ns| v))))
(rule ((|Ns| |IntList..trs#2.|) (s |Stmt.STMT|) (|INs| |InitList..trs#1.|) (|Is| |IdList..trs#3.|) (f |Id.QID|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|fun__isvars_body:_?Fun.FUN| f |Is| |INs| s) |Ns|) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| (|\\[\\[_\\]\\]\\[_\\]_?Env..trs#4.| (|fun__isvars_body:_?Fun.FUN| f |Is| |INs| s) (|nilArr/0?Env..trs#4.|) |Ns|) f))
(rule ((v |Env..trs#4.|) (|Ns| |IntList..trs#2.|) (|Is| |IdList..trs#3.|)) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| |Is| |Ns| v) (|wrong#args/0?Env..trs#4.|) (((_=/=_ (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| |Is|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| |Ns|)) (|true/0|))))
(rule ((v |Env..trs#4.|) (i |Id.QID|) (|Ns| |IntList..trs#2.|) (n |Int.INT-VALUE|)) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| i (|__?IdList+IntExp+IntList.FUNCONSTR| n |Ns|) v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i n) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) |Ns| v)))
(rule ((v |Env..trs#4.|) (n |Int.INT-VALUE|) (i |Id.QID|)) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| i n v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i n) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) v)))
(rule ((v |Env..trs#4.|) (n |Int.INT-VALUE|) (|Is| |IdList..trs#3.|) (i |Id.QID|)) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| (|__?IdList+IntExp+IntList.FUNCONSTR| i |Is|) n v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i n) (|\\[\\[_:=_\\]\\]_?Env..trs#4.| |Is| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) v)))
(rule ((v |Env..trs#4.|) (e |IntExp.EXP|) (i |Id.QID|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_initially_?InitList..trs#1.| i e) v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|nil-init/0?InitList..trs#1.|) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i e) v)))
(rule nil (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil-init/0?InitList..trs#1.|)) (:builtin-value 0 |Zero.NAT-VALUE|))
(rule ((l |InitList..trs#1.|) (e |Init.FUNCONSTR|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|_;_?InitList..trs#1.| e l)) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| l)))
(rule ((e |Init.FUNCONSTR|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (:builtin-value 1 |NzNat.NZNAT-VALUE|))
(rule ((l |InitList..trs#1.|) (e |Init.FUNCONSTR|)) (|head_?InitList..trs#1.| (|_;_?InitList..trs#1.| e l)) e)
(rule ((l |InitList..trs#1.|) (e |Init.FUNCONSTR|)) (|tail_?InitList..trs#1.| (|_;_?InitList..trs#1.| e l)) l)
(rule ((l |InitList..trs#1.|)) (|empty?_?BoolExp.EXP| l) (_==_ l (|nil-init/0?InitList..trs#1.|)))
(rule ((y-id |NeList..trs#1.|)) (|_;_?InitList..trs#1.| y-id (|nil-init/0?InitList..trs#1.|)) y-id)
(rule ((x-id |InitList..trs#1.|)) (|_;_?InitList..trs#1.| (|nil-init/0?InitList..trs#1.|) x-id) x-id)
(rule ((y-id |InitList..trs#1.|)) (|_;_?InitList..trs#1.| y-id (|nil-init/0?InitList..trs#1.|)) y-id)
(rule ((e |Init.FUNCONSTR|)) (|tail_?InitList..trs#1.| e) (|nil-init/0?InitList..trs#1.|))
(rule ((e |Init.FUNCONSTR|)) (|head_?InitList..trs#1.| e) e)
(rule ((e |Init.FUNCONSTR|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil-init/0?InitList..trs#1.|))))
(rule ((v |Env..trs#4.|) (e |IntExp.EXP|) (i |Id.QID|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_:=_?Stmt.STMT| i e) v) (|put/3?Env..trs#4.| i (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) v))
(rule ((v |Env..trs#4.|) (|S'| |Stmt.STMT|) (s |Stmt.STMT|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|_;_?Stmt.STMT| s |S'|) v) (|\\[\\[_\\]\\]_?Env..trs#4.| |S'| (|\\[\\[_\\]\\]_?Env..trs#4.| s v)))
(rule ((v |Env..trs#4.|) (s |Stmt.STMT|) (b |BoolExp.EXP|)) (|\\[\\[_\\]\\]_?Env..trs#4.| (|while_do_od?Stmt.STMT| b s) v) (|if_then_else_fi| (|\\[\\[_\\]\\]_?BoolExp.EXP| b v) (|\\[\\[_\\]\\]_?Env..trs#4.| (|while_do_od?Stmt.STMT| b s) (|\\[\\[_\\]\\]_?Env..trs#4.| s v)) v))
(rule ((v |Env..trs#4.|) (n |Int.INT-VALUE|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| n v) n)
(rule ((v |Env..trs#4.|) (i |Id.QID|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| i v) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| v i))
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (_+_ e |E'|) v) (_+_ (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (_-_ e |E'|) v) (_-_ (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (_*_ e |E'|) v) (_*_ (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((v |Env..trs#4.|) (t |Bool.TRUTH-VALUE|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| t v) t)
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| (_<_ e |E'|) v) (_<_ (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| (|_=_?BoolExp.EXP| e |E'|) v) (_==_ (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((v |Env..trs#4.|) (|B'| |BoolExp.EXP|) (b |BoolExp.EXP|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| (|_and_| b |B'|) v) (|_and_| (|\\[\\[_\\]\\]_?BoolExp.EXP| b v) (|\\[\\[_\\]\\]_?BoolExp.EXP| |B'| v)))
(rule ((v |Env..trs#4.|) (|B'| |BoolExp.EXP|) (b |BoolExp.EXP|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| (|_or_| b |B'|) v) (|_or_| (|\\[\\[_\\]\\]_?BoolExp.EXP| b v) (|\\[\\[_\\]\\]_?BoolExp.EXP| |B'| v)))
(rule ((v |Env..trs#4.|) (b |BoolExp.EXP|)) (|\\[\\[_\\]\\]_?BoolExp.EXP| (|not_| b) v) (|not_| (|\\[\\[_\\]\\]_?BoolExp.EXP| b v)))
(rule ((v |Env..trs#4.|) (|E'| |IntExp.EXP|) (e |IntExp.EXP|) (b |BoolExp.EXP|)) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|if_then_else_endif?IdList+IntExp+IntList.FUNCONSTR| b e |E'|) v) (|if_then_else_fi| (|\\[\\[_\\]\\]_?BoolExp.EXP| b v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| e v) (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| |E'| v)))
(rule ((x-id |IntExp.EXP|)) (_*_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) x-id) x-id)
(rule ((a |Env..trs#4.|) (e |Int.INT-VALUE|) (i |Id.QID|)) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| (|put/3?Env..trs#4.| i e a) i) e)
(rule ((|I'| |Id.QID|) (a |Env..trs#4.|) (e |Int.INT-VALUE|) (i |Id.QID|)) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| (|put/3?Env..trs#4.| i e a) |I'|) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| a |I'|) (((_=/=_ i |I'|) (|true/0|))))
(rule ((i |Id.QID|)) (|_in_?BoolExp.EXP| i (|nilArr/0?Env..trs#4.|)) (|false/0|))
(rule ((i |Id.QID|) (a |Env..trs#4.|) (e |Int.INT-VALUE|) (|I'| |Id.QID|)) (|_in_?BoolExp.EXP| i (|put/3?Env..trs#4.| |I'| e a)) (|_or_| (_==_ i |I'|) (|_in_?BoolExp.EXP| i a)))
(rule ((i |Id.QID|) (a |Env..trs#4.|)) (|_\\[_\\]?IdList+IntExp+IntList.FUNCONSTR| a i) (|undef/1?IdList+IntExp+IntList.FUNCONSTR| i) (((|not_| (|_in_?BoolExp.EXP| i a)) (|true/0|))))
(rule ((j |Int.INT-VALUE|) (i |Int.INT-VALUE|)) (_-_ i j) (_+_ i (-_ j)))
(rule ((i |Int.INT-VALUE|)) (|s_| i) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) i))
(rule ((x-id |Int.INT-VALUE|)) (_*_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) x-id) x-id)
(rule ((x-id |Int.INT-VALUE|)) (_+_ (:builtin-value 0 |Zero.NAT-VALUE|) x-id) x-id)
(rule ((n |Nat.NAT-VALUE|)) (_*_ n (:builtin-value 0 |Zero.NAT-VALUE|)) (:builtin-value 0 |Zero.NAT-VALUE|))
(rule ((n |Nat.NAT-VALUE|)) (_<_ n (:builtin-value 0 |Zero.NAT-VALUE|)) (|false/0|))
(rule ((nn |NzNat.NZNAT-VALUE|)) (_<_ (:builtin-value 0 |Zero.NAT-VALUE|) nn) (|true/0|))
(rule ((nn |NzNat.NZNAT-VALUE|)) (_<=_ nn (:builtin-value 0 |Zero.NAT-VALUE|)) (|false/0|))
(rule ((n |Nat.NAT-VALUE|)) (_<=_ (:builtin-value 0 |Zero.NAT-VALUE|) n) (|true/0|))
(rule ((n |Nat.NAT-VALUE|)) (_>_ (:builtin-value 0 |Zero.NAT-VALUE|) n) (|false/0|))
(rule ((nn |NzNat.NZNAT-VALUE|)) (_>_ nn (:builtin-value 0 |Zero.NAT-VALUE|)) (|true/0|))
(rule ((nn |NzNat.NZNAT-VALUE|)) (_>=_ (:builtin-value 0 |Zero.NAT-VALUE|) nn) (|false/0|))
(rule ((n |Nat.NAT-VALUE|)) (_>=_ n (:builtin-value 0 |Zero.NAT-VALUE|)) (|true/0|))
(rule nil (|s_| (:builtin-value 0 |Zero.NAT-VALUE|)) (:builtin-value 1 |NzNat.NZNAT-VALUE|))
(rule ((x-id |Nat.NAT-VALUE|)) (_+_ (:builtin-value 0 |Zero.NAT-VALUE|) x-id) x-id)
(rule ((x-id |Nat.NAT-VALUE|)) (_*_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) x-id) x-id)
(rule ((x-id |NzNat.NZNAT-VALUE|)) (_*_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) x-id) x-id)
(rule ((a |Bool.TRUTH-VALUE|)) (|_and_| (|false/0|) a) (|false/0|))
(rule ((a |Bool.TRUTH-VALUE|)) (|_and_| (|true/0|) a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_and_| a a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_xor_| a a) (|false/0|))
(rule ((a |Bool.TRUTH-VALUE|)) (|_xor_| (|false/0|) a) a)
(rule ((a |Bool.TRUTH-VALUE|) (c |Bool.TRUTH-VALUE|) (b |Bool.TRUTH-VALUE|)) (|_and_| a (|_xor_| b c)) (|_xor_| (|_and_| a b) (|_and_| a c)))
(rule ((a |Bool.TRUTH-VALUE|)) (|_or_| a a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_or_| (|false/0|) a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_or_| (|true/0|) a) (|true/0|))
(rule ((b |Bool.TRUTH-VALUE|) (a |Bool.TRUTH-VALUE|)) (|_or_| a b) (|_xor_| (|_and_| a b) (|_xor_| a b)))
(rule ((a |Bool.TRUTH-VALUE|)) (|not_| a) (|_xor_| a (|true/0|)))
(rule ((b |Bool.TRUTH-VALUE|) (a |Bool.TRUTH-VALUE|)) (|_implies_| a b) (|_xor_| (|_and_| a b) (|_xor_| a (|true/0|))))
(rule ((b |Bool.TRUTH-VALUE|) (a |Bool.TRUTH-VALUE|)) (|_iff_| a b) (|_xor_| a (|_xor_| b (|true/0|))))
(rule ((a |Bool.TRUTH-VALUE|)) (|_and-also_| a (|false/0|)) (|false/0|))
(rule ((a |Bool.TRUTH-VALUE|)) (|_and-also_| (|false/0|) a) (|false/0|))
(rule ((a |Bool.TRUTH-VALUE|)) (|_and-also_| a (|true/0|)) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_and-also_| (|true/0|) a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_and-also_| a a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_or-else_| (|false/0|) a) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_or-else_| a (|false/0|)) a)
(rule ((a |Bool.TRUTH-VALUE|)) (|_or-else_| (|true/0|) a) (|true/0|))
(rule ((a |Bool.TRUTH-VALUE|)) (|_or-else_| a (|true/0|)) (|true/0|))
(rule nil (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) (:builtin-value 0 |Zero.NAT-VALUE|))
(rule ((l |IdList..trs#3.|) (e |Id.QID|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| l)))
(rule ((e |Id.QID|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (:builtin-value 1 |NzNat.NZNAT-VALUE|))
(rule ((l |IdList..trs#3.|) (e |Id.QID|)) (|head_?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) e)
(rule ((l |IdList..trs#3.|) (e |Id.QID|)) (|tail_?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) l)
(rule ((l |IdList..trs#3.|)) (|empty?_?BoolExp.EXP| l) (_==_ l (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)))
(rule ((y-id |IdNeList..trs#3.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| y-id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) y-id)
(rule ((x-id |IdList..trs#3.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) x-id) x-id)
(rule ((y-id |IdList..trs#3.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| y-id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) y-id)
(rule ((e |Id.QID|)) (|tail_?IdList+IntExp+IntList.FUNCONSTR| e) (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))
(rule ((e |Id.QID|)) (|head_?IdList+IntExp+IntList.FUNCONSTR| e) e)
(rule ((e |Id.QID|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))))
(rule nil (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) (:builtin-value 0 |Zero.NAT-VALUE|))
(rule ((l |IntList..trs#2.|) (e |Int.INT-VALUE|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| l)))
(rule ((e |Int.INT-VALUE|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (:builtin-value 1 |NzNat.NZNAT-VALUE|))
(rule ((l |IntList..trs#2.|) (e |Int.INT-VALUE|)) (|head_?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) e)
(rule ((l |IntList..trs#2.|) (e |Int.INT-VALUE|)) (|tail_?IdList+IntExp+IntList.FUNCONSTR| (|__?IdList+IntExp+IntList.FUNCONSTR| e l)) l)
(rule ((l |IntList..trs#2.|)) (|empty?_?BoolExp.EXP| l) (_==_ l (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)))
(rule ((y-id |IntNeList..trs#2.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| y-id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) y-id)
(rule ((x-id |IntList..trs#2.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|) x-id) x-id)
(rule ((y-id |IntList..trs#2.|)) (|__?IdList+IntExp+IntList.FUNCONSTR| y-id (|nil/0?IdList+IntExp+IntList.FUNCONSTR|)) y-id)
(rule ((e |Int.INT-VALUE|)) (|tail_?IdList+IntExp+IntList.FUNCONSTR| e) (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))
(rule ((e |Int.INT-VALUE|)) (|head_?IdList+IntExp+IntList.FUNCONSTR| e) e)
(rule ((e |Int.INT-VALUE|)) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| e) (_+_ (:builtin-value 1 |NzNat.NZNAT-VALUE|) (|\|_\|?IdList+IntExp+IntList.FUNCONSTR| (|nil/0?IdList+IntExp+IntList.FUNCONSTR|))))
(rule ((x |InitList..trs#1.|)) (|_:is_| x (|InitList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Env..trs#4.|)) (|_:is_| x (|Env/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Id.QID|)) (|_:is_| x (|Id/0|)) (|true/0|))
(rule ((x |NzNat.NZNAT-VALUE|)) (|_:is_| x (|NzNat/0|)) (|true/0|))
(rule ((x |Bool.TRUTH-VALUE|)) (|_:is_| x (|Bool/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Nat.NAT-VALUE|)) (|_:is_| x (|Nat/0|)) (|true/0|))
(rule ((x |Zero.NAT-VALUE|)) (|_:is_| x (|Zero/0|)) (|true/0|))
(rule ((x |Int.INT-VALUE|)) (|_:is_| x (|Int/0|)) (|true/0|))
(rule ((x |NzInt.INT-VALUE|)) (|_:is_| x (|NzInt/0|)) (|true/0|))
(rule ((x |IntExp.EXP|)) (|_:is_| x (|IntExp/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |BoolExp.EXP|)) (|_:is_| x (|BoolExp/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Stmt.STMT|)) (|_:is_| x (|Stmt/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |IdList..trs#3.|)) (|_:is_| x (|IdList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |IdNeList..trs#3.|)) (|_:is_| x (|IdNeList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |IntList..trs#2.|)) (|_:is_| x (|IntList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |IntNeList..trs#2.|)) (|_:is_| x (|IntNeList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Init.FUNCONSTR|)) (|_:is_| x (|Init/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |NeList..trs#1.|)) (|_:is_| x (|NeList/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |Fun.FUN|)) (|_:is_| x (|Fun/0?SortId.CHAOS:PARSER|)) (|true/0|))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?InitList..trs#1.|) (y |?InitList..trs#1.|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?Env..trs#4.|) (y |?Env..trs#4.|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?SortId.CHAOS:PARSER|) (y |?SortId.CHAOS:PARSER|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?BoolExp.EXP|) (y |?BoolExp.EXP|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?Stmt.STMT|) (y |?Stmt.STMT|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?IdList+IntExp+IntList.FUNCONSTR|) (y |?IdList+IntExp+IntList.FUNCONSTR|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|!if| (|=/=-aux| x y)) (|true/0|))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|!if| (|==-aux| x y)) (|false/0|))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|=/=-aux| x y) (|false/0|) ((x y)))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (_=/=_ x y) (|!if| (|=/=-aux| x y)))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|==-aux| x y) (|true/0|) ((x y)))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (_==_ x y) (|!if| (|==-aux| x y)))
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|if_then_else_fi| (|false/0|) x y) y)
(rule ((x |?Fun.FUN|) (y |?Fun.FUN|)) (|if_then_else_fi| (|true/0|) x y) x)
(rule nil (|!if| (|false/0|)) (|false/0|))
(rule nil (|!if| (|true/0|)) (|true/0|))
(stat on)
(compile)
(reduce (|\\[\\[_\\]\\]_?IdList+IntExp+IntList.FUNCONSTR| (|fun__isvars_body:_?Fun.FUN| (:builtin-value |pow| |Id.QID|) (|__?IdList+IntExp+IntList.FUNCONSTR| (:builtin-value |n| |Id.QID|) (:builtin-value |m| |Id.QID|)) (|_initially_?InitList..trs#1.| (:builtin-value |pow| |Id.QID|) (:builtin-value 1 |NzNat.NZNAT-VALUE|)) (|while_do_od?Stmt.STMT| (_<_ (:builtin-value 0 |Zero.NAT-VALUE|) (:builtin-value |n| |Id.QID|)) (|_;_?Stmt.STMT| (|_:=_?Stmt.STMT| (:builtin-value |pow| |Id.QID|) (_*_ (:builtin-value |pow| |Id.QID|) (:builtin-value |m| |Id.QID|))) (|_:=_?Stmt.STMT| (:builtin-value |n| |Id.QID|) (_-_ (:builtin-value |n| |Id.QID|) (:builtin-value 1 |NzNat.NZNAT-VALUE|)))))) (|__?IdList+IntExp+IntList.FUNCONSTR| (:builtin-value 4 |NzNat.NZNAT-VALUE|) (:builtin-value 2 |NzNat.NZNAT-VALUE|))))