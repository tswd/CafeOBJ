;;; -*- Mode:Lisp; Syntax:Common-Lisp -*-

;;;*****************************************************************************
;;;         コマンドおよびスイッチの説明提示用オンラインヘルプ DB
;;;*****************************************************************************
;;; * 各エントリは下のフォーマット:
;;;   (<コマンドパターン> "<構文>" "<簡易説明>" "<詳細説明>")
;;;
;;; <コマンドパターン> ::= コマンド名 | "(" キーワード キーワード ... ")"
;;; <構文>、<簡易説明>、<詳細説明>は Common Lisp の format 関数の書式テンプレートの
;;; 構文に準ずる。ただし引数を取ることはできない。
;;; 

;;; *** TODO ***
;;; a. 全スイッチ、全コマンドについてのエントリ追加
;;; b. 詳細説明の追加
;;; ************

;;; ********
;;; switches -------------------------------------------------------------------
;;; ********

((trace whole)
 "set trace whole {on | off}"
 "trace rewrite step."
 "このスイッチがONの時、トップレベルの書き換えトレースが出力されます。~%~
         つらつらと説明書き.")

(trace
 "set trace {on | off}"
 "trace every rewrite step."
 "")

(step
 "set step {on | off}"
 "stepwise rewriting process."
 "")

(memo
 "set memo {on | off}"
 "enable term memoization."
 "")

((always memo)
 "set always memo {on | off}"
 "implicitly set 'memo' attributes to user defined operators."
 "")

((clean memo)
 "set clean memo {on | off}"
 "clean up term memo table before normalization."
 "")

(statistics
 "set statistics {on | off}"
 "show statistics data after reduction."
 "")
(stats
 "set stat {on | off}"
 "synonym of 'statistics' swith, show statistics data after reduction."
 "")

((rewrite limit)
 "set rewrite limit <number>"
 "maximum number of rewriting."
 "")

((rwt limit)
 "set rwt liit <number>"
 "sinonym of 'rewrite limit' switch, maximum number of rewriting."
 "")

((stop pattern)
 "set stop pattern <term>"
 "stop rewriting when meets the pattern(term)."
 "")

((reduce conditions)
 "set reduce conditions {on | off}"
 "reduce condition part in \"apply\" command."
 "")

((exec trace)
 "set exec trace {on | off}"
 "if on, trace concurrent execution."
 "")

((exec normalize)
 "set exec normalize {on | off}"
 "if on, reduce term before and after each transition."
 "")

((exec limit)
 "set exec limit <number>"
 "limit maximum number of concurrent execution."
 "")

((include BOOL)
 "set include BOOL {on | off}"
 "import BOOL implicitly."
 "")

((include RWL)
 "set include RWL {on | off}"
 "import RWL implicitly."
 "")

((include FOPL-CLAUSE)
 "set include FOPL-CLAUSE {on | off}"
 "import FOPL-CLAUSE implicitly."
 "")

((auto context)
 "set auto context {on |off}"
 "automatic change current context(module)."
 "")

((regularize signature)
 "set regularize signature {on | off}"
 "regularize module signature in automatic."
 "")

((reg signature)
 "set reg signature {on | off}"
 "synonym of 'regularize signature,~%  ~
  regularize module signature in automatic."
 "")

((check import)
 "set check import {on | off}"
 "check conflicting importing mode of submodules."
 "")

((check regularity)
 "set check regularity {on | off}"
 "perform regularity check of signatures in automatic."
 "")

((check compatibility)
 "set check compatibility {on | off}"
 "perform compatibility check of TRS in automatic."
 "")

((check builtin)
 "set check builtin {on | off}"
 "perform operator overloading check with builtin sorts."
 "")

((select term)
 "set select term {on | off}"
 "allow users to select a term from anbiguously parsed terms."
 "")

(verbose
 "set verbose {on | off}"
 "set verbose mode."
 "")

(quiet
 "set quiet {on | off}"
 "be quiet."
 "")

((show mode)
 "set show mode {:cafeobj | :chaos}"
 "set syntax of printed modules or views, .e.t.c."
 "")

((show var sorts)
 "set show var sorts {on | off}"
 "if on, variables are printed with their sorts."
 "")

((print mode)
 "set print mode {:fancy | :tree | :s-expr}"
 "set term print form."
 "")

(libpath
 "set libpath <library_path>"
 "set file search path. `set libpath + path-list' adds search path."
 "")

((print depth)
 "set print depth <number>"
 "max depth of terms to be printed."
 "")

((accept =*= proof)
 "set accept =*= proof {on | off}"
 "accept system's automatic proof of congruency of =*=."
 "")

((find all rules)
 "set find all rules {on | off}"
 "find rewrite rules for all occurrences of given term in 'find' command."
 "")

;;; ******************
;;; top level commands --------------------------------------------------------
;;; ******************
(show
 "show"
 ""
 "")

;;; EOF

