;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: nznat.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-nznat ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "NZNAT" :object :system
			((%import :protecting "NZNAT-VALUE" nil)
			 (%import :protecting "BOOL" nil)
			 (%psort-decl (%sort-ref "NzNat" nil))
			 (%op-decl ("_" "+" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "+" "_") nil 2)
			  (%opattrs (:assoc :comm) nil 33 nil nil
				    nil nil t))
			 (%op-decl ("d")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("d") nil 2)
			  (%opattrs (:comm) nil nil nil nil nil nil t))
			 (%op-decl ("_" "*" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "*" "_") nil 2)
			  (%opattrs (:assoc :comm (:idr "1")) nil 31
				    nil nil nil nil t))
			 (%op-decl ("_" "quot" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "quot" "_") nil 2)
			  (%opattrs nil :l-assoc 31 nil nil nil nil t))
			 (%op-decl ("_" "<" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "<" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" "<=" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "<=" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" ">" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" ">" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("_" ">=" "_")
			  ((%sort-ref "NzNat" nil)
			   (%sort-ref "NzNat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" ">=" "_") nil 2)
			  (%opattrs nil nil 51 nil nil nil nil t))
			 (%op-decl ("s" "_") ((%sort-ref "NzNat" nil))
			  (%sort-ref "NzNat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("s" "_") nil 1)
			  (%opattrs nil nil 15 nil nil nil nil t))
			 (%var-decl ("NN" "NM") (%sort-ref "NzNat" nil))
			 (%axiom-decl :equation (":BDEMOD") ("NN" "+" "NM")
			  ((%slisp (+ nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD")
			  ("d" "(" "NN" "," "NM" ")")
			  ((%slisp (if (= nn nm) 1 (abs (- nn nm)))))
			  nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "*" "NM")
			  ((%slisp (* nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "quot" "NM")
			  ((%slisp (if (> nn nm) (truncate nn nm) 1)))
			  nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "<" "NM")
			  ((%slisp (< nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" "<=" "NM")
			  ((%slisp (<= nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" ">" "NM")
			  ((%slisp (> nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("NN" ">=" "NM")
			  ((%slisp (>= nn nm))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("s" "NN")
			  ((%slisp (1+ nn))) nil nil))))
    (eval-ast-if-need '(%protect ("NZNAT") :set))
    (eval-ast-if-need '(%provide "NZAT"))
    (eval-ast-if-need '(%provide "nznat"))
    ))

(defun chaos-nznat-tram-interface ()
  (setq *z-nznat* (get-z-module-or-panic "NZNAT"))
  (pushnew *z-nznat* *tram-builtin-modules*))

(eval-when (eval load)
  (chaos-install-nznat)
  (chaos-nznat-tram-interface)
  )
;;; EOF

