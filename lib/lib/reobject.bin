;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: reobject.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-record-object ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "AVPAIR" :object :system
			((%sort-decl (%sort-ref "AttrId" nil) nil)
			 (%sort-decl (%sort-ref "AttrValue" nil) nil)
			 (%subsort-decl
			  (nil (%sort-ref "Attribute" nil) :<
			       (%sort-ref "Attributes" nil)))
			 (%op-decl ("_" "=" "_")
			  ((%sort-ref "AttrId" nil)
			   (%sort-ref "AttrValue" nil))
			  (%sort-ref "Attribute" nil)
			  (%opattrs nil nil 49 nil nil t nil)
			  nil)
			 (%op-decl ("attr-null") nil
			  (%sort-ref "Attribute" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%op-decl ("_" "," "_")
			  ((%sort-ref "Attributes" nil)
			   (%sort-ref "Attributes" nil))
			  (%sort-ref "Attributes" nil)
			  (%opattrs
			   (:assoc :comm (:id "attr-null"))
			   nil 63 nil nil t nil)
			  nil)
			 )))
    (eval-ast-if-need '(%protect ("AVPAIR") :set))
    (eval-ast-if-need '(%module-decl "RECORD-STRUCTURE" :object :system
			((%import :protecting "AVPAIR" nil)
			 (%sort-decl (%sort-ref "RecordId" nil) nil)
			 (%sort-decl (%sort-ref "RecordInstance" nil)
			  nil)
			 (%op-decl ("*VoidRecord*") nil
			  (%sort-ref "RecordInstance" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%op-decl ("_" "{" "_" "}")
			  ((%sort-ref "RecordId" nil)
			   (%sort-ref "Attributes" nil))
			  (%sort-ref "RecordInstance" nil)
			  (%opattrs nil nil nil nil nil t nil)
			  nil)
			 (%op-decl ("_" "{" "}")
			  ((%sort-ref "RecordId" nil))
			  (%sort-ref "RecordInstance" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%opattr-decl (%opref ("_" "{" "_" "}") nil 2)
			  (%opattrs nil nil 0 nil nil nil nil))
			 (%opattr-decl (%opref ("_" "{" "}") nil 1)
			  (%opattrs nil nil 0 nil nil nil nil)))))
    (eval-ast-if-need '(%protect ("RECORD-STRUCTURE") :set))
    (eval-ast-if-need '(%module-decl "OBJECT-ID" :object :system
			((%import :protecting "CHAOS:IDENTIFIER" nil)
			 (%subsort-decl
			  (nil (%sort-ref "Identifier" nil) :<
			       (%sort-ref "ObjectId" nil))))))
    (eval-ast-if-need '(%protect ("OBJECT-ID") :set))
    (install-object-id)
    (eval-ast-if-need '(%module-decl "OBJECT" :object :system
			((%import :extending "OBJECT-ID" nil)
			 (%import :protecting "BOOL" nil)
			 (%import :extending "AVPAIR" nil)
			 (%sort-decl (%sort-ref "ClassId" nil) nil)
			 (%sort-decl (%sort-ref "Message" nil) nil)
			 (%sort-decl (%sort-ref "Object" nil) nil)
			 (%op-decl ("<" "_" ":" "_" "|" "_" ">")
			  ((%sort-ref "ObjectId" nil)
			   (%sort-ref "ClassId" nil)
			   (%sort-ref "Attributes" nil))
			  (%sort-ref "Object" nil)
			  (%opattrs nil nil nil nil nil t nil)
			  nil)
			 (%opattr-decl
			  (%opref ("<" "_" ":" "_" "|" "_" ">") nil
				  3)
			  (%opattrs nil nil 0 nil nil nil nil))
			 (%op-decl ("<" "_" ":" "_" ">")
			  ((%sort-ref "ObjectId" nil)
			   (%sort-ref "ClassId" nil))
			  (%sort-ref "Object" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%opattr-decl
			  (%opref ("<" "_" ":" "_" ">") nil 2)
			  (%opattrs nil nil 0 nil nil nil nil))
			 (%op-decl ("<" "_" ">")
			  ((%sort-ref "ObjectId" nil))
			  (%sort-ref "Object" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%opattr-decl (%opref ("<" "_" ">") nil 1)
			  (%opattrs nil nil 0 nil nil nil nil))
			 (%op-decl ("*VoidObject*") nil
			  (%sort-ref "Object" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%op-decl ("delete" "_")
			  ((%sort-ref "Object" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil)
			  nil)
			 (%axiom-decl :equation (|find-instance|)
			  ("<" "Id:ObjectId" ":" "C:ClassId" ">")
			  ((%glisp (or
				    (find-instance id
						   (term-sort *self*))
				    *void-object*)))
			  nil nil)
			 (%axiom-decl :equation (|find-instnace-2|)
			  ("<" "Id:ObjectId" ">")
			  ((%glisp (or (find-instance id)
				       *void-object*)))
			  nil nil)
			 (%axiom-decl :rule (|delete-instance|)
			  ("delete" "O:Object")
			  ((%glisp (if (delete-instance o)
				       *bool-true* *bool-false*)))
			  nil nil))))
    (eval-ast-if-need '(%protect ("OBJECT") :set))
    (eval-ast-if-need '(%module-decl "STATE-CONFIGURATION" :object :system
			((%import :extending "OBJECT" nil)
			 (%sort-decl (%sort-ref "Configuration" nil)
			  nil))))
    (eval-ast-if-need '(%protect ("STATE-CONFIGURATION") :set))
    (eval-ast-if-need '(%module-decl "ACZ-CONFIGURATION" :object :system
			((%import :extending "STATE-CONFIGURATION" nil)
			 (%subsort-decl
			  (nil (%sort-ref "Object" nil)
			       (%sort-ref "Message" nil) :<
			       (%sort-ref "ACZ-Configuration" nil) :<
			       (%sort-ref "Configuration" nil)))
			 (%op-decl ("acz-empty") nil
			  (%sort-ref "ACZ-Configuration" nil)
			  (%opattrs nil nil nil nil nil t nil)
			  nil)
			 (%op-decl ("_" "_")
			  ((%sort-ref "ACZ-Configuration" nil)
			   (%sort-ref "ACZ-Configuration" nil))
			  (%sort-ref "ACZ-Configuration" nil)
			  (%opattrs (:assoc :comm (:id "acz-empty"))
				    nil nil nil nil t nil)
			  nil))))
    (eval-ast-if-need '(%protect ("ACZ-CONFIGURATION") :set))
    (install-record-object)
    (eval-ast-if-need '(%provide "AVPAIR"))
    (eval-ast-if-need '(%provide "RECORD-STRUCTURE"))
    (eval-ast-if-need '(%provide "OBJECT-ID"))
    (eval-ast-if-need '(%provide "OBJECT"))
    (eval-ast-if-need '(%provide "ACZ-CONFIGURATION"))
    (eval-ast-if-need '(%provide "reobject"))
    ))

(eval-when (eval load)
  (let ((*chaos-quiet* t))
    (chaos-install-record-object))
  )

;;; EOF

