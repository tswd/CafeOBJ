;CHAOS_BINS_____
;;;-*- Mode:LISP: Package: CHAOS; Base:10: Syntax:Common-lisp -*-
;;; $Id: rat.bin,v 1.2 2007-01-24 10:03:39 sawada Exp $
;;; 
(in-package :chaos)
(defun chaos-install-rat ()
  (let ((*dribble-ast* nil)
	(*ast-log* nil)
	(*last-module* nil)
	(*current-module* nil)
	(*include-bool* nil)
	(*include-rwl* nil)
	(*regularize-signature* nil))
    (declare (special *dribble-ast* *ast-log*
		      *last-module* *current-module*
		      *include-bool* *include-rwl*
		      *regularize-signature*))
    (eval-ast-if-need '(%module-decl "RAT" :object :system
			((%import :protecting "INT" nil)
			 (%import :protecting "RAT-VALUE" nil)
			 (%psort-decl (%sort-ref "Rat" nil))
			 (%op-decl ("-" "_") ((%sort-ref "Rat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs nil nil 15 nil nil nil nil t)
			  nil)
			 (%op-decl ("-" "_") ((%sort-ref "NzRat" nil))
			  (%sort-ref "NzRat" nil)
			  (%opattrs nil nil 15 nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "+" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs ((:idr "0")) nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "-" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "*" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "/" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "NzRat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%opattr-decl (%opref ("_" "/" "_") nil 2)
			  (%opattrs nil :l-assoc 31 nil nil nil nil t))
			 (%op-decl ("_" "/" "_")
			  ((%sort-ref "NzRat" nil)
			   (%sort-ref "NzRat" nil))
			  (%sort-ref "NzRat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "rem" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "NzRat" nil))
			  (%sort-ref "Rat" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" "<=" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%op-decl ("_" ">=" "_")
			  ((%sort-ref "Rat" nil)
			   (%sort-ref "Rat" nil))
			  (%sort-ref "Bool" nil)
			  (%opattrs nil nil nil nil nil nil nil t)
			  nil)
			 (%var-decl ("R" "S") (%sort-ref "Rat" nil))
			 (%var-decl ("NS") (%sort-ref "NzRat" nil))
			 (%axiom-decl :equation (":BDEMOD") ("R" "+" "S")
			  ((%slisp (+ r s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("-" "R")
			  ((%slisp (- r))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "-" "S")
			  ("R" "+" "(" "-" "S" ")") nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "*" "S")
			  ((%slisp (* r s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "/" "NS")
			  ((%slisp (/ r ns))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "rem" "NS")
			  ((%slisp (rem r ns))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "<" "S")
			  ((%slisp (< r s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" "<=" "S")
			  ((%slisp (<= r s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" ">" "S")
			  ((%slisp (> r s))) nil nil)
			 (%axiom-decl :equation (":BDEMOD") ("R" ">=" "S")
			  ((%slisp (>= r s))) nil nil))))
    (eval-ast-if-need '(%protect ("RAT") :set))
    (eval-ast-if-need '(%provide "RAT"))
    (eval-ast-if-need '(%provide "rat"))
    ))

(defun chaos-rat-tram-interface ()
  (setq *z-rat* (get-z-module-or-panic "RAT"))
  (push *z-rat* *tram-builtin-modules*)
  )

(eval-when (eval load)
  (chaos-install-rat)
  (chaos-rat-tram-interface))

;;; EOF
