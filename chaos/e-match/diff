2c2
< ;;; $Id: diff,v 1.1.1.1 2003-06-19 08:28:01 sawada Exp $
---
> ;;; $Id: diff,v 1.1.1.1 2003-06-19 08:28:01 sawada Exp $
15c15
< ;;;
---
> ;;; Copyright 1988,1991 SRI International.
205c205,206
< 	      (dotimes-fixnum (x n)
---
> 	      (dotimes (x n)
> 		(delcare (type fixnum x))
224,228c225
<   ` (if .acz-state-pool.
< 	(let ((state (pop .acz-state-pool.)))
< 	  (dotimes (x 26)
< 	    (setf (svref state x) nil))
< 	  state)
---
>   ` (if .acz-state-pool. (pop .acz-state-pool.)
235a233
> 
237a236
> 
254c253
< 	  (*print-circle* t))
---
> 	  (*print-circle* nil))
419c418,419
< 	       (dotimes-fixnum (j lhs-v-count)
---
> 	       (dotimes (j lhs-v-count)
> 		 (declare (type fixnum j lhs-v-cont))
424c424,425
< 	       (dotimes-fixnum (j lhs-f-count) ; (then of f's)
---
> 	       (dotimes (j lhs-f-count) ; (then of f's)
> 		 (decalre (type fixnum j lhs-f-count))
429c430,431
< 	       (dotimes-fixnum (i rhs-c-count)
---
> 	       (dotimes (i rhs-c-count)
> 		 (declare (type fixnum i rhs-c-count))
433c435,436
< 		   (dotimes-fixnum (j lhs-v-count)
---
> 		   (dotimes (j lhs-v-count)
> 		     (declare (type fixnum j lhs-v-count))
443c446,447
< 	       (dotimes-fixnum (i rhs-f-count)
---
> 	       (dotimes (i rhs-f-count)
> 		 (declare (type fixnum i rhs-f-count))
447c451,452
< 		   (dotimes-fixnum (j lhs-v-count)
---
> 		   (dotimes (j lhs-v-count)
> 		     (declare (type fixnum j lhs-v-count))
456c461,462
< 		   (dotimes-fixnum (j lhs-f-count)
---
> 		   (dotimes (j lhs-f-count)
> 		     (declare (type fixnum j lhs-f-count))
469c475,476
< 	       (dotimes-fixnum (i rhs-c-count)
---
> 	       (dotimes (i rhs-c-count)
> 		 (declare (type fixnum i rhs-c-count))
483c490,491
< 	       (dotimes-fixnum (i rhs-f-count)
---
> 	       (dotimes (i rhs-f-count)
> 		 (declare (type fixnum i rhs-f-count))
504c512,513
< 		     (dotimes-fixnum (s rhs-c-count)
---
> 		     (dotimes (s rhs-c-count)
> 		       (declare (type fixnum s rhs-c-count))
536,538c545,548
< 	       ;;	  (setf (match-ACZ-state-p state) 'match-ACZ-state)
< 	       ;;	  (when *on-debug* (format t "~&acz-init: state=~&")
< 	       ;;		(match-ACZ-unparse-match-ACZ-state state))
---
> 	       ;;
> 	       (when *match-debug* (format t "~&acz-init: state=~&")
> 		     (match-ACZ-unparse-match-ACZ-state state))
> 	       ;;
544c554
<   (when *on-debug* (format t "~&acz-next: ")
---
>   (when *match-debug* (format t "~&acz-next: ")
586c596,597
< 				  (dotimes-fixnum (i (array-dimension lhs-v 0) t)
---
> 				  (dotimes (i (array-dimension lhs-v 0) t)
> 				    (declare (type fixnum i))
609c620,621
< 		     (dotimes-fixnum (s rhs-f-count)
---
> 		     (dotimes (s rhs-f-count)
> 		       (declare (type fixnum s rhs-f-count))
647c659,660
< 	     (dotimes-fixnum (s rhs-c-count)
---
> 	     (dotimes (s rhs-c-count)
> 	       (declare (type fixnum s rhs-c-count))
667c680
< 
---
> #||
671c684
<   ` (dotimes-fixnum (j (array-dimension ,rhs-sol__*? 0))
---
>   ` (dotimes (j (array-dimension ,rhs-sol__*? 0))
677c690
<   ` (dotimes-fixnum (i (array-dimension ,lhs__?? 0))
---
>   ` (dotimes (i (array-dimension ,lhs__?? 0))
680c693
<           (progn 
---
>           (let ((?zero (term-make-zero (%svref ops (cdr (%svref ,lhs__?? i))))))
685,690c698,704
< 	    (add-equation-to-m-system
< 	     new-sys 
< 	     (make-equation (car (%svref ,lhs__?? i))
< 			    (if (null rhs-subterms)
< 				(term-make-zero (%svref ops (cdr (%svref ,lhs__?? i))))
< 				(if (cdr rhs-subterms) ; implies length is
---
> 	    (if ?zero
> 		(add-equation-to-m-system
> 		 new-sys 
> 		 (make-equation (car (%svref ,lhs__?? i))
> 				(if (null rhs-subterms)
> 				    ?zero
> 				    (if (cdr rhs-subterms) ; implies length is
692,694c706,711
< 				    (make-right-assoc-normal-form-with-sort-check
< 				     (%svref ops (cdr (%svref ,lhs__?? i))) rhs-subterms)
< 				    (first rhs-subterms)))))))))
---
> 					(make-right-assoc-normal-form-with-sort-check
> 					 (%svref ops
> 						 (cdr (%svref ,lhs__?? i)))
> 					 rhs-subterms)
> 					(first rhs-subterms)))))
> 		nil)))))
695a713
> ||#
715c733,765
<     (match-ACZ-collapse-arrays-internal lhs-v 1) 
---
>     ;; (match-ACZ-collapse-arrays-internal lhs-v 1)
>     (dotimes (i (array-dimension lhs-v 0))
>       (declare (type fixnum i))
>       (if (< i 1)
>           nil
>           (let ((?zero (term-make-zero (%svref ops (cdr (%svref lhs-v i))))))
> 	    (setq rhs-subterms nil)
> 	    (setq term-code (* 2 term-code))
> 	    ;; (match-ACZ-collapse-one-array-internal rhs-c-sol rhs-c)
> 	    (dotimes (j (array-dimension rhs-c-sol 0))
> 	      (declare (type fixnum j))
>               (when (> (logand (the fixnum (aref rhs-c-sol j)) term-code) 0)
> 		(push  (car (%svref rhs-c j)) rhs-subterms)))
> 	    ;; (match-ACZ-collapse-one-array-internal rhs-f-sol rhs-f)
> 	    (dotimes (j (array-dimension rhs-f-sol 0))
> 	      (declare (type fixnum j))
>               (when (> (logand (the fixnum (aref rhs-f-sol j)) term-code) 0)
> 		(push  (car (%svref rhs-f j)) rhs-subterms)))
> 	    ;;
> 	    (if ?zero
> 		(add-equation-to-m-system
> 		 new-sys 
> 		 (make-equation (car (%svref lhs-v i))
> 				(if (null rhs-subterms)
> 				    ?zero
> 				    (if (cdr rhs-subterms) ; implies length is
> 					; greater than 1 
> 					(make-right-assoc-normal-form-with-sort-check
> 					 (%svref ops
> 						 (cdr (%svref lhs-v i)))
> 					 rhs-subterms)
> 					(first rhs-subterms)))))
> 		nil))))
717c767,796
<     (match-ACZ-collapse-arrays-internal lhs-f 0) 
---
>     ;; (match-ACZ-collapse-arrays-internal lhs-f 0)
>     (dotimes (i (array-dimension lhs-f 0))
>       (declare (type fixnum i))
>       (let ((?zero (term-make-zero (%svref ops (cdr (%svref lhs-f i))))))
> 	(setq rhs-subterms nil)
> 	(setq term-code (* 2 term-code))
> 	;; (match-ACZ-collapse-one-array-internal rhs-c-sol rhs-c)
> 	(dotimes (j (array-dimension rhs-c-sol 0))
> 	  (declare (type fixnum j))
>           (when (> (logand (the fixnum (aref rhs-c-sol j)) term-code) 0)
> 	    (push  (car (%svref rhs-c j)) rhs-subterms)))
> 	;; (match-ACZ-collapse-one-array-internal rhs-f-sol rhs-f)
> 	(dotimes (j (array-dimension rhs-f-sol 0))
> 	  (declare (type fixnum j))
> 	  (when (> (logand (the fixnum (aref rhs-f-sol j)) term-code) 0)
> 	    (push  (car (%svref rhs-f j)) rhs-subterms)))
> 	(if ?zero
> 	    (add-equation-to-m-system
> 	     new-sys 
> 	     (make-equation (car (%svref lhs-f i))
> 			    (if (null rhs-subterms)
> 				?zero
> 				(if (cdr rhs-subterms)
> 					; implies length is greater than 1 
> 				    (make-right-assoc-normal-form-with-sort-check
> 				     (%svref ops
> 					     (cdr (%svref lhs-f i)))
> 				     rhs-subterms)
> 				    (first rhs-subterms)))))
> 	    nil)))
840a920,921
> 
> ;;; EOF
