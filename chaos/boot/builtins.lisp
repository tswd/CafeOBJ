;;;-*-Mode:LISP; Package: CHAOS; Base:10; Syntax:Common-lisp -*-
;;; $Id: builtins.lisp,v 1.13 2007-01-26 10:38:35 sawada Exp $
(in-package :chaos)
#|=============================================================================
System:CHAOS
Module:boot
File:builtins.lisp
=============================================================================|#

;;; INTIALIZE DB 

(eval-when (eval load)
  (clear-global-db)
  (clear-trs-db)
  (unless *term-memo-table*
    (create-term-memo-table))
  #||
  (defun create-module-psystem (&rest args)
    (declare (ignore args))
    nil)
  ||#
  )

;;;*****************************************************************************
;;; HARD-WIRED STUFF ***********************************************************
;;;*****************************************************************************

(defparameter cosmos-sort-ref `(%sort-ref ,(string $name-cosmos) nil))
(defparameter universal-sort-ref `(%sort-ref ,(string $name-universal) nil))
(defparameter huniversal-sort-ref `(%sort-ref ,(string $name-huniversal) nil))

(defun boot-universal-module ()
  (setq *universal-module* (define-builtin-module "CHAOS:UNIVERSAL"))
  (setq *cosmos* (define-builtin-sort $name-cosmos *universal-module*))
  (setq *universal-sort* (define-builtin-sort $name-universal *universal-module*))
  (setq *huniversal-sort* (define-builtin-sort $name-huniversal *universal-module*))
  (setq *bottom-sort* (define-builtin-sort $name-bottom *universal-module*))
  (setq *hbottom-sort* (define-builtin-sort $name-hbottom *universal-module*))
  (setf (sort-is-hidden *huniversal-sort*) t)
  (setf (sort-is-hidden *hbottom-sort*) t)
  (setq sup-universal-sort-name
	(intern
	 (concatenate 'string (string (sort-id *universal-sort*))
                  "."
                  (make-module-print-name2 (sort-module *universal-sort*)))))
  (setq sup-huniversal-sort-name
	(intern
	 (concatenate 'string (string (sort-id *huniversal-sort*))
                  "."
                  (make-module-print-name2 (sort-module *huniversal-sort*)))))
  (compile-module *universal-module*))

(defun boot-identifier-module ()
  (setq *identifier-module* (define-builtin-module "CHAOS:IDENTIFIER"))
  (setq *identifier-sort* (define-builtin-sort $name-identifier *identifier-module*))
  (compile-module *identifier-module*))

#||
(defun boot-system-object-module ()
  ;; sorts
  (setq *system-object-module* (define-builtin-module "CHAOS:SYSTEM-OBJECTS"))
  (setq *sort-sort* (define-builtin-sort $name-sort *system-object-module*))
  (setq *general-sort* (define-builtin-sort $name-gen-sort *system-object-module*))
  (setq *builtin-sort* (define-builtin-sort $name-bi-sort *system-object-module*))
  (setq *and-sort* (define-builtin-sort $name-and-sort *system-object-module*))
  (setq *or-sort* (define-builtin-sort $name-or-sort *system-object-module*))
  (setq *err-sort* (define-builtin-sort $name-err-sort *system-object-module*))
  (setq *record-sort* (define-builtin-sort $name-record *system-object-module*))
  (setq *class-sort* (define-builtin-sort $name-class *system-object-module*))

  (declare-subsort-in-module `((,*general-sort* ,*builtin-sort* ,*and-sort* ,*or-sort* ,*err-sort*
                                                :< ,*sort-sort*)
                               (,*class-sort* ,*record-sort* :< ,*general-sort*))
                             *system-object-module*)
  ;; operator
  (setq *operator-sort* (define-builtin-sort $name-operator
                            *system-object-module*))
  ;; axiom
  (setq *axiom-sort* (define-builtin-sort $name-axiom
                         *system-object-module*))
  ;; module
  (setq *module-sort* (define-builtin-sort $name-module
                          *system-object-module*))
  (compile-module *system-object-module*))
||#

(defun boot-parser-module ()
  (setq *parser-module* (define-builtin-module "CHAOS:PARSER"))
  (with-in-module (*parser-module*)
    ;; import Universal
    (import-module *parser-module* :protecting *universal-module*)
    ;; Sorts for syntax errors
    (let ((syntax-err (define-builtin-sort '|SyntaxErr| *parser-module*))
          (type-err (define-builtin-sort '|TypeErr| *parser-module*))
          ;; (inv-op (define-builtin-sort '|UnknownOp| *parser-module*))
	  (sort-id (define-builtin-sort '|SortId| *parser-module*))
          )
      (setf *syntax-err-sort* syntax-err)
      (setf *type-err-sort* type-err)
      ;; (setf *op-err-sort* inv-op)
      (setf *sort-id-sort* sort-id)
      ;; (declare-subsort-in-module `((,*type-err-sort* ,*op-err-sort* :< ,*syntax-err-sort*))
      ;;                           *parser-module*))
      (declare-subsort-in-module `((,*type-err-sort* :< ,*syntax-err-sort*))
                                 *parser-module*))
    ;; operators for syntax errors
    (let ((partial-op (declare-operator-in-module '("parsed:[" "_" "],"
                                                    "rest:[" "_" "]")
                                                  (list *universal-sort*
                                                        *universal-sort*)
                                                  *syntax-err-sort*
                                                  *parser-module*))
	  #||
          (type-err-op (declare-operator-in-module '("error:[" "_" "]")
                                                   (list *universal-sort*)
                                                   *type-err-sort*
                                                   *parser-module*))
          (unknown-op (declare-operator-in-module '("opId:[" "_" "]," "rest:[" "_" "]")
                                                  (list *universal-sort*
                                                        *universal-sort*)
                                                  *op-err-sort*
                                                  *parser-module*))
          (biop (declare-operator-in-module '("builtin" "constant")
                                            nil
                                            *universal-sort*
                                            *parser-module*))
          (void-bottom (declare-operator-in-module '("void-bottom")
                                                   nil
                                                   *bottom-sort*
                                                   *parser-module*))
	  ||#
	  )
      ;; (setf *void-op* void-bottom)
      (setf *partial-op* partial-op)
      ;; (setf *type-err-op* type-err-op)
      ;; (setf *op-err-op* unknown-op)
      ;; (setf *builtin-op* biop)
      )

    )
  (let* ((opinfos (module-all-operators *parser-module*))
         ;; (bi-meth (car (operator-methods *builtin-op* opinfos)))
         (partial-meth (car (operator-methods *partial-op* opinfos)))
         ;; (type-err-meth (car (operator-methods *type-err-op* opinfos)))
         ;; (op-err-meth (car (operator-methods *op-err-op* opinfos)))
         ;; (void-meth (car (operator-methods *void-op* opinfos)))
	 )
    #||
    (if bi-meth
        (setf *builtin-method* bi-meth)
      (break "!! Panic! : cannot find builtin method"))
    ||#
    (if partial-meth
        (setf *partial-method* partial-meth)
      (break "!! Panic! : cannot find partial method"))
    #||
    (if type-err-meth
        (setf *type-err-method* type-err-meth)
      (with-output-panic-message ()
        (break "cannot find type error method")))
    (if op-err-meth
        (setf *op-err-method* op-err-meth)
      (with-output-panic-message ()
        (break "cannot find op error method")))
    (if void-meth
        (setf *void-method* void-meth)
      (with-output-panic-message ()
        (break "cannot find op void method")))
    ||#
    )
  (compile-module *parser-module*)
  )

(defun boot-chaos ()
  (setq *chaos-module* (define-builtin-module "CHAOS"))
  (boot-universal-module)
  (boot-identifier-module)
  ;; (boot-system-object-module)
  (boot-parser-module)
  (import-module *chaos-module* :protecting *universal-module*)
  (import-module *chaos-module* :protecting *identifier-module*)
  ;; (import-module *chaos-module* :protecting *system-object-module*)
  (import-module *chaos-module* :protecting *parser-module*)
  (compile-module *chaos-module*)
  (setq *chaos-sort-order* (module-sort-order *chaos-module*))
  ;; put here for a reason.
  (setq *match-dep-var* (make-variable-term *cosmos* 'REST))
  ;; (setq *system-module* (define-builtin-module "CHAOS:SYSTEM"))
  (setq *kernel-hard-wired-builtin-modules* (list *universal-module*
                                                  *identifier-module*
                                                  ;; *system-object-module*
                                                  *parser-module*
                                                  *chaos-module*))
  t
  )

(defun print-ast-dict ()
  (maphash #'(lambda (x y)
               (format t "~&key=~a, entries -------------------" x)
               (dolist (elt y)
                 (let ((ee (cdr elt)))
                   (terpri)
                   (dolist (e ee)
                     (case (car e)
                       (token (princ (cdr e)))
                       (argument (print-chaos-object (cddr e))))))))
           *builtin-ast-dict*))

;;;*****************************
;;; HARD-WIRED BUILTIN MODULES *
;;;*****************************************************************************
;;; The followings are hard-wired modules which are not allowed to
;;; be altered by users.
;;;*****************************************************************************

;;; CHAOS HARDWIRED MODULES ----------------------------------------------------
;;; TRIV
;;; TRUTH-VALUE
;;; NZNAT-VALUE
;;; NAT-VALUE
;;; INT-VALUE
;;; RAT-VALUE
;;; FLOAT-VALUE
;;; CHAR-VALUE
;;; STRING-VALUE
;;; CHAOS-VALUE
;;;
(defun install-chaos-hard-wired-modules ()
  (setq *dribble-ast* nil)
  (setq *ast-log* nil)
  (setq *last-module* nil *current-module* nil)
  (setq *include-bool* nil)
  (setq *include-rwl* nil)
  (setq *regularize-signature* nil)
  (eval-ast-if-need '(%module-decl "TRIV" :theory :hard
                      ((%psort-decl (%sort-ref "Elt" nil))
                       (%sort-decl (%sort-ref "Elt" nil) nil))))
  (eval-ast-if-need '(%module-decl "TRUTH-VALUE" :object :hard
                      ((%psort-decl (%sort-ref "Bool" nil))
                       (%sort-decl (%sort-ref "Bool" nil) nil)
                       (%op-decl ("false") nil (%sort-ref "Bool" nil)
                        (%opattrs nil nil nil nil nil t nil)
                        nil)
                       (%op-decl ("true") nil (%sort-ref "Bool" nil)
                        (%opattrs nil nil nil nil nil t nil)
                        nil))))
  (setup-truth-value)
  ;;
  (eval-ast-if-need '(%module-decl "NZNAT-VALUE" :object :hard
                      ((%psort-decl (%sort-ref "NzNat" nil))
                       (%bsort-decl "NzNat" is-nznat-token
                        create-nznat prin1 is-nznat nil))))
  (eval-ast-if-need '(%module-decl "NAT-VALUE" :object :hard
                      ((%import :protecting "NZNAT-VALUE" nil)
                       (%psort-decl (%sort-ref "Nat" nil))
                       (%bsort-decl "Nat" is-nat-token create-nat
                        prin1 is-nat nil)
                       (%bsort-decl "Zero" is-zero-token create-zero
                        prin1 is-zero nil)
                       (%subsort-decl
                        (nil (%sort-ref "NzNat" nil) :<
                         (%sort-ref "Nat" nil)))
                       (%subsort-decl
                        (nil (%sort-ref "Zero" nil) :<
                         (%sort-ref "Nat" nil))))))
  (eval-ast-if-need '(%module-decl "INT-VALUE" :object :hard
                      ((%import :protecting "NAT-VALUE" nil)
                       (%psort-decl (%sort-ref "Int" nil))
                       (%bsort-decl "Int" is-int-token create-int
                        prin1 is-int nil)
                       (%bsort-decl "NzInt" is-nzint-token
                        create-nzint prin1 is-nzint nil)
                       (%subsort-decl
                        (nil (%sort-ref "Nat" nil) :<
                         (%sort-ref "Int" nil)))
                       (%subsort-decl
                        (nil (%sort-ref "NzNat" nil) :<
                         (%sort-ref "NzInt" nil) :<
                         (%sort-ref "Int" nil))))))
  (eval-ast-if-need '(%module-decl "RAT-VALUE" :object :hard
                      ((%import :protecting "INT-VALUE" nil)
                       (%psort-decl (%sort-ref "Rat" nil))
                       (%bsort-decl "Rat" is-rat-token create-rat
                        rat-print rationalp nil)
                       (%bsort-decl "NzRat" is-nzrat-token
                        create-nzrat rat-print is-nzrat nil)
                       (%subsort-decl
                        (nil (%sort-ref "Int" nil) :<
                         (%sort-ref "Rat" nil)))
                       (%subsort-decl
                        (nil (%sort-ref "NzInt" nil) :<
                         (%sort-ref "NzRat" nil) :<
                         (%sort-ref "Rat" nil))))))
  (eval-ast-if-need '(%module-decl "FLOAT-VALUE" :object :hard
                      ((%psort-decl (%sort-ref "Float" nil))
                       (%bsort-decl "Float" is-float-token
                        create-float print-float is-float nil))))
  
  (eval-ast-if-need '(%module-decl "QID" :object :hard
                      ((%psort-decl (%sort-ref "Id" nil))
                       (%bsort-decl "Id" is-qid-token create-qid
                        print-qid is-qid nil))))
  (setup-qid)
  (eval-ast-if-need '(%module-decl "CHAR-VALUE" :object :hard
                      ((%psort-decl (%sort-ref "Character" nil))
                       (%bsort-decl "Character" is-character-token
                        create-character print-character
                        is-character nil))))
  (install-character)
  (eval-ast-if-need '(%module-decl "STRING-VALUE" :object :hard
                      ((%psort-decl (%sort-ref "String" nil))
                       (%bsort-decl "String" nil nil prin1 stringp nil))))
  (install-string)
  ;;
  (eval-ast-if-need '(%module-decl "CHAOS:EXPR" :object :hard
                      ((%psort-decl (%sort-ref "ChaosExpr" nil))
                       (%import :protecting "STRING-VALUE" nil)
                       (%import :protecting "QID" nil)
                       (%bsort-decl "ChaosExpr" nil nil print-chaos-value nil
                        nil)
                       (%bsort-decl "ChaosSort" nil nil print-chaos-value
                        sort-p nil)
                       (%bsort-decl "Sort" nil nil print-chaos-value
                        sort-p)
                       (%bsort-decl "AndSort" nil nil print-chaos-value
                        and-sort-p)
                       (%bsort-decl "OrSort" nil nil print-chaos-value
                        or-sort-p)
                       (%bsort-decl "ErrSort" nil nil print-chaos-value
                        err-sort-p)
                       (%bsort-decl "Operator" nil nil print-chaos-value
                        method-p nil)
                       (%bsort-decl "ModExpr" nil nil print-chaos-value
                        is-modexp? nil)
                       (%bsort-decl "Module" nil nil print-chaos-value
                        module-p nil)
                       (%bsort-decl "Axiom" nil nil print-chaos-value
                        axiom-p nil)
                       (%bsort-decl "Term" nil nil print-chaos-value
                        is-term? nil)
                       (%bsort-decl "Variable" nil nil print-chaos-value
                        is-variable? nil)
                       (%bsort-decl "ApplForm" nil nil print-chaos-value
                        is-applform? nil)
                       (%bsort-decl "PVariable" nil nil print-chaos-value
                        is-pvariable? nil)
                       (%bsort-decl "LispTerm" nil nil print-chaos-value
                        is-lisp-form? nil)
                       (%bsort-decl "SlispTerm" nil nil print-chaos-value
                        is-slisp-form? nil)
                       (%bsort-decl "GlispTerm" nil nil print-chaos-value
                        is-glisp-form? nil)
                       (%bsort-decl "BconstTerm" nil nil print-chaos-value
                        is-bconst-term? nil)
                       (%bsort-decl "OpTheory" nil nil print-chaos-value
                        nil nil)
                       (%bsort-decl "ChaosList" nil nil print-chaos-value
                        listp nil)
                       (%bsort-decl "ChaosVoid" nil nil print-chaos-value
                        null nil)
                       (%subsort-decl (nil
                                       (%sort-ref "ChaosSort" nil)
                                       (%sort-ref "Operator" nil)
                                       (%sort-ref "Axiom" nil)
                                       (%sort-ref "Module" nil)
                                       (%sort-ref "Term" nil)
                                       (%sort-ref "ModExpr" nil)
                                       (%sort-ref "String" nil)
                                       (%sort-ref "Id" nil)
                                       (%sort-ref "ChaosList" nil)
                                       :<
                                       (%sort-ref "ChaosExpr" nil)))
                       (%subsort-decl (nil
                                       (%sort-ref "Variable" nil)
                                       (%sort-ref "ApplForm" nil)
                                       (%sort-ref "PVarialble" nil)
                                       (%sort-ref "LispTerm" nil)
                                       (%sort-ref "BconstTerm" nil)
                                       :<
                                       (%sort-ref "Term" nil)))
                       (%subsort-decl (nil
                                       (%sort-ref "SlispTerm" nil)
                                       (%sort-ref "GlispTerm" nil)
                                       :<
                                       (%sort-ref "LispTerm" nil)))
                       (%subsort-decl (nil
                                       (%sort-ref "Sort" nil)
                                       (%sort-ref "AndSort" nil)
                                       (%sort-ref "OrSort" nil)
                                       (%sort-ref "ErrSort" nil)
                                       :<
                                       (%sort-ref "ChaosSort" nil)))
                       (%subsort-decl (nil
                                       (%sort-ref "ChaosVoid" nil)
                                       :<
                                       (%sort-ref "Sort" nil)
                                       (%sort-ref "AndSort" nil)
                                       (%sort-ref "OrSort" nil)
                                       (%sort-ref "ErrSort" nil)
                                       (%sort-ref "Operator" nil)
                                       (%sort-ref "Axiom" nil)
                                       (%sort-ref "Module" nil)
                                       (%sort-ref "Term" nil)
                                       (%sort-ref "ModExpr" nil)
                                       (%sort-ref "ChaosList" nil)))
                       (%subsort-decl (nil
                                       (%sort-ref "String" nil)
                                       :<
                                       (%sort-ref "ModExpr" nil)
                                       ))
                       )))
  (install-chaos-expr)
  ;;
  (setq *last-module* nil *current-module* nil)
  (setq *include-bool* t)
  (setq *include-rwl* t)
  )

;;;******************************
;;; SOFT-WIRED BUILT-IN MODULES *
;;;*****************************************************************************
;;; The followings are also builtins, but user may change their definitions.
;;;*****************************************************************************


;;; CHAOS System SOFT-WIRED BUILTIN MODULES
;;; ** We want the definitions to be saved for recovering them afterwards.
;;;

(defun install-chaos-soft-wired-modules ()
  (let ((*dribble-ast* nil))
    (setq *ast-log* nil)
    (setq *last-module* nil
          *current-module* nil)
    (setq *include-bool* nil)
    (setq *include-rwl* nil)
    ;; 
    (setq *regularize-signature* nil)
    ;;
    #||     
    (eval-ast-if-need '(%module-decl "NZNAT" :object :system
                        ((%import :protecting "NZNAT-VALUE" nil)
                         (%import :protecting "BOOL" nil)
                         (%psort-decl (%sort-ref "NzNat" nil))
                         (%op-decl ("_" "+" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "+" "_") nil 2)
                          (%opattrs (:assoc :comm) nil 33 nil nil
                           nil nil))
                         (%op-decl ("d")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("d") nil 2)
                          (%opattrs (:comm) nil nil nil nil nil nil))
                         (%op-decl ("_" "*" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "*" "_") nil 2)
                          (%opattrs (:assoc :comm (:idr "1")) nil 31
                           nil nil nil nil))
                         (%op-decl ("_" "quo" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "quo" "_") nil 2)
                          (%opattrs nil :l-assoc 31 nil nil nil nil))
                         (%op-decl ("_" "<" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%opattr-decl (%opref ("_" "<" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil ))
                         (%op-decl ("_" "<=" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%opattr-decl (%opref ("_" "<=" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil t))
                         (%op-decl ("_" ">" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%opattr-decl (%opref ("_" ">" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("_" ">=" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%opattr-decl (%opref ("_" ">=" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("s" "_") ((%sort-ref "NzNat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("s" "_") nil 1)
                          (%opattrs nil nil 15 nil nil nil nil))
                         (%var-decl ("NN" "NM") (%sort-ref "NzNat" nil))
                         (%axiom-decl :equation nil ("NN" "+" "NM")
                          ((%slisp (+ nn nm))) nil nil)
                         (%axiom-decl :equation nil
                          ("d" "(" "NN" "," "NM" ")")
                          ((%slisp (if (= nn nm) 1 (abs (- nn nm)))))
                          nil nil)
                         (%axiom-decl :equation nil ("NN" "*" "NM")
                          ((%slisp (* nn nm))) nil nil)
                         (%axiom-decl :equation nil ("NN" "quo" "NM")
                          ((%slisp (if (> nn nm) (truncate nn nm) 1)))
                          nil nil)
                         (%axiom-decl :equation nil ("NN" "<" "NM")
                          ((%slisp (< nn nm))) nil nil)
                         (%axiom-decl :equation nil ("NN" "<=" "NM")
                          ((%slisp (<= nn nm))) nil nil)
                         (%axiom-decl :equation nil ("NN" ">" "NM")
                          ((%slisp (> nn nm))) nil nil)
                         (%axiom-decl :equation nil ("NN" ">=" "NM")
                          ((%slisp (>= nn nm))) nil nil)
                         (%axiom-decl :equation nil ("s" "NN")
                          ((%slisp (1+ nn))) nil nil))))
    (eval-ast-if-need '(%protect ("NZNAT") :set))
    (eval-ast-if-need '(%module-decl "NAT" :object :system
                        ((%import :protecting "NZNAT" nil)
                         (%import :protecting "NAT-VALUE" nil)
                         (%psort-decl (%sort-ref "Nat" nil))
                         (%op-decl ("_" "+" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs ((:idr "0")) nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("sd")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs (:comm) nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "*" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "quo" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "rem" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "NzNat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "rem" "_") nil 2)
                          (%opattrs nil :l-assoc 31 nil nil nil nil))
                         (%op-decl ("_" "divides" "_")
                          ((%sort-ref "NzNat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%opattr-decl
                          (%opref ("_" "divides" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil t))
                         (%op-decl ("_" "<" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" "<=" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" ">" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" ">=" "_")
                          ((%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("s" "_") ((%sort-ref "Nat" nil))
                          (%sort-ref "NzNat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("p" "_") ((%sort-ref "NzNat" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("p" "_") nil 1)
                          (%opattrs nil nil 15 nil nil nil nil))
                         (%var-decl ("M" "N") (%sort-ref "Nat" nil))
                         (%var-decl ("NN") (%sort-ref "NzNat" nil))
                         (%axiom-decl :equation nil
                          ("sd" "(" "M" "," "N" ")")
                          ((%slisp (abs (- m n)))) nil nil)
                         (%axiom-decl :equation nil ("M" "+" "N")
                          ((%slisp (+ m n))) nil nil)
                         (%axiom-decl :equation nil ("N" "*" "0") ("0")
                          nil nil)
                         (%axiom-decl :equation nil ("M" "quo" "NN")
                          ((%slisp (truncate m nn))) nil nil)
                         (%axiom-decl :equation nil ("M" "rem" "NN")
                          ((%slisp (rem m nn))) nil nil)
                         (%axiom-decl :equation nil ("NN" "divides" "M")
                          ((%slisp (= 0 (rem m nn)))) nil nil)
                         (%axiom-decl :equation nil ("N" "<" "0")
                          ("false") nil nil)
                         (%axiom-decl :equation nil ("0" "<" "NN")
                          ("true") nil nil)
                         (%axiom-decl :equation nil ("NN" "<=" "0")
                          ("false") nil nil)
                         (%axiom-decl :equation nil ("0" "<=" "N")
                          ("true") nil nil)
                         (%axiom-decl :equation nil ("0" ">" "N")
                          ("false") nil nil)
                         (%axiom-decl :equation nil ("NN" ">" "0")
                          ("true") nil nil)
                         (%axiom-decl :equation nil ("0" ">=" "NN")
                          ("false") nil nil)
                         (%axiom-decl :equation nil ("N" ">=" "0")
                          ("true") nil nil)
                         (%axiom-decl :equation nil ("s" "0") ("1") nil nil)
                         (%axiom-decl :equation nil ("p" "NN")
                          ((%slisp (- nn 1))) nil nil))))
    (eval-ast-if-need '(%protect ("NAT") :set))
    (eval-ast-if-need '(%module-decl "INT" :object :system
                        ((%import :protecting "NAT" nil)
                         (%import :protecting "INT-VALUE" nil)
                         (%psort-decl (%sort-ref "Int" nil))
                         (%op-decl ("_" "+" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs ((:idr "0")) nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "-" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "-" "_") nil 2)
                          (%opattrs nil :r-assoc 33 nil nil nil nil))
                         (%op-decl ("_" "*" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "quo" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "NzInt" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "rem" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "NzInt" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "divides" "_")
                          ((%sort-ref "NzInt" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" "<" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" "<=" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" ">" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("_" ">=" "_")
                          ((%sort-ref "Int" nil)
                           (%sort-ref "Int" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil t)
                          nil)
                         (%op-decl ("s" "_") ((%sort-ref "Int" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("-" "_") ((%sort-ref "Int" nil))
                          (%sort-ref "Int" nil)
                          (%opattrs nil nil 15 nil nil nil nil)
                          nil)
                         (%op-decl ("-" "_") ((%sort-ref "NzInt" nil))
                          (%sort-ref "NzInt" nil)
                          (%opattrs nil nil 15 nil nil nil nil)
                          nil)
                         (%var-decl ("I" "J") (%sort-ref "Int" nil))
                         (%var-decl ("NJ") (%sort-ref "NzInt" nil))
                         (%axiom-decl :equation nil ("-" "I")
                          ((%slisp (- i))) nil nil)
                         (%axiom-decl :equation nil ("I" "+" "J")
                          ((%slisp (+ i j))) nil nil)
                         (%axiom-decl :equation nil ("I" "-" "J")
                          ("I" "+" "(" "-" "J" ")") nil nil)
                         (%axiom-decl :equation nil ("I" "*" "J")
                          ((%slisp (* i j))) nil nil)
                         (%axiom-decl :equation nil ("I" "quo" "NJ")
                          ((%slisp (truncate i nj))) nil nil)
                         (%axiom-decl :equation nil ("I" "rem" "NJ")
                          ((%slisp (rem i nj))) nil nil)
                         (%axiom-decl :equation nil ("NJ" "divides" "I")
                          ((%slisp (= 0 (rem i nj)))) nil nil)
                         (%axiom-decl :equation nil ("I" "<" "J")
                          ((%slisp (< i j))) nil nil)
                         (%axiom-decl :equation nil ("I" "<=" "J")
                          ((%slisp (<= i j))) nil nil)
                         (%axiom-decl :equation nil ("I" ">" "J")
                          ((%slisp (> i j))) nil nil)
                         (%axiom-decl :equation nil ("I" ">=" "J")
                          ((%slisp (>= i j))) nil nil)
                         (%axiom-decl :equation nil ("s" "I")
                          ("1" "+" "I") nil nil))))
    (eval-ast-if-need '(%protect "INT" :set))
    (eval-ast-if-need '(%module-decl "RAT" :object :system
                        ((%import :protecting "INT" nil)
                         (%import :protecting "RAT-VALUE" nil)
                         (%psort-decl (%sort-ref "Rat" nil))
                         (%op-decl ("-" "_") ((%sort-ref "Rat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs nil nil 15 nil nil nil nil)
                          nil)
                         (%op-decl ("-" "_") ((%sort-ref "NzRat" nil))
                          (%sort-ref "NzRat" nil)
                          (%opattrs nil nil 15 nil nil nil nil)
                          nil)
                         (%op-decl ("_" "+" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs ((:idr "0")) nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "-" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "*" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "/" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "NzRat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "/" "_") nil 2)
                          (%opattrs nil :l-assoc 31 nil nil nil nil))
                         (%op-decl ("_" "/" "_")
                          ((%sort-ref "NzRat" nil)
                           (%sort-ref "NzRat" nil))
                          (%sort-ref "NzRat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "rem" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "NzRat" nil))
                          (%sort-ref "Rat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "<" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "<=" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" ">" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" ">=" "_")
                          ((%sort-ref "Rat" nil)
                           (%sort-ref "Rat" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%var-decl ("R" "S") (%sort-ref "Rat" nil))
                         (%var-decl ("NS") (%sort-ref "NzRat" nil))
                         (%axiom-decl :equation nil ("R" "+" "S")
                          ((%slisp (+ r s))) nil nil)
                         (%axiom-decl :equation nil ("-" "R")
                          ((%slisp (- r))) nil nil)
                         (%axiom-decl :equation nil ("R" "-" "S")
                          ("R" "+" "(" "-" "S" ")") nil nil)
                         (%axiom-decl :equation nil ("R" "*" "S")
                          ((%slisp (* r s))) nil nil)
                         (%axiom-decl :equation nil ("R" "/" "NS")
                          ((%slisp (/ r ns))) nil nil)
                         (%axiom-decl :equation nil ("R" "rem" "NS")
                          ((%slisp (rem r ns))) nil nil)
                         (%axiom-decl :equation nil ("R" "<" "S")
                          ((%slisp (< r s))) nil nil)
                         (%axiom-decl :equation nil ("R" "<=" "S")
                          ((%slisp (<= r s))) nil nil)
                         (%axiom-decl :equation nil ("R" ">" "S")
                          ((%slisp (> r s))) nil nil)
                         (%axiom-decl :equation nil ("R" ">=" "S")
                          ((%slisp (>= r s))) nil nil))))
    (eval-ast-if-need '(%protect ("RAT") :set))
    (eval-ast-if-need '(%module-decl "FLOAT" :object :system
                        ((%import :protecting "FLOAT-VALUE" nil)
                         (%import :protecting "BOOL" nil)
                         (%psort-decl (%sort-ref "Float" nil))
                         (%op-decl ("_" "+" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "+" "_") nil 2)
                          (%opattrs (:assoc :comm) nil 33 nil nil
                           nil nil))
                         (%op-decl ("_" "-" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "-" "_") nil 2)
                          (%opattrs nil :r-assoc 33 nil nil nil nil))
                         (%op-decl ("_" "*" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "*" "_") nil 2)
                          (%opattrs (:assoc :comm) nil 31 nil nil
                           nil nil))
                         (%op-decl ("_" "/" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "/" "_") nil 2)
                          (%opattrs nil :l-assoc 31 nil nil nil nil))
                         (%op-decl ("_" "rem" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "rem" "_") nil 2)
                          (%opattrs nil :l-assoc 31 nil nil nil nil))
                         (%op-decl ("exp") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("log") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("sqrt") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("abs") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("sin") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("cos") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("atan") ((%sort-ref "Float" nil))
                          (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("pi") nil (%sort-ref "Float" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "<" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "<" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("_" "<=" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "<=" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("_" ">" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" ">" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("_" ">=" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" ">=" "_") nil 2)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%op-decl ("_" "=" "[" "_" "]" "_")
                          ((%sort-ref "Float" nil)
                           (%sort-ref "Float" nil)
                           (%sort-ref "Float" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl
                          (%opref ("_" "=" "[" "_" "]" "_") nil 3)
                          (%opattrs nil nil 51 nil nil nil nil))
                         (%var-decl ("X" "Y" "Z")
                          (%sort-ref "Float" nil))
                         (%axiom-decl :equation nil ("X" "+" "Y")
                          ((%slisp (+ x y))) nil nil)
                         (%axiom-decl :equation nil ("X" "-" "Y")
                          ((%slisp (- x y))) nil nil)
                         (%axiom-decl :equation nil ("X" "*" "Y")
                          ((%slisp (* x y))) nil nil)
                         (%axiom-decl :equation nil ("X" "/" "Y")
                          ((%slisp (/ x y))) nil nil)
                         (%axiom-decl :equation nil ("X" "rem" "Y")
                          ((%slisp (rem x y))) nil nil)
                         (%axiom-decl :equation nil ("exp" "(" "X" ")")
                          ((%slisp (exp x))) nil nil)
                         (%axiom-decl :equation nil ("log" "(" "X" ")")
                          ((%slisp (log x))) nil nil)
                         (%axiom-decl :equation nil ("sqrt" "(" "X" ")")
                          ((%slisp (sqrt x))) nil nil)
                         (%axiom-decl :equation nil ("abs" "(" "X" ")")
                          ((%slisp (abs x))) nil nil)
                         (%axiom-decl :equation nil ("sin" "(" "X" ")")
                          ((%slisp (sin x))) nil nil)
                         (%axiom-decl :equation nil ("cos" "(" "X" ")")
                          ((%slisp (cos x))) nil nil)
                         (%axiom-decl :equation nil ("atan" "(" "X" ")")
                          ((%slisp (atan x))) nil nil)
                         (%axiom-decl :equation nil ("pi") ((%slisp pi))
                          nil nil)
                         (%axiom-decl :equation nil ("X" "<" "Y")
                          ((%slisp (< x y))) nil nil)
                         (%axiom-decl :equation nil ("X" "<=" "Y")
                          ((%slisp (<= x y))) nil nil)
                         (%axiom-decl :equation nil ("X" ">" "Y")
                          ((%slisp (> x y))) nil nil)
                         (%axiom-decl :equation nil ("X" ">=" "Y")
                          ((%slisp (>= x y))) nil nil)
                         (%axiom-decl :equation nil
                          ("(" "X" "=" "[" "Z" "]" "Y" ")")
                          ((%slisp (< (abs (- x y)) z))) nil nil))))
    (eval-ast-if-need '(%protect ("FLOAT") :set))
    (eval-ast-if-need '(%module-decl "CHARACTER" :object :system
                        ((%import :protecting "BOOL" nil)
                         (%import :protecting "NAT" nil)
                         (%import :protecting "CHAR-VALUE" nil)
                         (%psort-decl (%sort-ref "Character" nil))
                         (%op-decl ("char-code")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("code-char") ((%sort-ref "Nat" nil))
                          (%sort-ref "Character" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("upcase")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Character" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("downcase")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Character" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("graphic-char-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("alpha-char-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("upper-case-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("lower-case-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("both-case-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("digit-char-p")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("alphanumericp")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("char<")
                          ((%sort-ref "Character" nil)
                           (%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("char>")
                          ((%sort-ref "Character" nil)
                           (%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("char<=")
                          ((%sort-ref "Character" nil)
                           (%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("char>=")
                          ((%sort-ref "Character" nil)
                           (%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("char=")
                          ((%sort-ref "Character" nil)
                           (%sort-ref "Character" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%var-decl ("C" "C2")
                          (%sort-ref "Character" nil))
                         (%var-decl ("N") (%sort-ref "Nat" nil))
                         (%axiom-decl :equation nil
                          ("char-code" "(" "C" ")")
                          ((%slisp (char-code c))) nil nil)
                         (%axiom-decl :equation nil
                          ("code-char" "(" "N" ")")
                          ((%slisp (code-char n))) ("N" "<=" "255") nil)
                         (%axiom-decl :equation nil
                          ("upcase" "(" "C" ")")
                          ((%slisp (char-upcase c))) nil nil)
                         (%axiom-decl :equation nil
                          ("downcase" "(" "C" ")")
                          ((%slisp (char-downcase c))) nil nil)
                         (%axiom-decl :equation nil
                          ("graphic-char-p" "(" "C" ")")
                          ((%slisp (graphic-char-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("alpha-char-p" "(" "C" ")")
                          ((%slisp (alpha-char-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("upper-case-p" "(" "C" ")")
                          ((%slisp (upper-case-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("lower-case-p" "(" "C" ")")
                          ((%slisp (lower-case-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("both-case-p" "(" "C" ")")
                          ((%slisp (both-case-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("digit-char-p" "(" "C" ")")
                          ((%slisp (digit-char-p c))) nil nil)
                         (%axiom-decl :equation nil
                          ("alphanumericp" "(" "C" ")")
                          ((%slisp (alphanumericp c))) nil nil)
                         (%axiom-decl :equation nil
                          ("char=" "(" "C" "," "C2" ")")
                          ((%slisp (char= c c2))) nil nil)
                         (%axiom-decl :equation nil
                          ("char<" "(" "C" "," "C2" ")")
                          ((%slisp (char< c c2))) nil nil)
                         (%axiom-decl :equation nil
                          ("char>" "(" "C" "," "C2" ")")
                          ((%slisp (char> c c2))) nil nil)
                         (%axiom-decl :equation nil
                          ("char<=" "(" "C" "," "C2" ")")
                          ((%slisp (char<= c c2))) nil nil)
                         (%axiom-decl :equation nil
                          ("char>=" "(" "C" "," "C2" ")")
                          ((%slisp (char>= c c2))) nil nil))))
    (eval-ast-if-need '(%protect ("CHARACTER") :set))
    (eval-ast-if-need '(%module-decl "STRING" :object :system
                        ((%import :protecting "CHARACTER" nil)
                         (%import :protecting "STRING-VALUE" nil)
                         (%psort-decl (%sort-ref "String" nil))
                         (%op-decl ("schar")
                          ((%sort-ref "String" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "Character" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "++" "_")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil :r-assoc nil nil nil t nil)
                          nil)
                         (%op-decl ("string")
                          ((%sort-ref "Character" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("upcase") ((%sort-ref "String" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("downcase")
                          ((%sort-ref "String" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("capitalize")
                          ((%sort-ref "String" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("substring")
                          ((%sort-ref "String" nil)
                           (%sort-ref "Nat" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("substring")
                          ((%sort-ref "String" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("rsubstring")
                          ((%sort-ref "String" nil)
                           (%sort-ref "Nat" nil))
                          (%sort-ref "String" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("length") ((%sort-ref "String" nil))
                          (%sort-ref "Nat" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("string=")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("string<")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("string>")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("string<=")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("string>=")
                          ((%sort-ref "String" nil)
                           (%sort-ref "String" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%var-decl ("S" "S1" "S2")
                          (%sort-ref "String" nil))
                         (%var-decl ("C") (%sort-ref "Character" nil))
                         (%var-decl ("N" "FROM" "TO")
                          (%sort-ref "Nat" nil))
                         (%axiom-decl :equation nil ("S" "++" "S2")
                          ((%slisp (concatenate 'string s s2))) nil nil)
                         (%axiom-decl :equation nil
                          ("string" "(" "C" ")")
                          ((%slisp (string c))) nil nil)
                         (%axiom-decl :equation nil
                          ("schar" "(" "S" "," "N" ")")
                          ((%slisp (schar s n))) nil nil)
                         (%axiom-decl :equation nil
                          ("upcase" "(" "S" ")")
                          ((%slisp (string-upcase s))) nil nil)
                         (%axiom-decl :equation nil
                          ("downcase" "(" "S" ")")
                          ((%slisp (string-downcase s))) nil nil)
                         (%axiom-decl :equation nil
                          ("capitalize" "(" "S" ")")
                          ((%slisp (string-capitalize s))) nil nil)
                         (%axiom-decl :equation nil
                          ("substring" "(" "S" "," "FROM" "," "TO"
                           ")")
                          ((%slisp (subseq s from to))) nil nil)
                         (%axiom-decl :equation nil
                          ("substring" "(" "S" "," "N" ")")
                          ((%slisp (subseq s n))) nil nil)
                         (%axiom-decl :equation nil
                          ("rsubstring" "(" "S" "," "N" ")")
                          ((%slisp (subseq s 0 n))) nil nil)
                         (%axiom-decl :equation nil
                          ("length" "(" "S" ")")
                          ((%slisp (length s))) nil nil)
                         (%axiom-decl :equation nil
                          ("string=" "(" "S1" "," "S2" ")")
                          ((%slisp (string= s1 s2))) nil nil)
                         (%axiom-decl :equation nil
                          ("string<" "(" "S1" "," "S2" ")")
                          ((%slisp (string< s1 s2))) nil nil)
                         (%axiom-decl :equation nil
                          ("string>" "(" "S1" "," "S2" ")")
                          ((%slisp (string> s1 s2))) nil nil)
                         (%axiom-decl :equation nil
                          ("string<=" "(" "S1" "," "S2" ")")
                          ((%slisp (string<= s1 s2))) nil nil)
                         (%axiom-decl :equation nil
                          ("string>=" "(" "S1" "," "S2" ")")
                          ((%slisp (string>= s1 s2))) nil nil))))
    (eval-ast-if-need '(%protect ("STRING") :set))
    (eval-ast-if-need '(%module-decl "PROPC" :object :system
                        ((%import :protecting "CHAOS:IDENTIFIER" nil)
                         (%import :protecting "TRUTH" nil)
                         (%psort-decl (%sort-ref "Prop" nil))
                         (%sort-decl (%sort-ref "Prop" nil) nil)
                         (%subsort-decl
                          (nil (%sort-ref "Identifier" nil)
                           (%sort-ref "Bool" nil) :<
                           (%sort-ref "Prop" nil)))
                         (%op-decl ("_" "and" "_")
                          ((%sort-ref "Prop" nil)
                           (%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs (:assoc :comm) nil 55 nil nil t nil)
                          nil)
                         (%op-decl ("_" "xor" "_")
                          ((%sort-ref "Prop" nil)
                           (%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs (:assoc :comm) nil 57 nil nil t nil)
                          nil)
                         (%op-decl ("_" "or" "_")
                          ((%sort-ref "Prop" nil)
                           (%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs (:assoc :comm) nil 59 nil nil
                           nil nil)
                          nil)
                         (%op-decl ("not" "_") ((%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs nil nil 53 nil nil nil nil)
                          nil)
                         (%op-decl ("_" "->" "_")
                          ((%sort-ref "Prop" nil)
                           (%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs nil nil 61 nil nil nil nil)
                          nil)
                         (%op-decl ("_" "<->" "_")
                          ((%sort-ref "Prop" nil)
                           (%sort-ref "Prop" nil))
                          (%sort-ref "Prop" nil)
                          (%opattrs (:assoc) nil 63 nil nil nil nil)
                          nil)
                         (%var-decl ("p" "q" "r")
                          (%sort-ref "Prop" nil))
                         (%axiom-decl :equation nil ("p" "and" "false")
                          ("false") nil nil)
                         (%axiom-decl :equation nil ("p" "and" "true")
                          ("p") nil nil)
                         (%axiom-decl :equation nil ("p" "and" "p")
                          ("p") nil nil)
                         (%axiom-decl :equation nil ("p" "xor" "false")
                          ("p") nil nil)
                         (%axiom-decl :equation nil ("p" "xor" "p")
                          ("false") nil nil)
                         (%axiom-decl :equation nil
                          ("p" "and" "(" "q" "xor" "r" ")")
                          ("(" "p" "and" "q" ")" "xor" "(" "p" "and"
                           "r" ")")
                          nil nil)
                         (%axiom-decl :equation nil ("p" "or" "q")
                          ("(" "p" "and" "q" ")" "xor" "p" "xor" "q")
                          nil nil)
                         (%axiom-decl :equation nil ("not" "p")
                          ("p" "xor" "true") nil nil)
                         (%axiom-decl :equation nil ("p" "->" "q")
                          ("(" "p" "and" "q" ")" "xor" "p" "xor"
                           "true")
                          nil nil)
                         (%axiom-decl :equation nil ("p" "<->" "q")
                          ("p" "xor" "q" "xor" "true") nil nil))))
    (eval-ast-if-need '(%protect ("PROPC") :set))

    (eval-ast-if-need '(%module-decl "AVPAIR" :object :system
                        ((%sort-decl (%sort-ref "AttrId" nil) nil)
                         (%sort-decl (%sort-ref "AttrValue" nil) nil)
                         (%subsort-decl
                          (nil (%sort-ref "Attribute" nil) :<
                           (%sort-ref "Attributes" nil)))
                         (%op-decl ("_" "=" "_")
                          ((%sort-ref "AttrId" nil)
                           (%sort-ref "AttrValue" nil))
                          (%sort-ref "Attribute" nil)
                          (%opattrs nil nil 49 nil nil t nil)
                          nil)
                         (%op-decl ("attr-null") nil
                          (%sort-ref "Attribute" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "," "_")
                          ((%sort-ref "Attributes" nil)
                           (%sort-ref "Attributes" nil))
                          (%sort-ref "Attributes" nil)
                          (%opattrs
                           (:assoc :comm (:id "attr-null"))
                           nil 63 nil nil t nil)
                          nil)
                         )))
    (eval-ast-if-need '(%protect ("AVPAIR") :set))
    (eval-ast-if-need '(%module-decl "RECORD-STRUCTURE" :object :system
                        ((%import :protecting "AVPAIR" nil)
                         (%sort-decl (%sort-ref "RecordId" nil) nil)
                         (%sort-decl (%sort-ref "RecordInstance" nil)
                          nil)
                         (%op-decl ("*VoidRecord*") nil
                          (%sort-ref "RecordInstance" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("_" "{" "_" "}")
                          ((%sort-ref "RecordId" nil)
                           (%sort-ref "Attributes" nil))
                          (%sort-ref "RecordInstance" nil)
                          (%opattrs nil nil nil nil nil t nil)
                          nil)
                         (%op-decl ("_" "{" "}")
                          ((%sort-ref "RecordId" nil))
                          (%sort-ref "RecordInstance" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("_" "{" "_" "}") nil 2)
                          (%opattrs nil nil 0 nil nil nil nil))
                         (%opattr-decl (%opref ("_" "{" "}") nil 1)
                          (%opattrs nil nil 0 nil nil nil nil)))))
    (eval-ast-if-need '(%protect ("RECORD-STRUCTURE") :set))
    (eval-ast-if-need '(%module-decl "OBJECT-ID" :object :system
                        ((%import :protecting "CHAOS:IDENTIFIER" nil)
                         (%subsort-decl
                          (nil (%sort-ref "Identifier" nil) :<
                           (%sort-ref "ObjectId" nil))))))
    (eval-ast-if-need '(%protect ("OBJECT-ID") :set))
    (install-object-id)
    ;; (eval-ast-if-need '(%lisp-eval (progn (install-object-id) 'done)))
    (eval-ast-if-need '(%module-decl "OBJECT" :object :system
                        ((%import :extending "OBJECT-ID" nil)
                         (%import :protecting "BOOL" nil)
                         (%import :extending "AVPAIR" nil)
                         (%sort-decl (%sort-ref "ClassId" nil) nil)
                         (%sort-decl (%sort-ref "Message" nil) nil)
                         (%sort-decl (%sort-ref "Object" nil) nil)
                         (%op-decl ("<" "_" ":" "_" "|" "_" ">")
                          ((%sort-ref "ObjectId" nil)
                           (%sort-ref "ClassId" nil)
                           (%sort-ref "Attributes" nil))
                          (%sort-ref "Object" nil)
                          (%opattrs nil nil nil nil nil t nil)
                          nil)
                         (%opattr-decl
                          (%opref ("<" "_" ":" "_" "|" "_" ">") nil
                           3)
                          (%opattrs nil nil 0 nil nil nil nil))
                         (%op-decl ("<" "_" ":" "_" ">")
                          ((%sort-ref "ObjectId" nil)
                           (%sort-ref "ClassId" nil))
                          (%sort-ref "Object" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl
                          (%opref ("<" "_" ":" "_" ">") nil 2)
                          (%opattrs nil nil 0 nil nil nil nil))
                         (%op-decl ("<" "_" ">")
                          ((%sort-ref "ObjectId" nil))
                          (%sort-ref "Object" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%opattr-decl (%opref ("<" "_" ">") nil 1)
                          (%opattrs nil nil 0 nil nil nil nil))
                         (%op-decl ("*VoidObject*") nil
                          (%sort-ref "Object" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%op-decl ("delete" "_")
                          ((%sort-ref "Object" nil))
                          (%sort-ref "Bool" nil)
                          (%opattrs nil nil nil nil nil nil nil)
                          nil)
                         (%axiom-decl :equation (|find-instance|)
                          ("<" "Id:ObjectId" ":" "C:ClassId" ">")
                          ((%glisp (or
                                    (find-instance id
                                                   (term-sort *self*))
                                    *void-object*)))
                          nil nil)
                         (%axiom-decl :equation (|find-instnace-2|)
                          ("<" "Id:ObjectId" ">")
                          ((%glisp (or (find-instance id)
                                       *void-object*)))
                          nil nil)
                         (%axiom-decl :rule (|delete-instance|)
                          ("delete" "O:Object")
                          ((%glisp (if (delete-instance o)
                                       *bool-true* *bool-false*)))
                          nil nil))))
    (eval-ast-if-need '(%protect ("OBJECT") :set))
    (eval-ast-if-need '(%module-decl "STATE-CONFIGURATION" :object :system
                        ((%import :extending "OBJECT" nil)
                         (%sort-decl (%sort-ref "Configuration" nil)
                          nil))))
    (eval-ast-if-need '(%protect ("STATE-CONFIGURATION") :set))
    (eval-ast-if-need '(%module-decl "ACZ-CONFIGURATION" :object :system
                        ((%import :extending "STATE-CONFIGURATION" nil)
                         (%subsort-decl
                          (nil (%sort-ref "Object" nil)
                           (%sort-ref "Message" nil) :<
                           (%sort-ref "ACZ-Configuration" nil) :<
                           (%sort-ref "Configuration" nil)))
                         (%op-decl ("acz-empty") nil
                          (%sort-ref "ACZ-Configuration" nil)
                          (%opattrs nil nil nil nil nil t nil)
                          nil)
                         (%op-decl ("_" "_")
                          ((%sort-ref "ACZ-Configuration" nil)
                           (%sort-ref "ACZ-Configuration" nil))
                          (%sort-ref "ACZ-Configuration" nil)
                          (%opattrs (:assoc :comm (:id "acz-empty"))
                           nil nil nil nil t nil)
                          nil))))
    (eval-ast-if-need '(%protect ("ACZ-CONFIGURATION") :set))
    (install-record-object)
    ||#
    ;; (eval-ast-if-need '(%lisp-eval (progn (install-record-object) 'done)))
    ;;
    #||
    (eval-ast-if-need-no-error '(%module-decl "ERR" :object :system
                                 ((%bsort-decl "Err" is_err_token
                                   create_err print_err is_err nil))))
    (install-err)
    (eval-ast-if-need-no-error '(%protect ("ERR") :set))
    (eval-ast-if-need-no-error '(%module-decl "BUILT-IN" :object :system
                                 ((%bsort-decl "Built-in"
                                   is_builtin_token create_builtin
                                   print_builtin is_builtin nil))))
    (install_builtin)
    (eval-ast-if-need-no-error '(%protect ("BUILT-IN") :set))
    (eval-ast-if-need-no-error '(%module-decl "LISP" :object :system
                                 ((%bsort-decl "Lisp" is_lisp_token
                                   create_lisp print_lisp is_lisp
                                   nil))))
    (eval-ast-if-need-no-error '(%protect ("LISP") :set))
    (eval-ast-if-need-no-error `(%module-decl "LAST-TERM" :object :system
                                              ((%import :protecting "TRUTH-VALUE"
                                                        nil)
                                               (%op-decl ("last-term-undefined") nil
                                                         ,universal-sort-ref
                                                         (%opattrs nil nil nil nil nil nil nil)
                                                         nil)
                                               (%op-decl ("last-term") nil
                                                         ,universal-sort-ref
                                                         (%opattrs nil nil nil nil nil nil nil)
                                                         nil)
                                               (%axiom-decl :equation nil
                                                            ("last-term")
                                                            ("last-term-undefined") nil nil))))
    (install-last-term)
    (eval-ast-if-need-no-error '(%protect ("LAST-TERM") :set))
    ||#
    #||
    (eval-ast-if-need-no-error '(%module-decl "2TUPLE" :object :system
                                 ((%import :protecting "TRIV" "C1")
                                  (%import :protecting "TRIV" "C2")
                                  (%sort-decl (%sort-ref "2Tuple" nil)
                                   nil)
                                  (%op-decl ("<<" "_" ";" "_" ">>")
                                   ((%sort-ref "Elt" "C1")
                                    (%sort-ref "Elt" "C2"))
                                   (%sort-ref "2Tuple" nil)
                                   (%opattrs nil nil nil nil nil t nil)
                                   nil)
                                  (%op-decl ("1*" "_")
                                   ((%sort-ref "2Tuple" nil))
                                   (%sort-ref "Elt" "C1")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("2*" "_")
                                   ((%sort-ref "2Tuple" nil))
                                   (%sort-ref "Elt" "C2")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%var-decl ("e1")
                                   (%sort-ref "Elt" "C1"))
                                  (%var-decl ("e2")
                                   (%sort-ref "Elt" "C2"))
                                  (%axiom-decl :equation nil
                                   ("1*" "<<" "e1" ";" "e2" ">>")
                                   ("e1") nil nil)
                                  (%axiom-decl :equation nil
                                   ("2*" "<<" "e1" ";" "e2" ">>")
                                   ("e2") nil nil))))
    (eval-ast-if-need-no-error '(%protect ("2TUPLE") :set))
    (eval-ast-if-need-no-error '(%module-decl "3TUPLE" :object :system
                                 ((%import :protecting "TRIV" "C1")
                                  (%import :protecting "TRIV" "C2")
                                  (%import :protecting "TRIV" "C3")
                                  (%sort-decl (%sort-ref "3Tuple" nil)
                                   nil)
                                  (%op-decl
                                   ("<<" "_" ";" "_" ";" "_" ">>")
                                   ((%sort-ref "Elt" "C1")
                                    (%sort-ref "Elt" "C2")
                                    (%sort-ref "Elt" "C3"))
                                   (%sort-ref "3Tuple" nil)
                                   (%opattrs nil nil nil nil nil t nil)
                                   nil)
                                  (%op-decl ("1*" "_")
                                   ((%sort-ref "3Tuple" nil))
                                   (%sort-ref "Elt" "C1")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("2*" "_")
                                   ((%sort-ref "3Tuple" nil))
                                   (%sort-ref "Elt" "C2")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("3*" "_")
                                   ((%sort-ref "3Tuple" nil))
                                   (%sort-ref "Elt" "C3")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%var-decl ("e1")
                                   (%sort-ref "Elt" "C1"))
                                  (%var-decl ("e2")
                                   (%sort-ref "Elt" "C2"))
                                  (%var-decl ("e3")
                                   (%sort-ref "Elt" "C3"))
                                  (%axiom-decl :equation nil
                                   ("1*" "<<" "e1" ";" "e2" ";" "e3"
                                    ">>")
                                   ("e1") nil nil)
                                  (%axiom-decl :equation nil
                                   ("2*" "<<" "e1" ";" "e2" ";" "e3"
                                    ">>")
                                   ("e2") nil nil)
                                  (%axiom-decl :equation nil
                                   ("3*" "<<" "e1" ";" "e2" ";" "e3"
                                    ">>")
                                   ("e3") nil nil))))
    (eval-ast-if-need-no-error '(%protect ("3TUPLE") :set))
    (eval-ast-if-need-no-error '(%module-decl "4TUPLE" :object :system
                                 ((%import :protecting "TRIV" "C1")
                                  (%import :protecting "TRIV" "C2")
                                  (%import :protecting "TRIV" "C3")
                                  (%import :protecting "TRIV" "C4")
                                  (%sort-decl (%sort-ref "4Tuple" nil)
                                   nil)
                                  (%op-decl
                                   ("<<" "_" ";" "_" ";" "_" ";" "_"
                                    ">>")
                                   ((%sort-ref "Elt" "C1")
                                    (%sort-ref "Elt" "C2")
                                    (%sort-ref "Elt" "C3")
                                    (%sort-ref "Elt" "C4"))
                                   (%sort-ref "4Tuple" nil)
                                   (%opattrs nil nil nil nil nil t nil)
                                   nil)
                                  (%op-decl ("1*" "_")
                                   ((%sort-ref "4Tuple" nil))
                                   (%sort-ref "Elt" "C1")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("2*" "_")
                                   ((%sort-ref "4Tuple" nil))
                                   (%sort-ref "Elt" "C2")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("3*" "_")
                                   ((%sort-ref "4Tuple" nil))
                                   (%sort-ref "Elt" "C3")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%op-decl ("4*" "_")
                                   ((%sort-ref "4Tuple" nil))
                                   (%sort-ref "Elt" "C4")
                                   (%opattrs nil nil nil nil nil nil nil)
                                   nil)
                                  (%var-decl ("e1")
                                   (%sort-ref "Elt" "C1"))
                                  (%var-decl ("e2")
                                   (%sort-ref "Elt" "C2"))
                                  (%var-decl ("e3")
                                   (%sort-ref "Elt" "C3"))
                                  (%var-decl ("e4")
                                   (%sort-ref "Elt" "C4"))
                                  (%axiom-decl :equation nil
                                   ("1*" "<<" "e1" ";" "e2" ";" "e3"
                                    ";" "e4" ">>")
                                   ("e1") nil nil)
                                  (%axiom-decl :equation nil
                                   ("2*" "<<" "e1" ";" "e2" ";" "e3"
                                    ";" "e4" ">>")
                                   ("e2") nil nil)
                                  (%axiom-decl :equation nil
                                   ("3*" "<<" "e1" ";" "e2" ";" "e3"
                                    ";" "e4" ">>")
                                   ("e3") nil nil)
                                  (%axiom-decl :equation nil
                                   ("4*" "<<" "e1" ";" "e2" ";" "e3"
                                    ";" "e4" ">>")
                                   ("e4") nil nil))))
    (eval-ast-if-need-no-error '(%protect ("4TUPLE") :set))
    ||#
    (setq *include-bool* t)
    (setq *include-rwl* t)
    (setq *last-module* nil
          *current-module* nil)
    (setq *regularize-signature* nil)

    ;; set recover proc.
    (setq *system-soft-wired*
	  '((%lisp-eval (install-chaos-soft-wired-modules))))
    ))

(defun chaos-misc-init ()
  #||
  (unless *print-ignore-mods*
    (setq *print-ignore-mods* *kernel-hard-wired-builtin-modules*))
  ||#
  (setq *print-ignore-mods* *kernel-hard-wired-builtin-modules*)
  ;;
  #||
  (unless *apply-ignore-modules*
    (setq *apply-ignore-modules*
	  (append *print-ignore-mods*
              (mapcar #'eval-modexp
                      '("CHARACTER" "STRING" "OBJECT")))
	  ))
  ||#
  (unless *apply-ignore-modules*
    (setq *apply-ignore-modules* *print-ignore-mods*))
  )

;;; BUILTIN UNIVERSALLY DEFINED OPERATORS
;;;
#||
(defun init-builtin-universal ()
  (setq *bi-universal-operators*
	(list *identical*
	      *nonidentical*
	      *bool-if*
	      *bool-equal*
	      *beh-equal*
	      *bool-nonequal*
	      *beh-eq-pred*
	      *rwl-predicate*
	      *rwl-predicate2*
	      ))
  )
||#
(defun init-builtin-universal ()
  (setq *bi-universal-operators* nil)
  (and *identical* (push *identical* *bi-universal-operators*))
  (and *nonidentical* (push *nonidentical* *bi-universal-operators*))
  (and *bool-if* (push *bool-if* *bi-universal-operators*))
  (and *bool-equal* (push *bool-equal* *bi-universal-operators*))
  (and *bool-nonequal* (push *bool-nonequal* *bi-universal-operators*))
  (and *beh-eq-pred* (push *beh-eq-pred* *bi-universal-operators*))
  (and *rwl-predicate* (push *rwl-predicate* *bi-universal-operators*))
  (and *rwl-predicate2* (push *rwl-predicate2* *bi-universal-operators*))
  )

;;;
;;; TRAM INITIALIZATION
;;; TRAM built-in sorts & operations.
;;;
(defvar *z-nznat-value* nil)
(defvar *z-nat-value* nil)
(defvar *z-int-value* nil)
(defvar *z-rat-value* nil)
(defvar *z-nznat* nil)
(defvar *z-nat* nil)
(defvar *z-int* nil)
(defvar *z-rat* nil)
(defvar *z-float-value* nil)
(defvar *z-float* nil)
(defvar *z-qid* nil)
(defvar *z-char-value* nil)
(defvar *z-char* nil)
(defvar *z-string-value* nil)
(defvar *z-string* nil)

(defun get-z-module-or-panic (name)
  (or (find-module-in-env (normalize-modexp name))
      (with-output-panic-message ()
        (format t "internal error, could not find ~a" name)
        (break))))

(defun setup-tram-bool-modules ()
  (setq *tram-bool-modules* nil)
  (and *truth-module*
       (push *truth-module* *tram-bool-modules*))
  (and *bool-module*
       (push *bool-module* *tram-bool-modules*))
  (and *rwl-module*
       (push *rwl-module* *tram-bool-modules*)))

(defun init-tram-bi-modules ()
  (setq *z-nznat-value* (get-z-module-or-panic "NZNAT-VALUE"))
  (setq *z-nat-value* (get-z-module-or-panic "NAT-VALUE"))
  (setq *z-int-value* (get-z-module-or-panic "INT-VALUE"))
  (setq *z-rat-value* (get-z-module-or-panic "RAT-VALUE"))
  (setq *z-float-value* (get-z-module-or-panic "FLOAT-VALUE"))
                                        ; (setq *z-nznat* (get-z-module-or-panic "NZNAT"))
                                        ; (setq *z-nat* (get-z-module-or-panic "NAT"))
                                        ; (setq *z-int* (get-z-module-or-panic "INT"))
                                        ; (setq *z-rat* (get-z-module-or-panic "RAT"))
                                        ; (setq *z-float* (get-z-module-or-panic "FLOAT"))
  (setq *z-qid* (get-z-module-or-panic "QID"))
  (setq *z-char-value* (get-z-module-or-panic "CHAR-VALUE"))
                                        ; (setq *z-char* (get-z-module-or-panic "CHARACTER"))
  (setq *z-string-value* (get-z-module-or-panic "STRING-VALUE"))
                                        ; (setq *z-string* (get-z-module-or-panic "STRING"))
  (setq *tram-builtin-modules*
	(list *z-nznat-value*
	      *z-nat-value*
	      *z-int-value*
                                        ; *z-nznat* *z-nat* *z-int*
	      *z-rat-value*
                                        ; *z-rat*
	      *z-float-value*
                                        ; *z-float*
	      *z-qid*
	      *z-char-value*
                                        ; *z-char*
	      *z-string-value*
                                        ; *z-string*
	      ))
  (setup-tram-bool-modules)
  )

;;;
;;; BOOT BUILTIN MODULES
;;;
(eval-when (eval load)
  (boot-chaos)
  (install-chaos-hard-wired-modules)
  (install-chaos-soft-wired-modules)
  (init-tram-bi-modules)
  (init-builtin-universal)
  (chaos-misc-init))

;;;
;;; EOF
